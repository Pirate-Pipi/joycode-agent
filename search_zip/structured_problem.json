[{"problem_type": "bug", "affected_modules": "astropy.units.core", "core_issue": "Unit equality comparison with None causes TypeError instead of returning False for UnrecognizedUnit instances", "technical_keywords": "Unit, UnrecognizedUnit, __eq__, parse_strict, TypeError", "error_symptoms": "TypeError: None is not a valid Unit", "domain_area": "scientific computing", "instance_id": "astropy__astropy-12907"}, {"problem_type": "bug", "affected_modules": "astropy.io.ascii.qdp, astropy.table", "core_issue": "ascii.qdp parser expects QDP commands to be upper case, but QDP files may contain commands in any case, leading to ValueError when parsing lower case commands", "technical_keywords": "ascii.qdp, Table.read, QDP, ValueError, unrecognized QDP line", "error_symptoms": "ValueError: Unrecognized QDP line: read serr 1 2", "domain_area": "data_parsing", "instance_id": "astropy__astropy-13033"}, {"problem_type": "bug", "affected_modules": "InheritDocstrings metaclass, inspect", "core_issue": "The InheritDocstrings metaclass fails to inherit docstrings for properties because inspect.isfunction returns False for property objects", "technical_keywords": "InheritDocstrings, properties, inspect.isfunction, metaclass", "error_symptoms": "Docstrings are not inherited for properties defined in classes using InheritDocstrings metaclass", "domain_area": "object_oriented_programming", "instance_id": "astropy__astropy-13236"}, {"problem_type": "bug", "affected_modules": "astropy.units.decorators, astropy.utils.decorators", "core_issue": "units.quantity_input decorator raises AttributeError when applied to constructors with type hint return value None", "technical_keywords": "units.quantity_input, __init__, return_annotation, to, AttributeError, NoneType, astropy.units, astropy.utils", "error_symptoms": "AttributeError: 'NoneType' object has no attribute 'to'", "domain_area": "data_processing", "instance_id": "astropy__astropy-13398"}, {"problem_type": "bug", "affected_modules": "astropy.utils.minversion, astropy.utils.introspection, distutils.version.LooseVersion", "core_issue": "Using minversion with certain version strings raises TypeError due to incompatibility in LooseVersion when comparing integers and strings", "technical_keywords": "minversion, LooseVersion, distutils.version, parse_version, pkg_resources", "error_symptoms": "TypeError: '<' not supported between instances of 'int' and 'str'", "domain_area": "version_management", "instance_id": "astropy__astropy-13453"}, {"problem_type": "design flaw", "affected_modules": "astropy.units.quantity, astropy.units.core", "core_issue": "Quantity.__array_ufunc__ raises ValueError for incompatible duck-typed operands instead of returning NotImplemented, preventing fallback to reflected operator methods", "technical_keywords": "Quantity.__array_ufunc__, DuckArray, NDArrayOperatorsMixin, units, __radd__, NotImplemented, ValueError, _condition_arg", "error_symptoms": "ValueError: Value not scalar compatible or convertible to an int, float, or complex array", "domain_area": "numerical computing", "instance_id": "astropy__astropy-13579"}, {"problem_type": "bug", "affected_modules": "astropy.io.fits.Card, astropy.io.fits.card", "core_issue": "io.fits.Card._format_float creates unnecessarily long string representations of floats, causing comment truncation and inability to create some valid FITS cards", "technical_keywords": "io.fits.Card, Card._format_float, f-string, value_str, VerifyWarning, FITS Card", "error_symptoms": "Warnings about comments being truncated, float values expanded to excessive length, inability to exactly reproduce FITS cards from file", "domain_area": "astronomical data I/O", "instance_id": "astropy__astropy-13977"}, {"problem_type": "bug", "affected_modules": "astropy.io.registry.base, astropy.io.registry.compat, astropy.io.fits.connect", "core_issue": "identify_format triggers IndexError in is_fits when called with insufficient positional arguments, due to unchecked access to args[0]", "technical_keywords": "identify_format, is_fits, args, HDUList, TableHDU, BinTableHDU, GroupsHDU, IndexError", "error_symptoms": "IndexError: tuple index out of range", "domain_area": "IO and data format identification", "instance_id": "astropy__astropy-14096"}, {"problem_type": "bug", "affected_modules": "astropy.nddata.NDDataRef", "core_issue": "Mask propagation fails during arithmetic when one operand lacks a mask, causing TypeError due to bitwise_or operating on int and NoneType", "technical_keywords": "NDDataRef, mask, multiply, handle_mask, np.bitwise_or, TypeError", "error_symptoms": "TypeError: unsupported operand type(s) for |: 'int' and 'NoneType'", "domain_area": "data_processing", "instance_id": "astropy__astropy-14182"}, {"problem_type": "bug", "affected_modules": "astropy.io.fits.Card, astropy.io.fits", "core_issue": "Null strings represented as double single-quotes ('') in FITS cards are inconsistently converted to single quotes (') during parsing or serialization for certain string lengths", "technical_keywords": "FITS Card, fits.Card, fits.Card.fromstring, string serialization, null string, single-quote handling", "error_symptoms": "String values with double single-quotes ('') are sometimes read back as single quotes (') leading to value mismatches depending on the string length", "domain_area": "astronomical data I/O", "instance_id": "astropy__astropy-14309"}, {"problem_type": "bug", "affected_modules": "astropy.modeling.separable, astropy.modeling.models", "core_issue": "The separability_matrix function fails to correctly compute separability for nested CompoundModels, producing incorrect matrix results that indicate non-separable inputs and outputs.", "technical_keywords": "separability_matrix, CompoundModels, Pix2Sky_TAN, Linear1D, astropy.modeling.separable", "error_symptoms": "Incorrect separability matrix output for nested compound models; inputs and outputs shown as non-separable when they should be separable", "domain_area": "scientific_modeling", "instance_id": "astropy__astropy-14365"}, {"problem_type": "bug", "affected_modules": "astropy.coordinates.SkyCoord, custom_coord", "core_issue": "When a subclassed SkyCoord property accesses a non-existent attribute, the error message incorrectly reports the property as missing rather than the intended attribute", "technical_keywords": "SkyCoord, custom_coord, @property, __getattr__, AttributeError", "error_symptoms": "AttributeError incorrectly states that the property does not exist instead of the actual missing attribute", "domain_area": "astronomical coordinate handling", "instance_id": "astropy__astropy-14369"}, {"problem_type": "bug", "affected_modules": "astropy.wcs.wcsapi.SlicedLowLevelWCS, astropy.wcs.wcsapi.HighLevelWCSWrapper, astropy.wcs.WCS", "core_issue": "world_to_pixel yields incorrect, extremely large pixel coordinate when applied to a sliced SlicedLowLevelWCS instance, while the unsliced WCS produces expected results", "technical_keywords": "world_to_pixel, pixel_to_world, SlicedLowLevelWCS, HighLevelWCSWrapper, astropy.wcs.WCS, PCij matrix, SkyCoord, slicing, WCS", "error_symptoms": "world_to_pixel on a 2D slice returns essentially infinite value for one coordinate, inconsistent with results from unsliced WCS or pixel_to_world", "domain_area": "astronomical data processing", "instance_id": "astropy__astropy-14508"}, {"problem_type": "data parsing bug", "affected_modules": "astropy.table, astropy.io.ascii.cds", "core_issue": "The ascii.cds reader in astropy.table incorrectly parses composite SI units from MRT (CDS format) files, resulting in wrong unit order and interpretation.", "technical_keywords": "ascii.cds, Table.read, astropy.table, composite units, SI units, CDS format, MRT files", "error_symptoms": "Parsed units in the resulting Table have incorrect order and do not match the units specified in the MRT input file.", "domain_area": "astronomical data handling", "instance_id": "astropy__astropy-14539"}, {"problem_type": "feature request", "affected_modules": "astropy.table, NdarrayMixin, Column", "core_issue": "Proposal to remove the automatic transformation of structured numpy arrays into NdarrayMixin when adding them to Table objects, suggesting structured arrays be wrapped as Column instead", "technical_keywords": "structured np.array, Table, NdarrayMixin, Column, data_is_mixin, dtype, FutureWarning, unified I/O, serialization", "error_symptoms": "Structured numpy arrays are automatically turned into NdarrayMixin when added to Table, which may no longer be necessary and could affect serialization and I/O behavior", "domain_area": "data modeling", "instance_id": "astropy__astropy-14598"}, {"problem_type": "bug", "affected_modules": "astropy.io.fits.FITSDiff, astropy.io.fits.BinTableHDU, astropy.io.fits.Column", "core_issue": "FITSDiff reports differences when comparing identical FITS files that contain variable-length arrays due to improper handling of VLA columns.", "technical_keywords": "io.fits.FITSDiff, BinTableHDU.from_columns, Column, VLA, variable-length array, printdiff", "error_symptoms": "Comparing a FITS file to itself with FITSDiff returns False for identical and reports data differences in VLA column.", "domain_area": "astronomy data formats", "instance_id": "astropy__astropy-14995"}, {"problem_type": "feature request", "affected_modules": "astropy.coordinates, astropy.coordinates.baseframe, astropy.coordinates.transformations, astropy.coordinates.altaz, astropy.coordinates.hadec, astropy.coordinates.itrs", "core_issue": "Current ITRS to AltAz transform inaccurately handles geocentric versus topocentric positions due to inappropriate time synchronization, causing ITRS coordinates to drift relative to Earth's position; proposes a more direct time-invariant transformation approach within ITRS for ITRS<->AltAz and ITRS<->HADec frames.", "technical_keywords": "ITRS, AltAz, HADec, obstime, SSB, ITRF, frame_transform_graph, FunctionTransformWithFiniteDifference, rotation_matrix, location.get_itrs, realize_frame, cartesian", "error_symptoms": "Apparent inaccuracy of ITRS to AltAz transformations; ITRS positions become abnormally displaced, potentially millions of kilometers from the intended location when transforming between different obstimes.", "domain_area": "astronomical coordinate transformations", "instance_id": "astropy__astropy-7166"}, {"problem_type": "compatibility issue", "affected_modules": "astropy.io.fits.header, Header.fromstring, Card.fromstring", "core_issue": "Header.fromstring does not properly accept bytes objects in Python 3, leading to confusion over supported input types", "technical_keywords": "Header.fromstring, Card.fromstring, fromfile, bytes, str, unicode, Python 3", "error_symptoms": "Header.fromstring rejects or mishandles bytes input on Python 3", "domain_area": "data_io", "instance_id": "astropy__astropy-7336"}, {"problem_type": "query syntax error", "affected_modules": "django.db.models, django.db.models.aggregates.Count", "core_issue": "Using Count annotation with both Case condition and distinct=True produces a malformed SQL query lacking a space between DISTINCT and CASE", "technical_keywords": "Count, Case, distinct, annotation, Django, query generation, SQL", "error_symptoms": "SQL syntax error due to malformed COUNT(DISTINCTCASE WHEN ...) query", "domain_area": "web_application_backend", "instance_id": "astropy__astropy-7606"}, {"problem_type": "validation bug", "affected_modules": "core.validators.URLValidator, regex validation, tests/validators/invalid_urls.txt", "core_issue": "URLValidator incorrectly accepts URLs with un-encoded special characters in username and password fields, violating RFC 1738 requirements", "technical_keywords": "URLValidator, RFC 1738, username, password, validation regex, %-encoded, Diego Perini gist, #20003, pull request #10097", "error_symptoms": "Invalid URLs containing \"@\", \":\", or \"/\" in username or password fields are erroneously validated as correct URLs", "domain_area": "web development", "instance_id": "astropy__astropy-7671"}, {"problem_type": "bug", "affected_modules": "django.utils.dateparse", "core_issue": "The standard_duration_re regex does not correctly parse negative durations due to missing '-' in lookahead after the hours group", "technical_keywords": "parse_duration, standard_duration_re, re.compile, regex, hours, lookahead", "error_symptoms": "Negative duration strings are not matched or parsed correctly", "domain_area": "date_and_time_parsing", "instance_id": "astropy__astropy-8707"}, {"problem_type": "bug", "affected_modules": "django.db.models.query, django.db.models.sql.compiler, django.db.backends.utils", "core_issue": "Union of querysets with ordering breaks re-evaluation when one queryset has ordering on fields not included in the union select list, causing a ProgrammingError", "technical_keywords": "QuerySet.union, order_by, values_list, ProgrammingError, Dimension, pk, compiler.execute_sql", "error_symptoms": "django.db.utils.ProgrammingError: ORDER BY position 4 is not in select list", "domain_area": "ORM, database querying", "instance_id": "astropy__astropy-8872"}, {"problem_type": "unexpected behavior", "affected_modules": "astropy.units.quantity, numpy", "core_issue": "Creating a Quantity from np.float16 auto-converts its dtype to float64, unlike other float types which preserve their original dtype", "technical_keywords": "Quantity, np.float16, dtype, np.float32, np.float64, np.float128, np.float, np.float_, u.km", "error_symptoms": "Quantity constructed from np.float16 has dtype float64 instead of float16", "domain_area": "scientific_computing", "instance_id": "django__django-10097"}, {"problem_type": "bug", "affected_modules": "astropy.timeseries.TimeSeries", "core_issue": "Removing a required column from TimeSeries triggers a misleading exception message that does not inform users about missing required columns.", "technical_keywords": "TimeSeries, remove_column, _required_columns, ValueError, time, flux", "error_symptoms": "ValueError: TimeSeries object is invalid - expected 'time' as the first columns but found 'time'", "domain_area": "data_processing", "instance_id": "django__django-10554"}, {"problem_type": "feature_request", "affected_modules": "astropy.table, astropy.io.ascii, astropy.io.ascii.rst, astropy.io.ascii.core", "core_issue": "The ascii.rst writer does not support the header_rows parameter, causing a TypeError when specifying header_rows for RestructuredText output", "technical_keywords": "QTable, write, ascii.rst, header_rows, RST.__init__, TypeError, astropy.table, astropy.io.ascii.rst, astropy.io.ascii.connect", "error_symptoms": "TypeError: RST.__init__() got an unexpected keyword argument 'header_rows'", "domain_area": "data_formatting", "instance_id": "django__django-10880"}, {"problem_type": "enhancement", "affected_modules": "django.db.backends.postgres.client", "core_issue": "Use subprocess.run to set PGPASSWORD environment variable for PostgreSQL client, improving code reliability and simplicity", "technical_keywords": "subprocess.run, PGPASSWORD, postgres backend, python 3.5, Django 2.1", "error_symptoms": "unknown", "domain_area": "database_management", "instance_id": "django__django-10914"}, {"problem_type": "feature request", "affected_modules": "ModelAdmin, get_inlines, get_inline_instances", "core_issue": "There is no hook to dynamically set inlines in ModelAdmin based on the request or model instance without duplicating for loop logic by overriding get_inline_instances.", "technical_keywords": "ModelAdmin, get_inlines, get_inline_instances, request, obj", "error_symptoms": "Cannot set inlines dynamically without code duplication", "domain_area": "web_framework", "instance_id": "django__django-10973"}, {"problem_type": "bug", "affected_modules": "django.contrib.contenttypes.management, migrate.py, database router", "core_issue": "RenameContentType._rename() saves the content type on the default database instead of the specified target database during migrations", "technical_keywords": "RenameContentType._rename, transaction.atomic, content_type.save, migrations.RenameModel, schema_editor.connection.alias, using=db, OperationalError", "error_symptoms": "OperationalError: no such table: django_content_types when running migrations with custom database parameters", "domain_area": "database_management", "instance_id": "django__django-10999"}, {"problem_type": "bug", "affected_modules": "Engine, Engine.render_to_string, Context", "core_issue": "Engine.render_to_string ignores the engine's autoescape attribute and always applies autoescaping, even if autoescape=False", "technical_keywords": "Engine, render_to_string, Context, autoescape", "error_symptoms": "Templates rendered with render_to_string are autoescaped regardless of the engine's autoescape setting", "domain_area": "template_engine", "instance_id": "django__django-11066"}, {"problem_type": "bug", "affected_modules": "ASCIIUsernameValidator, UnicodeUsernameValidator, contrib.auth.validators", "core_issue": "Username validators incorrectly accept usernames with trailing newline due to use of $ in regex, which matches a newline at the end", "technical_keywords": "ASCIIUsernameValidator, UnicodeUsernameValidator, regex, r'^[\\w.@+-]+$', r'\\A[\\w.@+-]+\\Z', contrib.auth.validators", "error_symptoms": "Usernames ending with a newline are accepted as valid", "domain_area": "authentication", "instance_id": "django__django-11087"}, {"problem_type": "bug", "affected_modules": "django.http.response, HttpResponse", "core_issue": "HttpResponse does not properly serialize memoryview objects, resulting in incorrect response content", "technical_keywords": "HttpResponse, memoryview, BinaryField, content, Sqlite, Postgresql", "error_symptoms": "Response content is a memoryview object reference instead of the expected bytes", "domain_area": "web_framework", "instance_id": "django__django-11095"}, {"problem_type": "configuration inconsistency", "affected_modules": "FileSystemStorage, FILE_UPLOAD_HANDLERS, tempfile.NamedTemporaryFile, os.rename", "core_issue": "Uploaded file permissions are inconsistent if FILE_UPLOAD_PERMISSIONS is not set, resulting in files with restrictive permissions due to the handling of temporary files", "technical_keywords": "FILE_UPLOAD_PERMISSIONS, FileSystemStorage, MemoryUploadedFile, TemporaryUploadedFile, FILE_UPLOAD_HANDLERS, tempfile.NamedTemporaryFile, os.rename", "error_symptoms": "Some uploaded files saved with 0o600 permission instead of expected 0o644, causing potential access issues", "domain_area": "web_application_framework", "instance_id": "django__django-11099"}, {"problem_type": "bug", "affected_modules": "django.forms.models", "core_issue": "model_to_dict() returns all fields instead of an empty dict when called with fields set to an empty list", "technical_keywords": "model_to_dict, fields, f.name, django.forms.models, PR 11150", "error_symptoms": "Function returns all model fields even when an empty field list was specified", "domain_area": "web_frameworks", "instance_id": "django__django-11119"}, {"problem_type": "bug", "affected_modules": "django.contrib.admin, django.db.models.fields.related, django.contrib.auth", "core_issue": "Users with view-only permissions can edit auto-created ManyToManyFields through admin inlines", "technical_keywords": "ManyToManyField, TabularInline, view permission, admin, inlines, Report, Photo, ReportPhotoInlineModelAdmin", "error_symptoms": "Users with only view permission are able to add or remove items for ManyToManyFields in the admin UI", "domain_area": "web_framework", "instance_id": "django__django-11133"}, {"problem_type": "formatting inconsistency", "affected_modules": "django.utils.numberformat", "core_issue": "Formatting extremely small numbers with decimal_pos yields exponential notation instead of fixed zero decimal string", "technical_keywords": "django.utils.numberformat.format, decimal_pos, Decimal, exponential notation, hardcoded cut-off", "error_symptoms": "Output such as '1.00e-200' instead of '0.00' or appropriate zero-value representation", "domain_area": "data_presentation", "instance_id": "django__django-11138"}, {"problem_type": "bug", "affected_modules": "django.db.models.deletion, django.db.models.Model", "core_issue": "Calling delete() on a model instance without dependencies does not set its primary key to None afterwards", "technical_keywords": "delete(), PK, primary key, dependencies, Model, django.db.models.deletion", "error_symptoms": "After calling .delete(), the model instance still has its original primary key value", "domain_area": "web_framework", "instance_id": "django__django-11141"}, {"problem_type": "compatibility issue", "affected_modules": "migrate command, migration file discovery", "core_issue": "The migrate command fails on migrations directories that are implicit namespace packages due to unnecessary checking for a __file__ attribute, which these packages lack.", "technical_keywords": "migrate command, migrations package, __init__.py, __file__, pkgutil.iter_modules, __path__", "error_symptoms": "migrate command does not work for migration directories without __init__.py files", "domain_area": "Python packaging and migration", "instance_id": "django__django-11149"}, {"problem_type": "feature request", "affected_modules": "management commands", "core_issue": "The skip_checks stealth option for management commands is not accessible from the command line, limiting its usability in development environments.", "technical_keywords": "management commands, skip_checks, command line, system check", "error_symptoms": "Users cannot skip system checks via command line; workflow is disrupted by system check requirements", "domain_area": "application management", "instance_id": "django__django-11163"}, {"problem_type": "feature request", "affected_modules": "dbshell, django.db.backends.postgresql", "core_issue": "dbshell does not support specifying PostgreSQL client certificate and key parameters required for mutual TLS connections", "technical_keywords": "dbshell, sslcert, sslkey, sslmode, sslrootcert, DATABASES, django.db.backends.postgresql, mutual TLS", "error_symptoms": "Unable to connect to PostgreSQL databases that require client certificates and keys using dbshell", "domain_area": "database_security", "instance_id": "django__django-11179"}, {"problem_type": "performance issue, unnecessary database query", "affected_modules": "ModelBackend, ModelBackend.authenticate, UserModel, UserModel._default_manager", "core_issue": "ModelBackend.authenticate performs a pointless database query and runs the password hasher when username is None, leading to unnecessary resource usage", "technical_keywords": "ModelBackend, authenticate, UserModel, USERNAME_FIELD, get_by_natural_key, set_password, DoesNotExist, django-sesame", "error_symptoms": "An SQL query is executed with username as NULL, causing needless processing and resource consumption", "domain_area": "authentication", "instance_id": "django__django-11206"}, {"problem_type": "bug", "affected_modules": "astropy.table, astropy.io.ascii.write, astropy.io.ascii.html", "core_issue": "The formats argument to astropy.table.Table.write is ignored when outputting tables in HTML format, although it works as expected for CSV, RST, and other formats.", "technical_keywords": "astropy.table.Table, write, format, formats, html, csv, ascii.rst, StringIO", "error_symptoms": "HTML table output displays numeric columns with default formatting instead of the user-supplied formats; specifically, numbers appear with full decimal places, ignoring the format specification.", "domain_area": "data_formatting", "instance_id": "django__django-11211"}, {"problem_type": "data migration issue", "affected_modules": "django.db.models.query, django.db.backends.mysql.base, MySQLdb.cursors, django ORM, mysqlclient-python, treeherder/model/models.py, treeherder/model/management/commands/cycle_data.py", "core_issue": "UnicodeDecodeError occurs during .delete() in Django due to invalid unicode data in MySQL inserted under Python 2.7, and Django unnecessarily fetches non-required fields during delete operations", "technical_keywords": "delete, Django ORM, mysqlclient-python, use_unicode, UnicodeDecodeError, MySQLdb, select query, cycle_data, text_log_error.line, Jobs, CASCADE", "error_symptoms": "UnicodeDecodeError: 'utf-8' codec can't decode byte 0xed in position 78: invalid continuation byte", "domain_area": "database integration", "instance_id": "django__django-11239"}, {"problem_type": "bug", "affected_modules": "django.db.models.constraints.CheckConstraint, django.db.models.Q, django.db.migrations", "core_issue": "CheckConstraint generates SQL with fully qualified field names when combining OR and AND clauses, causing malformed schema errors on SQLite and Oracle during migrations", "technical_keywords": "CheckConstraint, Q, Col, SimpleCol, AND, OR, migrations, CreateModel, AddConstraint, AutoField, BooleanField, IntegerField, malformed database schema", "error_symptoms": "Migration fails with malformed database schema error indicating no such column: new__app_testconstraint.field_1", "domain_area": "database_schema, ORM, migrations", "instance_id": "django__django-11265"}, {"problem_type": "bug", "affected_modules": "QuerySet, compiler.py", "core_issue": "Composed queries using values() or values_list() do not update the list of columns when evaluated multiple times, returning incorrect results", "technical_keywords": "values, values_list, union, QuerySet, get, ReservedName, compiler.py", "error_symptoms": "Returned tuple contains unexpected/unchanged columns instead of the queried ones", "domain_area": "database ORM", "instance_id": "django__django-11276"}, {"problem_type": "feature request", "affected_modules": "django.forms, django.models", "core_issue": "cleaned_data cannot overwrite a model field's default value when the field is absent from the form data", "technical_keywords": "cleaned_data, ModelForm, default value, form submission", "error_symptoms": "Form processing does not allow modifications in cleaned_data to override model field defaults if the data is missing", "domain_area": "web_framework", "instance_id": "django__django-11292"}, {"problem_type": "bug", "affected_modules": "translate_url, URL resolver", "core_issue": "translate_url wrongly generates URLs when optional named groups are not provided in the pattern", "technical_keywords": "translate_url, optional named groups, URL pattern, arguments, URL generation", "error_symptoms": "Incorrect URLs created when translating patterns with missing optional named arguments", "domain_area": "web_framework", "instance_id": "django__django-11299"}, {"problem_type": "bug", "affected_modules": "django.db.backends.mysql.operations, DATABASES settings, date lookup (QuerySet API)", "core_issue": "The per-database TIME_ZONE setting in DATABASES is ignored during date lookups, causing incorrect timezone conversions and query behavior when USE_TZ is True and non-UTC database timezones are configured.", "technical_keywords": "TIME_ZONE, USE_TZ, DATABASES, timezone.make_aware, MyModel.objects.filter, CONVERT_TZ, date lookup, mysql backend, django.db.backends.mysql.operations, tzinfo, datetime, manage.py shell", "error_symptoms": "Date lookups using __date fail to return correct results when the database timezone is not UTC, despite correct results for exact datetime filtering; SQL uses CONVERT_TZ with 'UTC' instead of per-database timezone, leading to inconsistency or dependence on database timezone tables.", "domain_area": "web_frameworks", "instance_id": "django__django-11333"}, {"problem_type": "bug", "affected_modules": "django.db.models.query, django.db.models.sql.query, FilteredRelation", "core_issue": "Using exclude on a queryset annotated with FilteredRelation raises a FieldError because the annotation name cannot be resolved as a field in the resulting query", "technical_keywords": "FilteredRelation, annotate, exclude, split_exclude, add_q, build_filter, names_to_path, QuerySet, FieldError, Q, isnull, Author", "error_symptoms": "FieldError: Cannot resolve keyword 'book_alice' into field", "domain_area": "web_framework", "instance_id": "django__django-11400"}, {"problem_type": "bug", "affected_modules": "django.db.models.GenericForeignKey, django.db.models.UUIDField, django.db.models.ForeignKey, django.db.models.CharField, django.db.models.Model, django.orm.query.QuerySet", "core_issue": "Prefetching related objects fails when using GenericForeignKey to a model with a UUID primary key, causing the related field to return None", "technical_keywords": "GenericForeignKey, UUIDField, ForeignKey, CharField, prefetch_related, ContentType, queryset, Bar, Foo, foo_object_id", "error_symptoms": "prefetch_related returns None for related GenericForeignKey field", "domain_area": "web_framework", "instance_id": "django__django-11433"}, {"problem_type": "performance issue", "affected_modules": "django.urls.resolvers, django.urls.base, django.urls.resolvers.get_resolver, django.urls.base.set_urlconf, django.urls.resolvers.URLResolver, django.urls.resolvers.URLResolver._populate, django.urls.reverse", "core_issue": "Multiple URLResolver instances are constructed and URLResolver._populate is called multiple times when get_resolver is invoked with different urlconf values before and after set_urlconf runs, leading to duplicated caching and unnecessary expensive computations.", "technical_keywords": "get_resolver, set_urlconf, URLResolver, URLResolver._populate, reverse, lru_cache, settings.ROOT_URLCONF, BaseHandler.get_response", "error_symptoms": "Multiple expensive URLResolver._populate operations and duplicated instance caches, leading to wasteful resource usage in applications with many routes", "domain_area": "web framework", "instance_id": "django__django-11451"}, {"problem_type": "performance improvement, code duplication", "affected_modules": "django.utils.html.escape, html.escape", "core_issue": "django.utils.html.escape() redundantly reimplements functionality of Python's stdlib html.escape(), which is faster and better maintained", "technical_keywords": "django.utils.html.escape, html.escape, .replace, .translate, template rendering, Python stdlib", "error_symptoms": "Slower escape function, slight backwards incompatibility in HTML entity for single quote", "domain_area": "web development", "instance_id": "django__django-11477"}, {"problem_type": "bug", "affected_modules": "django.core.mail.message, django.core.mail.utils, django.core.mail.EmailMessage, email.header", "core_issue": "Email messages fail when the domain name contains non-ASCII characters and the message encoding is non-unicode, due to improper conversion to punycode for message headers", "technical_keywords": "Message-ID, DNS_NAME, Header, encoding, iso-8859-1, make_msgid, forbid_multi_line_headers, unicode, punycode, EmailMessage", "error_symptoms": "UnicodeEncodeError: 'ascii' codec can't encode characters, UnicodeEncodeError: 'latin-1' codec can't encode characters in position 39-40: ordinal not in range(256)", "domain_area": "email_processing", "instance_id": "django__django-11490"}, {"problem_type": "enhancement request", "affected_modules": "admin.RelatedFieldListFilter, admin.RelatedOnlyFieldListFilter, django.contrib.admin.filters, Model._meta.ordering, ModelAdmin", "core_issue": "RelatedFieldListFilter and RelatedOnlyFieldListFilter do not properly respect the related model's Meta.ordering when displaying choices in the admin filter; ordering is either left empty or omitted", "technical_keywords": "RelatedFieldListFilter, RelatedOnlyFieldListFilter, Model._meta.ordering, ModelAdmin, Meta.ordering, get_choices, ordering kwarg, django.contrib.admin.filters.py", "error_symptoms": "Filter choices in Django admin are not ordered as expected based on related model's Meta.ordering", "domain_area": "web framework, admin interface", "instance_id": "django__django-11532"}, {"problem_type": "bug", "affected_modules": "simplify_regexp, replace_named_groups", "core_issue": "replace_named_groups fails to replace the final named group if the urlpattern does not end with a slash", "technical_keywords": "replace_named_groups, simplify_regexp, named group, urlpattern, Django REST Framework", "error_symptoms": "Trailing named groups not replaced when urlpattern lacks trailing slash", "domain_area": "web_framework, regular_expressions", "instance_id": "django__django-11551"}, {"problem_type": "regression", "affected_modules": "AuthenticationForm, django.contrib.auth.forms", "core_issue": "The username field in AuthenticationForm no longer sets the maxlength HTML attribute due to a recent code change", "technical_keywords": "AuthenticationForm, username field, maxlength, HTML attribute, django.contrib.auth.forms, #27515, 5ceaf14686ce626404afb6a5fbd3d8286410bf13", "error_symptoms": "username field rendered without maxlength HTML attribute", "domain_area": "web_framework", "instance_id": "django__django-11555"}, {"problem_type": "bug", "affected_modules": "django.core.management, call_command, argparse", "core_issue": "call_command does not correctly handle required mutually exclusive argument groups when arguments are passed as kwargs", "technical_keywords": "call_command, add_mutually_exclusive_group, parser.add_argument, CommandError, parse_args", "error_symptoms": "CommandError: Error: one of the arguments --shop-id --shop is required when argument is passed as kwarg", "domain_area": "command_line_interface", "instance_id": "django__django-11603"}, {"problem_type": "bug", "affected_modules": "django.db.models.query, bulk_create, bulk_update", "core_issue": "bulk_create's batch_size parameter does not correctly limit itself to the compatible max_batch_size, leading to potentially incompatible batch sizes and inconsistent behavior compared to bulk_update", "technical_keywords": "bulk_create, batch_size, max_batch_size, bulk_update, QuerySet, Django", "error_symptoms": "bulk_create may attempt batches larger than permitted by the database backend's constraints", "domain_area": "database_orm", "instance_id": "django__django-11728"}, {"problem_type": "performance issue", "affected_modules": "django.db.models, deletion.Collector", "core_issue": "Deletion logic generates multiple separate fast delete queries per table instead of combining them by table to minimize database roundtrips", "technical_keywords": "on_delete=models.CASCADE, deletion.Collector, DELETE FROM, ManyToManyField, ForeignKey", "error_symptoms": "Excessive number of DELETE queries executed, increased database roundtrips during delete operations", "domain_area": "ORM, database query optimization", "instance_id": "django__django-11734"}, {"problem_type": "migration issue", "affected_modules": "django.db.models, migrations, models.UUIDField, models.ForeignKey", "core_issue": "Changing a model field from UUIDField to ForeignKey in Django does not create a migration dependency on the referenced model's app, leading to unresolved model errors during migration.", "technical_keywords": "UUIDField, ForeignKey, Migration class, dependencies, App1, App2, on_delete, related model, ValueError", "error_symptoms": "ValueError: Related model 'testapp2.App2' cannot be resolved", "domain_area": "web development", "instance_id": "django__django-11740"}, {"problem_type": "bug", "affected_modules": "django.utils.http", "core_issue": "The two-digit year handling in parse_http_date is hardcoded and does not compare against the current year as required by RFC 7231, leading to incorrect date interpretations.", "technical_keywords": "parse_http_date, two-digit year, RFC 7231, RFC 850, date parsing, timestamp", "error_symptoms": "Incorrect parsing of dates with two-digit years, resulting in future timestamps outside correct bounds", "domain_area": "web_framework", "instance_id": "django__django-11749"}, {"problem_type": "bug", "affected_modules": "django.db.models.query, django.db.models.functions, django.db.models.expressions", "core_issue": "Using OuterRef in exclude or ~Q inside Exists leads to incorrect model reference, causing ValueError when evaluating queryset", "technical_keywords": "OuterRef, Exists, exclude, Q, annotate, filter, Item.objects, Number.objects, subquery, category_id", "error_symptoms": "ValueError: This queryset contains a reference to an outer query and may only be used in a subquery", "domain_area": "ORM_query_composition", "instance_id": "django__django-11790"}, {"problem_type": "bug", "affected_modules": "SplitArrayField, BooleanField, CheckboxInput, django.forms.widgets", "core_issue": "CheckboxInput modifies the attrs dict by setting 'checked': True, causing subsequent widgets to have checked enabled even if the backing data is False", "technical_keywords": "SplitArrayField, BooleanField, CheckboxInput, get_context, attrs, checked, django.forms.widgets", "error_symptoms": "BooleanField widgets in SplitArrayField remain checked after the first True value, regardless of subsequent data values", "domain_area": "web_frameworks", "instance_id": "django__django-11815"}, {"problem_type": "data type inconsistency", "affected_modules": "django.db.models, django.db.models.TextChoices, django.db.models.IntegerChoices", "core_issue": "Field value of TextChoices or IntegerChoices returns an enum instance instead of the expected primitive value, causing type inconsistencies between newly created and retrieved model instances", "technical_keywords": "CharField, IntegerField, choices, TextChoices, IntegerChoices, enum.Enum, __str__, assertIsInstance, assertEqual, MyObject, MyChoice", "error_symptoms": "AssertionError when comparing the string representation of the field value to its expected primitive value, differing behavior between instance creation and retrieval", "domain_area": "web_framework, database_modeling", "instance_id": "django__django-11820"}, {"problem_type": "bug", "affected_modules": "docutils, admindoc, trim_docstring", "core_issue": "Rendering view docstring fails when the first line is not empty due to incorrect indentation calculation in trim_docstring", "technical_keywords": "docutils, admindoc, docstring, trim_docstring, default-role, directive, indent, lstrip, min", "error_symptoms": "Error in \"default-role\" directive: no content permitted", "domain_area": "documentation_processing", "instance_id": "django__django-11848"}, {"problem_type": "bug", "affected_modules": "django.db.models, Meta.ordering, order_by", "core_issue": "Using query expressions in Meta.ordering causes order_by on a parent model to crash due to OrderBy objects being passed instead of strings in get_order_dir during multi-table inheritance", "technical_keywords": "Meta.ordering, order_by, OrderBy, get_order_dir, multi-table inheritance, query expression", "error_symptoms": "Crash during test database setup when ordering by parent model, stacktrace indicating failure related to OrderBy object in get_order_dir", "domain_area": "web_framework_orm", "instance_id": "django__django-11880"}, {"problem_type": "bug", "affected_modules": "django.db.models.Index, django.db.backends.ddl_references, django.db.backends.ddl_references.Columns", "core_issue": "CREATE INDEX statements are generated without proper whitespace in field ordering and opclass usage due to incorrect handling of col_suffixes in django.db.backends.ddl_references.Columns", "technical_keywords": "Index, fields, name, opclasses, CREATE INDEX, col_suffixes, django.db.backends.ddl_references.Columns", "error_symptoms": "Generated SQL statements lack expected whitespace, leading to malformed CREATE INDEX syntax", "domain_area": "database_schema_generation", "instance_id": "django__django-11885"}, {"problem_type": "regression bug", "affected_modules": "django.db.models, django.db.models.options", "core_issue": "models.E015 validation error occurs when Meta.ordering references the primary key of a related field using double underscore, such as 'option__pk'", "technical_keywords": "models.E015, Meta.ordering, related field, pk, double underscore lookup, regression, Django", "error_symptoms": "'ordering' refers to the nonexistent field, related field, or lookup 'option__pk'", "domain_area": "web framework, ORM", "instance_id": "django__django-11951"}, {"problem_type": "bug, regression", "affected_modules": "django.contrib.admin.options", "core_issue": "Unescaped regex special characters in formset prefix may lead to incorrect regex matching and potential data loss in admin changeform view", "technical_keywords": "re.compile, prefix, self.model._meta.pk.name, pk_pattern, regex, re.escape, formset prefix", "error_symptoms": "Possible data loss when formset prefix contains regex special characters in admin changeform view", "domain_area": "web framework, form handling", "instance_id": "django__django-11964"}, {"problem_type": "bug", "affected_modules": "django.template.library, simple_tag, inclusion_tag", "core_issue": "Custom template tags with keyword-only arguments and defaults fail to accept keyword arguments and raise incorrect TemplateSyntaxError messages", "technical_keywords": "register.simple_tag, register.inclusion_tag, keyword-only argument, default value, TemplateSyntaxError", "error_symptoms": "'<tag>' received unexpected keyword argument '<arg>' error raised for valid arguments, incorrect error message when argument supplied twice", "domain_area": "web_framework", "instance_id": "django__django-11999"}, {"problem_type": "bug", "affected_modules": "django.db.models, django.db.migrations, enum.Enum, django.utils.translation.gettext_lazy", "core_issue": "Django migration files use the translated value of Enum as default instead of its name, causing ValueError after translation since the value no longer matches an Enum member", "technical_keywords": "CharField, Enum, migration file, gettext_lazy, Status, ValueError", "error_symptoms": "ValueError: 'Good' is not a valid Status", "domain_area": "web_application_framework", "instance_id": "django__django-12039"}, {"problem_type": "regression", "affected_modules": "django.db.models, django.core.management.commands.loaddata", "core_issue": "Saving a model instance with an explicit pk value when the pk field has a default causes duplicate INSERTs instead of an UPDATE in Django 3.0 and later", "technical_keywords": "UUIDField, primary_key, default, create, save, loaddata, Sample, pk", "error_symptoms": "Second INSERT fails due to duplicate primary key, loaddata command behaves unexpectedly with explicit pk values", "domain_area": "web_application_framework", "instance_id": "django__django-12050"}, {"problem_type": "bug", "affected_modules": "django.forms.fields, django.forms.forms, django.forms.models", "core_issue": "FormField's __deepcopy__ does not deep copy the error_messages dictionary, causing shared error messages across form instances", "technical_keywords": "__deepcopy__, error_messages, FormField, Forms, ModelForms, ProfileForm", "error_symptoms": "Modifying error messages for one form field affects error messages of fields in other form instances, resulting in incorrect or unintended error propagation", "domain_area": "web_frameworks", "instance_id": "django__django-12125"}, {"problem_type": "regression bug", "affected_modules": "django.contrib.admin, django.contrib.admin.checks, django-positions.position.Fields", "core_issue": "Django's ModelAdmin list_display validation raises incorrect admin.E108 errors for fields like PositionField that are only accessible via instance, due to flawed logic introduced in the fix for ticket 28490 which prematurely fails validation without properly checking model._meta.get_field(item).", "technical_keywords": "ModelAdmin, list_display, admin.E108, PositionField, _check_list_display_item, model._meta.get_field, hasattr, getattr, FieldDoesNotExist, ManyToManyField, checks.Error", "error_symptoms": "Startup fails with admin.E108 error stating a list_display item is not callable or an attribute, despite being valid under prior Django versions.", "domain_area": "web application framework", "instance_id": "django__django-12143"}, {"problem_type": "behavior change", "affected_modules": "django.db.models.Model", "core_issue": "Overriding the get_FIELD_display method in model subclasses is ignored in Django 2.2 and later", "technical_keywords": "get_FIELD_display, get_foo_bar_display, models.Model, CharField, choices, __str__", "error_symptoms": "Custom get_FIELD_display returns default choice display instead of overridden value", "domain_area": "web_framework", "instance_id": "django__django-12155"}, {"problem_type": "feature request", "affected_modules": "django.forms.widgets, FileInput, ClearableFileInput", "core_issue": "The required attribute is incorrectly displayed on FileInput fields when initial data already exists", "technical_keywords": "FileInput, ClearableFileInput, use_required_attribute, django.forms.widgets", "error_symptoms": "HTML input element has a required attribute even when a file is already set", "domain_area": "web_framework", "instance_id": "django__django-12193"}, {"problem_type": "bug", "affected_modules": "Query, ORM, PickledField", "core_issue": "Query.resolve_lookup_value coerces input lists to tuples, causing mismatches for fields dependent on input type", "technical_keywords": "Query.resolve_lookup_value, PickledField, iterable, tuple, list, #30687", "error_symptoms": "Exact value queries break when input type is list due to coercion to tuple", "domain_area": "database_query", "instance_id": "django__django-12209"}, {"problem_type": "bug", "affected_modules": "django.db.models, django.test, models.Model, AutoField", "core_issue": "Resetting the primary key to None in a child model does not result in creation of a new object; instead, it overwrites the existing object upon save", "technical_keywords": "models.Model, AutoField, primary_key, reset, save, pk, Derived, Item, TestCase", "error_symptoms": "Setting primary key to None fails to detach object; saving overwrites the previous record instead of creating a new one", "domain_area": "web_application_framework", "instance_id": "django__django-12262"}, {"problem_type": "feature limitation", "affected_modules": "Django templates, Choices classes, enumeration types", "core_issue": "Enumeration types are not usable in Django templates because the classes are callable and require arguments, causing template rendering to fail", "technical_keywords": "enumeration types, Choices classes, YearInSchool, do_not_call_in_templates, template rendering, callable", "error_symptoms": "Template call fails due to missing required value argument when callable class is invoked", "domain_area": "web development", "instance_id": "django__django-12273"}, {"problem_type": "feature request", "affected_modules": "Avg, Sum, Min, Max", "core_issue": "Aggregates Avg and Sum do not support DISTINCT parameter and throw an exception since version 2.2", "technical_keywords": "Avg, Sum, Min, Max, DISTINCT, aggregate, exception, #28658", "error_symptoms": "Exception thrown when using DISTINCT with Avg or Sum aggregate", "domain_area": "database_orm", "instance_id": "django__django-12276"}, {"problem_type": "bug", "affected_modules": "django.db.models, django.db.migrations, enumfields.fields", "core_issue": "makemigrations generates migration files that incorrectly reference inner classes as top-level classes instead of showing their full nested paths", "technical_keywords": "makemigrations, django.db.models.Field, models.CharField, EnumField, django.db.models.Model, Inner, Outer, State, migrations.CreateModel", "error_symptoms": "Migration files refer to inner classes incorrectly, e.g. test1.models.Inner instead of test1.models.Outer.Inner", "domain_area": "ORM, migrations", "instance_id": "django__django-12304"}, {"problem_type": "display issue", "affected_modules": "django.contrib.admin, django.contrib.admin.utils.display_for_field, django.db.models.JSONField", "core_issue": "Readonly JSONField values are rendered as Python dicts instead of valid JSON in the Django admin interface", "technical_keywords": "JSONField, admin, readonly, display_for_field, prepare_value, json.dumps, InvalidJSONInput", "error_symptoms": "JSONField displays {'foo': 'bar'} instead of {\"foo\": \"bar\"} in admin when readonly", "domain_area": "web_framework", "instance_id": "django__django-12308"}, {"problem_type": "bug", "affected_modules": "django.db.models, django.core.exceptions", "core_issue": "Multiple OneToOneField references in abstract inheritance cause Django to misidentify parent link fields, leading to ImproperlyConfigured errors when field order is changed", "technical_keywords": "OneToOneField, parent_link, related_name, ImproperlyConfigured, Document, Picking, models.Model, django.db.models", "error_symptoms": "django.core.exceptions.ImproperlyConfigured: Add parent_link=True to appname.Picking.origin", "domain_area": "web_framework, ORM", "instance_id": "django__django-12325"}, {"problem_type": "feature request", "affected_modules": "formfield_for_manytomany, formfield_for_foreignkey", "core_issue": "The widget parameter cannot be overridden in formfield_for_manytomany, unlike in formfield_for_foreignkey", "technical_keywords": "formfield_for_manytomany, formfield_for_foreignkey, widget, param, override", "error_symptoms": "Unable to customize widget for many-to-many fields in formfield_for_manytomany", "domain_area": "web_framework", "instance_id": "django__django-12406"}, {"problem_type": "refactoring", "affected_modules": "DatabaseOperations, connection.ops", "core_issue": "The execute_sql_flush method signature includes a redundant using argument which can be inferred from self.connection.alias, simplifying the method interface", "technical_keywords": "DatabaseOperations.execute_sql_flush, self.connection.alias, sql_list, connection.ops.execute_sql_flush", "error_symptoms": "Redundant argument in method signature, unnecessary parameter passing", "domain_area": "database", "instance_id": "django__django-12419"}, {"problem_type": "bug", "affected_modules": "ModelForm, RadioSelect, ForeignKey", "core_issue": "RadioSelect widget for foreign key fields incorrectly includes and selects a blank option even when blank=False on the model", "technical_keywords": "ModelForm, RadioSelect, ForeignKey, blank=False, null=True, widget rendering, data_file", "error_symptoms": "Rendered form displays a checked radio button for the blank '-------' option, suggesting a valid choice where none should exist", "domain_area": "web_frameworks", "instance_id": "django__django-12663"}, {"problem_type": "feature request", "affected_modules": "django.db.models.QuerySet, django.db.models.UniqueConstraint, django.db.models.CharField", "core_issue": "QuerySet.in_bulk() does not recognize fields as unique unless they have unique=True, ignoring fields with UniqueConstraint.", "technical_keywords": "QuerySet.in_bulk, UniqueConstraint, unique=True, models.CharField, Article", "error_symptoms": "ValueError: in_bulk()'s field_name must be a unique field but 'slug' isn't.", "domain_area": "web_framework", "instance_id": "django__django-12708"}, {"problem_type": "migration error", "affected_modules": "django.db.backends.base.schema, models, migrations", "core_issue": "Migration fails when deleting index_together if unique_together exists for the same fields, causing a ValueError due to detection of multiple constraints", "technical_keywords": "index_together, unique_together, Options.indexes, _delete_composed_index, ValueError, constraints", "error_symptoms": "ValueError: Found wrong number (2) of constraints", "domain_area": "database schema management", "instance_id": "django__django-12713"}, {"problem_type": "bug", "affected_modules": "DecimalField, to_python", "core_issue": "DecimalField.to_python() raises TypeError instead of ValidationError when a dictionary is passed as value", "technical_keywords": "DecimalField, to_python, ValidationError, TypeError, model object", "error_symptoms": "TypeError is raised when dictionary is assigned to DecimalField, making debugging difficult", "domain_area": "data_validation", "instance_id": "django__django-12741"}, {"problem_type": "migration error", "affected_modules": "django.db.models, django.core.exceptions", "core_issue": "Migrations fail with FieldError when moving a field from a base model to a subclass due to operation order causing field clashes", "technical_keywords": "FieldError, makemigrations, migrate, models.Model, CharField, CreateModel, RemoveField, auto-detector", "error_symptoms": "django.core.exceptions.FieldError: Local field 'title' in class 'Book' clashes with field of the same name from base class 'Readable'", "domain_area": "database schema management", "instance_id": "django__django-12754"}, {"problem_type": "bug", "affected_modules": "django.db.models.ExpressionWrapper, django.db.models.functions, Query", "core_issue": "ExpressionWrapper wraps constant expressions as output fields, causing Django to incorrectly include constants in the GROUP BY clause, resulting in invalid SQL for Postgres.", "technical_keywords": "ExpressionWrapper, Value, IntegerField, annotate, Query, GROUP BY, Sum, Model, expr_res, django.db.utils.ProgrammingError", "error_symptoms": "django.db.utils.ProgrammingError: aggregate functions are not allowed in GROUP BY", "domain_area": "database_query_ORM", "instance_id": "django__django-12774"}, {"problem_type": "performance regression, SQL compatibility issue", "affected_modules": "Django ORM, django-mysql, Model.objects.all().delete", "core_issue": "Django 3.1 changed deletion SQL to use a subquery which causes lock test failures and severe deletion performance degradation with MySQL/MariaDB", "technical_keywords": "Model.objects.all().delete, DELETE FROM WHERE id IN subquery, Django 3.1, LOCK TABLES, MariaDB, MySQL, InnoDB, sequence storage engine", "error_symptoms": "Lock tests fail due to inability to lock tables with the new subquery SQL, deletion of large tables is much slower with WHERE IN subquery", "domain_area": "database management", "instance_id": "django__django-12858"}, {"problem_type": "regression bug", "affected_modules": "django.db.models.query, django.db.models.sql.query, django.db.models.lookups, django.db.models.fields, django.utils.functional", "core_issue": "Using SimpleLazyObject as a filter value in an annotated queryset with nested subquery causes a TypeError due to improper value handling after recent code changes", "technical_keywords": "SimpleLazyObject, Subquery, annotate, filter, get_prep_value, ForeignKey, TypeError", "error_symptoms": "TypeError: int() argument must be a string, a bytes-like object or a number, not 'SimpleLazyObject'", "domain_area": "web_framework, ORM", "instance_id": "django__django-12965"}, {"problem_type": "compatibility issue", "affected_modules": "django.contrib.sessions, session middleware", "core_issue": "Session data cannot be decoded due to format changes introduced in Django 3.1, making DEFAULT_HASHING_ALGORITHM set to 'sha1' insufficient for backward compatibility across multiple project instances.", "technical_keywords": "DEFAULT_HASHING_ALGORITHM, sha1, encode(), session data, Django 3.1", "error_symptoms": "Session decoding fails during upgrade, leading to inaccessible or invalid session data", "domain_area": "web application framework", "instance_id": "django__django-13012"}, {"problem_type": "bug", "affected_modules": "django.db.models.DurationField, django.db.models.F, django.db.models.query.QuerySet, django.db.models.sql.compiler, django.db.backends.base.operations", "core_issue": "DurationField expressions using F object addition fail on SQLite and MySQL due to incompatible internal value conversion resulting in decimal.InvalidOperation", "technical_keywords": "DurationField, F, annotate, decimal.Decimal, convert_durationfield_value, decimal.InvalidOperation, QuerySet, expression", "error_symptoms": "decimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]", "domain_area": "web_framework", "instance_id": "django__django-13023"}, {"problem_type": "security enhancement", "affected_modules": "settings.SECURE_REFERRER_POLICY, Referrer-Policy header, Django 3.0, middleware", "core_issue": "The default SECURE_REFERRER_POLICY does not adequately protect user information; changing it to 'same-origin' reduces referer leakage to third-party sites.", "technical_keywords": "SECURE_REFERRER_POLICY, Referrer-Policy, Django 3.0, Referer header", "error_symptoms": "Possible breakage in linked websites that rely on Referer header for verification", "domain_area": "web security", "instance_id": "django__django-13028"}, {"problem_type": "compatibility bug", "affected_modules": "django.db.models.ForeignKey, makemigrations, AppConfig", "core_issue": "Django makemigrations fails to resolve ForeignKey references when app name casing in INSTALLED_APPS does not match the lowercased references in models, causing migration errors in versions 3.1 and later", "technical_keywords": "ForeignKey, INSTALLED_APPS, AppConfig.name, lazy reference, ValueError, migrate, makemigrations", "error_symptoms": "ValueError: The field DJ_RegLogin.Content.category was declared with a lazy reference to 'dj_reglogin.category', but app 'dj_reglogin' isn't installed", "domain_area": "web_framework", "instance_id": "django__django-13033"}, {"problem_type": "validation bug", "affected_modules": "django.db.models.fields.related.ForeignKey, django.forms.ModelForm", "core_issue": "ForeignKey validation always uses the default manager instead of the base manager, preventing selection of objects filtered out by the default manager, such as archived articles", "technical_keywords": "ForeignKey.validate, _default_manager, _base_manager, ModelForm, queryset, ArticleManager, forms.ModelForm", "error_symptoms": "Validation fails if a user selects an archived article; error message: 'article instance with id 123 does not exist.'", "domain_area": "web_application_framework", "instance_id": "django__django-13089"}, {"problem_type": "feature limitation", "affected_modules": "django.db.models, django.db.models.expressions, django.db.models.fields, django.db.models.functions", "core_issue": "Subtraction of DateTimeField instances in ORM annotations fails unless wrapped in ExpressionWrapper with explicit output_field specified", "technical_keywords": "DateTimeField, DurationField, F, Value, annotate, ExpressionWrapper, output_field, FieldError", "error_symptoms": "django.core.exceptions.FieldError: Expression contains mixed types: DateTimeField, DurationField. You must set output_field.", "domain_area": "web_framework, ORM", "instance_id": "django__django-13109"}, {"problem_type": "feature request", "affected_modules": "validators, ValidationError", "core_issue": "Built-in validators do not currently pass the validated value to ValidationError, preventing custom error messages from using the %(value)s placeholder", "technical_keywords": "validators, ValidationError, error message, %(value)s placeholder, Django", "error_symptoms": "Cannot customize error messages with the invalid value using %(value)s in built-in validators", "domain_area": "web_framework", "instance_id": "django__django-13112"}, {"problem_type": "bug", "affected_modules": "HttpResponseBase.delete_cookie, messages system", "core_issue": "The delete_cookie method does not preserve or set the SameSite attribute on the Set-Cookie header, leading to browser warnings and potential cookie rejection when deleting cookies.", "technical_keywords": "HttpResponseBase, delete_cookie, set_cookie, SameSite, Secure, Set-Cookie header, SESSION_COOKIE_SAMESITE", "error_symptoms": "Firefox warning about cookies being rejected due to SameSite attribute without Secure, deleted cookies missing SameSite and Secure attributes", "domain_area": "web_framework", "instance_id": "django__django-13121"}, {"problem_type": "unexpected behavior", "affected_modules": "django.forms.ModelMultipleChoiceField, django.db.models.query.QuerySet", "core_issue": "Using QuerySet.union() in ModelMultipleChoiceField causes empty form submissions to select all matching objects instead of none", "technical_keywords": "ModelMultipleChoiceField, QuerySet, union, filter, ManyToManyField, Publication, Article, forms.ModelForm", "error_symptoms": "Submitting the form with no publications selected results in all objects from the union queryset being added", "domain_area": "web_application_framework", "instance_id": "django__django-13128"}, {"problem_type": "bug", "affected_modules": "django.db.models.FileField, django.db.models.ImageField", "core_issue": "FileField with a callable storage parameter evaluates the callable during deconstruction, inlining the storage instance instead of referencing the callable", "technical_keywords": "FileField, ImageField, storage, callable, deconstruction, makemigrations, Storage, upload_to", "error_symptoms": "Callable storage is evaluated and inlined during migration generation, preventing runtime variation of storage backend", "domain_area": "web_framework", "instance_id": "django__django-13158"}, {"problem_type": "bug", "affected_modules": "ForeignKey, formfield", "core_issue": "Using a Q object with limit_choices_to on a ForeignKey field involving joins results in duplicate form options", "technical_keywords": "limit_choices_to, ForeignKey, Q object, formfield, join", "error_symptoms": "Duplicate options appear in the form field", "domain_area": "web_framework", "instance_id": "django__django-13195"}, {"problem_type": "middleware integration issue", "affected_modules": "django.middleware, django-cors-headers, django.core.handlers.asgi, uvicorn", "core_issue": "The first process_response in the middleware chain receives a coroutine instead of an HttpResponse when running Django with ASGI and uvicorn", "technical_keywords": "process_response, MiddlewareMixin, ASGIRequest, coroutine, HttpResponse, uvicorn, django-cors-headers, MIDDLEWARE, settings.py", "error_symptoms": "Middleware receives a coroutine object instead of HttpResponse, causing incompatibility or errors in packages like django-cors-headers", "domain_area": "web framework integration", "instance_id": "django__django-13212"}, {"problem_type": "bug", "affected_modules": "models.JSONField, django_mysql.models.JSONField, ORM key transforms, __in lookup", "core_issue": "The __in lookup fails to filter correctly on key transforms for JSONField across MySQL, Oracle, and SQLite, yielding inconsistent results compared to direct equality filtering.", "technical_keywords": "models.JSONField, django_mysql.models.JSONField, __in lookup, key transforms, filter, OurModel, our_field, queryset", "error_symptoms": "Filtering with __in on JSONField key transform returns zero items while direct equality returns expected results", "domain_area": "database_querying", "instance_id": "django__django-13279"}, {"problem_type": "compatibility bug", "affected_modules": "django.views.generic.base.TemplateView, django.utils.functional.SimpleLazyObject, django.db.backends.sqlite3.operations", "core_issue": "TemplateView.get_context_data receives SimpleLazyObject in kwargs which causes a crash when used directly for filtering in Django 3.1, requiring explicit string conversion", "technical_keywords": "TemplateView.get_context_data, SimpleLazyObject, get_object_or_404, kwargs.get, slug, sqlite3, Python 3.7.8", "error_symptoms": "Error binding parameter 0 - probably unsupported type", "domain_area": "web_framework", "instance_id": "django__django-13297"}, {"problem_type": "bug", "affected_modules": "django.db.models, django.db.models.query, django.db.models.sql.query", "core_issue": "QuerySet filter raises NotSupportedError when a model includes a BooleanField named 'filterable', causing filtering on related models to break", "technical_keywords": "QuerySet.filter, NotSupportedError, BooleanField, filterable, ProductMetaDataType, ProductMetaData, check_filterable, build_filter", "error_symptoms": "django.db.utils.NotSupportedError: ProductMetaDataType is disallowed in the filter clause", "domain_area": "web_framework", "instance_id": "django__django-13315"}, {"problem_type": "design flaw", "affected_modules": "django.db.models.fields, django.db.models.base, django.db.models.options", "core_issue": "Fields inherited from abstract models compare as equal across different concrete models due to comparison only using creation_counter, causing field de-duplication in sets", "technical_keywords": "Model, IntegerField, Meta.abstract, _meta.get_field, creation_counter, __eq__, __hash__, __lt__, field.model, set", "error_symptoms": "Distinct model fields are considered equal and de-duplicated in sets, resulting in incorrect set length and equality comparison", "domain_area": "web_framework", "instance_id": "django__django-13343"}, {"problem_type": "feature request, bug", "affected_modules": "django.db.models.functions.datetime, TruncDate, TruncTime, TruncBase, TimeZone", "core_issue": "TruncDate and TruncTime ignore the provided tzinfo parameter and use get_current_timezone_name() unconditionally, preventing correct date aggregation for timezones other than the global django.utils.timezone.", "technical_keywords": "TruncDate, TruncTime, tzinfo, TimeZone, get_current_timezone_name, django.utils.timezone, annotate, DateTimeField, pytz, TruncBase, Count, Cast", "error_symptoms": "Aggregations by date or time produce incorrect results for timezones other than the default django.utils.timezone, unable to aggregate and cast dates correctly in the database.", "domain_area": "database operations, ORM, datetime manipulation", "instance_id": "django__django-13344"}, {"problem_type": "bug", "affected_modules": "django/core/files/locks.py, fcntl", "core_issue": "The POSIX lock implementation always returns False when acquiring or releasing a lock due to incorrect handling of fcntl.flock's return value.", "technical_keywords": "fcntl.flock, locks.LOCKS_NB, lock, unlock, OSError, _fd", "error_symptoms": "Failure to correctly indicate success or failure when acquiring a non-blocking lock; always returning False.", "domain_area": "file_handling", "instance_id": "django__django-13346"}, {"problem_type": "bug", "affected_modules": "django.db.models.query, django.db.models.base, django.db.models.query_utils, pickle", "core_issue": "Pickled queryset.query with values()/annotate restores incorrectly, causing evaluation to return broken model instances instead of dicts and resulting in AttributeError due to missing field state", "technical_keywords": "QuerySet, values, values_list, annotate, GROUP BY, Sum, query, pickle, Toy, AttributeError, pk, attname", "error_symptoms": "AttributeError: 'NoneType' object has no attribute 'attname', model instances returned with broken internal state, cannot access .id attribute", "domain_area": "ORM, data serialization", "instance_id": "django__django-13363"}, {"problem_type": "display issue", "affected_modules": "Django admin, JSONField", "core_issue": "Django admin displays unicode characters in JSONField as escaped ASCII sequences instead of native characters", "technical_keywords": "Django admin, JSONField, json.dumps, ASCII encoding, unicode, Chinese characters", "error_symptoms": "Chinese characters in JSONField appear as ASCII escape sequences like \\u4e2d\\u56fd", "domain_area": "web development", "instance_id": "django__django-13401"}, {"problem_type": "bug", "affected_modules": "django.db.models.query.QuerySet, django.db.models.options.Options", "core_issue": "QuerySet.ordered property incorrectly returns True for GROUP BY queries using annotate, even when SQL lacks an ORDER BY clause despite Meta.ordering on the model", "technical_keywords": "QuerySet.ordered, annotate, Meta.ordering, GROUP BY, default_ordering, query, Count", "error_symptoms": "Ordered property reports True, but SQL query is unordered after annotation and GROUP BY", "domain_area": "database_ORM", "instance_id": "django__django-13406"}, {"problem_type": "bug", "affected_modules": "Django ORM, models.Model, queryset.order_by, ForeignKey", "core_issue": "Self-referencing foreign key causes Django ORM to generate unexpected SQL with extra JOINs and incorrect sort ordering when using order_by on the relation's _id field", "technical_keywords": "order_by, ForeignKey, self-referencing, models.Model, queryset, annotate, F, JOIN, Meta.ordering", "error_symptoms": "SQL query has unnecessary extra LEFT OUTER JOIN and DESC sort order due to class-level ordering instead of explicit order_by precedence; expected ASC and a single JOIN", "domain_area": "web_application_backend", "instance_id": "django__django-13410"}, {"problem_type": "bug", "affected_modules": "django.views.debug, get_traceback_frames, explicit_or_implicit_cause", "core_issue": "The debug error view ignores exc.__suppress_context__, causing suppressed context exceptions to appear in tracebacks despite PEP 415.", "technical_keywords": "exc.__suppress_context__, PEP 415, get_traceback_frames, explicit_or_implicit_cause, __cause__, __context__", "error_symptoms": "Suppressed exceptions still shown in Django debug error view tracebacks when 'raise ... from None' is used", "domain_area": "web_framework", "instance_id": "django__django-13417"}, {"problem_type": "security flaw", "affected_modules": "PasswordResetTokenGenerator, AbstractBaseUser", "core_issue": "Password reset tokens remain valid after a user's email address is changed, allowing token use with outdated credentials", "technical_keywords": "PasswordResetTokenGenerator, _make_hash_value, password reset, email address, AbstractBaseUser, get_session_auth_hash", "error_symptoms": "Password reset token is accepted for an account even after the associated email has changed", "domain_area": "authentication", "instance_id": "django__django-13449"}, {"problem_type": "bug", "affected_modules": "django.db.models.functions.Lag, django.db.models.fields.DecimalField, django.db.models.Window, django.db.backends.sqlite3", "core_issue": "Using the Lag window function on a DecimalField in SQLite causes a syntax error due to incorrect placement of the CAST operation in the generated SQL statement.", "technical_keywords": "Lag, Window, DecimalField, FloatField, output_field, CAST, OVER, OperationalError, SQL syntax error, annotate, SQLite", "error_symptoms": "OperationalError: near 'OVER': syntax error when querying with Lag on a DecimalField with SQLite backend", "domain_area": "ORM, database query generation", "instance_id": "django__django-13512"}, {"problem_type": "bug", "affected_modules": "management commands, stdout, stderr", "core_issue": "flush() on self.stdout or self.stderr does not properly flush output during long migrations, causing migration progress information to be delayed until completion", "technical_keywords": "flush(), self.stdout, self.stderr, migrate command, management commands", "error_symptoms": "Long-running migrations do not display progress output until the end; relevant information is missing from stdout/stderr until flush occurs at completion", "domain_area": "application deployment", "instance_id": "django__django-13513"}, {"problem_type": "bug", "affected_modules": "models, Django system checks", "core_issue": "Django models check raises E015 error for ordering with isnull lookup on related fields, despite such orderings working at runtime", "technical_keywords": "models.E015, ordering, ForeignKey, isnull, SystemCheckError, Stock, Supply, Product, parent", "error_symptoms": "SystemCheckError: (models.E015) 'ordering' refers to the nonexistent field, related field, or lookup 'supply__product__parent__isnull'", "domain_area": "web_frameworks", "instance_id": "django__django-13516"}, {"problem_type": "feature request", "affected_modules": "auth, models, Model._meta.constraints", "core_issue": "The auth.E003 system check requires USERNAME_FIELD to have unique=True, but should also consider UniqueConstraint in Model._meta.constraints to avoid redundant PostgreSQL indexes.", "technical_keywords": "auth.E003, USERNAME_FIELD, UniqueConstraint, AbstractBaseUser, CharField, unique=True, Model._meta.constraints", "error_symptoms": "'User.username' must be unique because it is named as the 'USERNAME_FIELD'.", "domain_area": "authentication", "instance_id": "django__django-13551"}, {"problem_type": "bug", "affected_modules": "django.core.cache.backends.db, django.core.cache.backends.db._cull", "core_issue": "The _cull method in the database cache backend fails when cursor.fetchone() returns None, causing a 'NoneType' object is not subscriptable error", "technical_keywords": "django.core.cache.backends.db, _cull, cursor.execute, cursor.fetchone, cache_key_culling_sql, database backend, set, _base_set", "error_symptoms": "'NoneType' object is not subscriptable error sporadically occurs during cache operations", "domain_area": "web_framework", "instance_id": "django__django-13568"}, {"problem_type": "bug", "affected_modules": "django.utils.dateformat", "core_issue": "The dateformat.y() function in Django does not pad years less than 1000 with leading zeros, producing inconsistent output compared to Python datetime and PHP date formatting", "technical_keywords": "dateformat.y, django.utils.dateformat, format, datetime.datetime, strftime, date, leading zeros", "error_symptoms": "Formatted year outputs as a single non-padded digit for years less than 1000 when using the 'y' format character", "domain_area": "web_framework, date_time_handling", "instance_id": "django__django-13569"}, {"problem_type": "enhancement suggestion", "affected_modules": "django.contrib.auth.forms, ReadOnlyPasswordHashField, forms.Field", "core_issue": "The ReadOnlyPasswordHashField should set the disabled property to True by default to prevent accidental password changes and remove the need for a custom clean_password method.", "technical_keywords": "ReadOnlyPasswordHashField, UserChangeForm, clean_password, forms.Field, disabled", "error_symptoms": "Potential for unintended password change if clean_password is not implemented in custom forms", "domain_area": "web_frameworks", "instance_id": "django__django-13590"}, {"problem_type": "design flaw", "affected_modules": "ManagementUtility, CommandParser", "core_issue": "ManagementUtility computes prog_name from argv but does not pass it as prog to CommandParser, causing inconsistencies when sys.argv[0] is None or incorrect", "technical_keywords": "ManagementUtility, CommandParser, prog, argv, sys.argv, prog_name, execute_from_command_line", "error_symptoms": "Exceptions occur when sys.argv[0] is None; program name in parser is incorrect in embedded environments", "domain_area": "command_line_interface", "instance_id": "django__django-13658"}, {"problem_type": "feature request", "affected_modules": "runserver command, management commands, system checks", "core_issue": "Developers want an option to skip system checks when running the development server to improve reload speed during development", "technical_keywords": "runserver, --skip-checks, system checks, management commands, CI/CD", "error_symptoms": "Long reload times during development caused by mandatory system checks", "domain_area": "web development", "instance_id": "django__django-13670"}, {"problem_type": "bug", "affected_modules": "django.db.migrations.operations.models, squashmigrations", "core_issue": "CreateModel.reduce does not remove model options that are missing in a squashed AlterModelOptions, leading to options not being unset in the resulting CreateModel operation", "technical_keywords": "CreateModel, AlterModelOptions, reduce, state_forwards, migrations, options, squashmigrations, django.db.migrations.operations.models.py", "error_symptoms": "Model options persist undesirably after squashing migrations, leading to incorrect model state", "domain_area": "database_migrations", "instance_id": "django__django-13741"}, {"problem_type": "bug", "affected_modules": "django.db.backends.sqlite3.base, manage.py loaddata", "core_issue": "Table names that are SQL keywords are not properly quoted, causing loaddata to crash on SQLite due to syntax errors in constraint checks", "technical_keywords": "loaddata, PRAGMA foreign_key_check, PRAGMA foreign_key_list, sqlite3.OperationalError, check_constraints, cursor.execute", "error_symptoms": "sqlite3.OperationalError: near \"order\": syntax error", "domain_area": "database", "instance_id": "django__django-13786"}, {"problem_type": "bug", "affected_modules": "add template filter, lazy string, __proxy__", "core_issue": "The add template filter fails to concatenate a regular string with a lazy string, resulting in a TypeError exception", "technical_keywords": "add filter, lazy string, __proxy__, TypeError", "error_symptoms": "Result is always an empty string, TypeError: can only concatenate str (not \"__proxy__\") to str", "domain_area": "template rendering", "instance_id": "django__django-13794"}, {"problem_type": "bug", "affected_modules": "django.db.models.sql.compiler, Django ORM aggregation", "core_issue": "Using order_by('?') causes the underlying SQL GROUP BY clause to improperly include the RANDOM() function, breaking aggregation results", "technical_keywords": "order_by, Count, annotate, get_group_by, Random, QuerySet, models.Model", "error_symptoms": "Aggregation with Count produces incorrect row breakdowns when ordering by '?' in queryset, GROUP BY clause includes RANDOM(), result values are duplicated", "domain_area": "web_application_backend", "instance_id": "django__django-13807"}, {"problem_type": "feature request", "affected_modules": "django.db.migrations.loader.MigrationLoader, migration loader", "core_issue": "Migration loader incorrectly rejects non-namespace packages lacking __file__, causing issues in frozen Python environments by skipping valid migrations.", "technical_keywords": "MigrationLoader, load_disk, __file__, __path__, PEP-420, _NamespacePath, isinstance", "error_symptoms": "Unable to find existing migrations in frozen Python environments where packages may not have __file__", "domain_area": "web_framework", "instance_id": "django__django-13809"}, {"problem_type": "deprecation", "affected_modules": "SQLite backend, Django database backends", "core_issue": "Plan to drop support for SQLite versions older than 3.9.0 due to newer feature requirements and longstanding EOL for older distributions", "technical_keywords": "SQLite, SQLITE_ENABLE_JSON1, expression indexes, Django, GEOS", "error_symptoms": "Incompatibility with features relying on SQLite 3.9.0+, potential errors if older SQLite is used", "domain_area": "database_management", "instance_id": "django__django-13810"}, {"problem_type": "bug", "affected_modules": "django.forms.fields.ModelChoiceField, django.forms.fields.ModelMultipleChoiceField", "core_issue": "ModelChoiceField does not expose the invalid value in the ValidationError message for invalid_choice, unlike other choice fields", "technical_keywords": "ModelChoiceField, ModelMultipleChoiceField, ChoiceField, default_error_messages, invalid_choice, ValidationError", "error_symptoms": "ValidationError message for invalid choice does not display the specific invalid value entered", "domain_area": "web_frameworks", "instance_id": "django__django-13820"}, {"problem_type": "compatibility issue", "affected_modules": "django.db.models.sql.query.Query, django.db.models.sql.query.Query.resolve_lookup_value", "core_issue": "Upgrading from 2.2 to 3.0 causes errors when named tuples are used as range filter arguments due to improper reconstruction with an iterator instead of expanded arguments.", "technical_keywords": "namedtuple, range, queryset filter, resolve_lookup_value, TypeError, __new__, iterator, tuple unpacking", "error_symptoms": "TypeError: __new__() missing 1 required positional argument: 'far'", "domain_area": "web_framework, ORM", "instance_id": "django__django-13821"}, {"problem_type": "framework incompatibility, bug", "affected_modules": "django.core.handlers.base, asgi_djangotoolbar_bug.middleware.DummyMiddleware, django-debug-toolbar", "core_issue": "MiddlewareNotUsed overwrites the handler during ASGI middleware chain processing, leading to undesired side effects when some middlewares lack async support", "technical_keywords": "ASGI, MiddlewareNotUsed, self.adapt_method_mode, handler, async_capable, HttpResponse, coroutine, DummyMiddleware, SESSION_FILE_PATH, TypeError", "error_symptoms": "TypeError: object HttpResponse can't be used in 'await' expression", "domain_area": "web framework middleware", "instance_id": "django__django-13837"}, {"problem_type": "race condition, resource leak", "affected_modules": "LiveServerTestCase, LiveServerThread, ThreadedWSGIServer, WSGIServer", "core_issue": "ThreadedWSGIServer used by LiveServerTestCase does not properly close database connections after each thread, causing OperationalError during test database destruction", "technical_keywords": "LiveServerTestCase, ThreadedWSGIServer, WSGIServer, LiveServerThread, destroy_test_db, OperationalError, threading, ThreadingMixIn", "error_symptoms": "OperationalError: database \"test_myapp\" is being accessed by other users", "domain_area": "web_testing, database_management", "instance_id": "django__django-13925"}, {"problem_type": "feature enhancement", "affected_modules": "django.utils.autoreload.get_child_arguments, Django runserver, Python __main__ module", "core_issue": "Existing autodetection only allows autoreload for python -m django runserver, limiting Django-based command-line utilities; enhancement uses __main__.__spec__ to enable autoreload for python -m pkg_other_than_django runserver", "technical_keywords": "django.utils.autoreload, get_child_arguments, __main__, __spec__, Python -m, runserver, __file__", "error_symptoms": "Autoreloading does not work when running runserver via python -m for packages other than django", "domain_area": "web_frameworks", "instance_id": "django__django-13933"}, {"problem_type": "bug", "affected_modules": "django.db.models.query_utils, django.db.models.expressions", "core_issue": "Using the & operator with Q() on the left and Exists() on the right raises a TypeError due to missing __rand__ handling, while the reverse works", "technical_keywords": "Q, Exists, Product.objects.all, __and__, _combine, TypeError, __rand__", "error_symptoms": "TypeError: <django.db.models.expressions.Exists object at ...> is raised when combining Q() & Exists(...)", "domain_area": "web_framework", "instance_id": "django__django-13964"}, {"problem_type": "feature request", "affected_modules": "OrderedSet", "core_issue": "OrderedSet does not support being reversed with the reversed() function due to missing __reversed__ method", "technical_keywords": "OrderedSet, reversed, __reversed__, Python", "error_symptoms": "TypeError when passing OrderedSet to reversed()", "domain_area": "data_structures", "instance_id": "django__django-14007"}, {"problem_type": "data integrity bug", "affected_modules": "django.db.models, ForeignKey, transaction.atomic", "core_issue": "Assigning a related object without a primary key to a parent and then setting the primary key leads to the parent's foreign key field being incorrectly persisted as an empty string for non-numeric, non-auto primary keys", "technical_keywords": "ForeignKey, CharField, primary_key, transaction.atomic, product_id, ForeignKeyViolation, save, filter", "error_symptoms": "Order's product_id is set to empty string instead of the actual product.sku, leading to ForeignKeyViolation on commit due to missing product with emptystring primary key", "domain_area": "database ORM", "instance_id": "django__django-14011"}, {"problem_type": "bug", "affected_modules": "django.db.models.Q, django.db.models.Exists, django.contrib.auth.get_user_model", "core_issue": "Deconstructing Q objects with a single non-tuple child fails due to incorrect treatment, causing a TypeError when non-subscriptable objects are passed", "technical_keywords": "Q, deconstruct, Exists, get_user_model, TypeError", "error_symptoms": "TypeError: 'Exists' object is not subscriptable", "domain_area": "web_framework", "instance_id": "django__django-14017"}, {"problem_type": "bug", "affected_modules": "django.db.models.fields, django.db.models.BigAutoField, database converters", "core_issue": "from_db_value is not called for primary key values returned on insert, causing wrappers like MyIntWrapper to be skipped and plain integers to be set instead", "technical_keywords": "from_db_value, get_prep_value, BigAutoField, MyAutoField, MyIntWrapper, bulk_create, objects.create, models.Model, primary_key", "error_symptoms": "Inserted model instances have plain integer IDs instead of wrapped objects; querying returns wrappers but creation returns integer", "domain_area": "ORM, database access", "instance_id": "django__django-14034"}, {"problem_type": "usability issue", "affected_modules": "ResolverMatch", "core_issue": "ResolverMatch.__repr__ does not display details of functools.partial views, making the output unclear and omitting underlying function and pre-set arguments", "technical_keywords": "ResolverMatch, __repr__, __init__, functools.partial, view", "error_symptoms": "Non-informative __repr__ output showing only functools.partial with no function or argument details", "domain_area": "web framework routing", "instance_id": "django__django-14053"}, {"problem_type": "compatibility regression", "affected_modules": "accounts.models, blocks.models, contact_by_form.models, core_messages.models, friendship.models, likes.models, uploads.models, django.db.models", "core_issue": "Django 3.2 alpha incorrectly raises models.W042 warnings for inherited models even when a primary key is defined in the ancestor class, treating them as if no primary key is specified and auto-creating an AutoField primary key.", "technical_keywords": "models.W042, AutoField, DEFAULT_AUTO_FIELD, AppConfig.default_auto_field, make_migrations, primary key inheritance, django.db.models.BigAutoField, Entity, User", "error_symptoms": "System check raises models.W042 warnings about auto-created primary keys for models inheriting from ancestors with manually defined primary keys.", "domain_area": "database_modeling", "instance_id": "django__django-14089"}, {"problem_type": "bug", "affected_modules": "HashedFilesMixin, ManifestStaticFilesStorage, CachedStaticFilesStorage, collectstatic.collect", "core_issue": "HashedFilesMixin's post_process() yields the same original file multiple times, causing duplicate reporting and processing in collectstatic and its subclasses", "technical_keywords": "HashedFilesMixin, post_process, ManifestStaticFilesStorage, CachedStaticFilesStorage, collectstatic, yield, WhiteNoise, Brotli, S3 backend", "error_symptoms": "Duplicate output in collectstatic stats, repeated post-processing messages, unnecessary redundant operations like compression and uploading, incorrect file counts", "domain_area": "web_framework_static_file_management", "instance_id": "django__django-14122"}, {"problem_type": "configuration bug", "affected_modules": "django.db.models.BigAutoField, django.db.models.SmallAutoField, django.db.models.base.AutoFieldMeta, django.db.models.options", "core_issue": "Django fails to recognize subclasses of BigAutoField and SmallAutoField as valid DEFAULT_AUTO_FIELD values, resulting in a ValueError during model initialization.", "technical_keywords": "DEFAULT_AUTO_FIELD, MyBigAutoField, BigAutoField, SmallAutoField, AutoField, AutoFieldMeta.__subclasscheck__, pk_class, ValueError", "error_symptoms": "ValueError: Primary key 'example.core.models.MyBigAutoField' referred by DEFAULT_AUTO_FIELD must subclass AutoField.", "domain_area": "web_framework, ORM", "instance_id": "django__django-14140"}, {"problem_type": "bug", "affected_modules": "YearLookup, ExtractIsoYear, Django ORM query lookups", "core_issue": "Using BETWEEN for the '__iso_year' filter breaks correct filtering as it bypasses ExtractIsoYear logic, causing incorrect query results", "technical_keywords": "YearLookup, __iso_year, ExtractIsoYear, filter, annotate, BETWEEN, EXTRACT, Django ORM", "error_symptoms": "Filtering with '__iso_year' returns wrong data due to improper query generated using BETWEEN instead of EXTRACT", "domain_area": "database_query_optimization", "instance_id": "django__django-14155"}, {"problem_type": "bug", "affected_modules": "django.db.models.options.Meta, django.db.models.query.QuerySet", "core_issue": "Meta.ordering fields are incorrectly included in the GROUP BY clause, causing wrong aggregation in queries", "technical_keywords": "Meta.ordering, GROUP BY, ORDER BY, aggregation, commit 0ddb4ebf, django.db.models", "error_symptoms": "Incorrect aggregation results due to unnecessary fields in GROUP BY", "domain_area": "web_frameworks", "instance_id": "django__django-14170"}, {"problem_type": "bug", "affected_modules": "django.forms, MultiValueField, MultiWidget, CharField", "core_issue": "MultiValueField does not enforce the required constraint of its required sub fields when require_all_fields is set to False, allowing form validation to pass even when required sub fields are empty", "technical_keywords": "MultiValueField, MultiWidget, CharField, Form, compress, is_valid, required, require_all_fields", "error_symptoms": "form.is_valid() returns True when required sub fields in MultiValueField are empty, leading to unexpected validation success", "domain_area": "web_framework, form_validation", "instance_id": "django__django-14238"}, {"problem_type": "bug", "affected_modules": "django.db.models.query, django.db.models.sql.query", "core_issue": "When using Q objects with OR logic on a related field with '__in', all columns from the related table are selected instead of just the primary key, causing a subquery to return multiple columns and triggering a ProgrammingError in Django 3.2.", "technical_keywords": "Q object, __or__, agent__property_groups__in, agent__property_groups__id__in, get_default_columns, distinct, values_list, Count, ProgrammingError, subquery, alias, select_fields", "error_symptoms": "django.db.utils.ProgrammingError: subquery must return only one column", "domain_area": "ORM, SQL query generation", "instance_id": "django__django-14311"}, {"problem_type": "feature enhancement", "affected_modules": "django.utils.autoreload, runserver, custom_module", "core_issue": "Autoreloader fails to correctly handle module paths specified via 'python -m' when the module is not a package with __main__.py, causing incorrect argument parsing for dotted module names.", "technical_keywords": "autoreloader, python -m, __main__.py, runserver, module paths, argument parsing", "error_symptoms": "Autoreloading does not work or misbehaves when starting a server with 'python -m custom_module runserver', particularly with dotted module names.", "domain_area": "web development", "instance_id": "django__django-14315"}, {"problem_type": "bug", "affected_modules": "catch_all_view, request", "core_issue": "catch_all_view uses request.path_info for redirects, omitting FORCE_SCRIPT_NAME and thereby cutting off the script name from the redirect URL", "technical_keywords": "catch_all_view, FORCE_SCRIPT_NAME, request.path_info, request.path, redirect", "error_symptoms": "Redirect URL does not contain the configured script name segment", "domain_area": "web_framework", "instance_id": "django__django-14349"}, {"problem_type": "bug", "affected_modules": "django.db.backends.postgresql.client, runshell", "core_issue": "PostgreSQL client passes an empty environment dictionary to subprocess instead of using os.environ, causing environment variables to be ignored", "technical_keywords": "os.environ, env, subprocess, postgresql client, runshell, empty dict, commit bbe6fbb8768e8fb1aecb96d51c049d7ceaf802d3", "error_symptoms": "Custom environment variables are not respected or available in database shell subprocess", "domain_area": "database", "instance_id": "django__django-14351"}, {"problem_type": "bug", "affected_modules": "django.utils.dateformat, DateFormat", "core_issue": "The Y specifier in DateFormat fails to zero-pad years less than 1000 to four digits", "technical_keywords": "DateFormat.Y, django.utils.dateformat, year formatting, zero-padding", "error_symptoms": "Years below 1000 are not zero-padded and return less than four digits", "domain_area": "web_framework", "instance_id": "django__django-14373"}, {"problem_type": "bug", "affected_modules": "create_unique_sql, Columns, Table", "core_issue": "Passing a Table instance instead of a string as an argument to Columns causes references_column to always be false", "technical_keywords": "create_unique_sql, references_column, Table, Columns, argument type, string", "error_symptoms": "references_column flag remains false even when it should be true", "domain_area": "database_management", "instance_id": "django__django-14376"}, {"problem_type": "deprecation", "affected_modules": "django.db.backends.mysql.base, mysqlclient", "core_issue": "The MySQL backend in Django uses deprecated 'db' and 'passwd' keyword arguments instead of the supported 'database' and 'password'.", "technical_keywords": "db, passwd, database, password, mysqlclient, MySQLdb.connect, Django, keyword arguments", "error_symptoms": "Potential warnings or errors when connecting to MySQL due to use of deprecated keyword arguments", "domain_area": "database_backend", "instance_id": "django__django-14404"}, {"problem_type": "feature request", "affected_modules": "FormSets, ErrorList", "core_issue": "FormSets do not add the nonform CSS class for non form errors, making it difficult to distinguish error types when rendering error messages", "technical_keywords": "FormSets, ErrorList, nonfield, nonform, CSS class, form errors, non form errors", "error_symptoms": "Inability to visually differentiate non form errors from other error types in rendered messages", "domain_area": "web development", "instance_id": "django__django-14434"}, {"problem_type": "bug", "affected_modules": "validators, URLValidator, validators.tests.TestValidators", "core_issue": "URLValidator tests fail on Python versions patched for bpo-43882 because URL splitting behavior now strips LF, CR, and tab characters before validation, resulting in expected ValidationError not being raised", "technical_keywords": "URLValidator, bpo-43882, ValidationError, test_validators, validators.tests.TestValidators, URL splitting", "error_symptoms": "AssertionError: ValidationError not raised", "domain_area": "input validation", "instance_id": "django__django-14493"}, {"problem_type": "bug", "affected_modules": "MigrationExecutor, migrations system", "core_issue": "When unapplying a squashed migration while replaced migration files still exist, the MigrationExecutor incorrectly marks the squashed migration as unapplied as well as the replaced migrations.", "technical_keywords": "MigrationExecutor, squashed migration, replaced migrations, migrations", "error_symptoms": "Squashed migration is marked as unapplied along with replaced migrations", "domain_area": "database management", "instance_id": "django__django-14500"}, {"problem_type": "bug", "affected_modules": "urlize", "core_issue": "The urlize function incorrectly processes HTML escaped strings and mishandles trailing punctuation, resulting in erroneous link conversions.", "technical_keywords": "urlize, html escaped, trailing punctuation, hyperlink conversion", "error_symptoms": "Links include extra or misplaced characters from HTML escapes and punctuation, producing improper hyperlink text", "domain_area": "web_text_processing", "instance_id": "django__django-14534"}, {"problem_type": "feature request", "affected_modules": "django.db.models.query, bulk_update, update", "core_issue": "bulk_update does not return the number of rows matched like update; instead, it returns None.", "technical_keywords": "bulk_update, update, return value, matched rows, QuerySet", "error_symptoms": "bulk_update returns None instead of an integer indicating number of rows matched", "domain_area": "database ORM", "instance_id": "django__django-14539"}, {"problem_type": "design improvement", "affected_modules": "BaseForm, BoundField", "core_issue": "BaseForm._clean_fields() and changed_data do not access values via BoundField, leading to inconsistencies and duplicated code paths", "technical_keywords": "BaseForm, _clean_fields, changed_data, BoundField, initial, _bound_items, _did_change, @cached_property, test_datetime_clean_initial_callable_disabled", "error_symptoms": "form._clean_fields() can return a different value from form[name].initial even when they should match", "domain_area": "web_framework", "instance_id": "django__django-14559"}, {"problem_type": "bug", "affected_modules": "django.db.migrations.writer, makemigrations", "core_issue": "Generated migration file is missing an import for models, resulting in NameError", "technical_keywords": "models.Model, makemigrations, django.db.migrations.writer, Migration, app.models.MyMixin, app.models.MyField, migrations.CreateModel", "error_symptoms": "NameError: name 'models' is not defined", "domain_area": "web_framework", "instance_id": "django__django-14580"}, {"problem_type": "bug", "affected_modules": "BoundWidget, BoundField, ChoiceWidget, CheckboxSelectMultiple", "core_issue": "BoundWidget.id_for_label ignores the id set by ChoiceWidget.options and uses a generated id instead of widget's assigned id during label rendering", "technical_keywords": "BoundWidget, id_for_label, self.data['attrs']['id'], BoundField.subwidgets, CheckboxSelectMultiple, auto_id, ChoiceWidget.options", "error_symptoms": "Label id does not match the widget's assigned id, leading to unexpected or confusing label rendering, especially when auto_id is overridden", "domain_area": "web_frameworks, form_rendering", "instance_id": "django__django-14608"}, {"problem_type": "feature request", "affected_modules": "django.contrib.admin.views.autocomplete, AutocompleteJsonView", "core_issue": "Extending AutocompleteJsonView.get() to support extra attributes in autocomplete response requires full method override, causing maintenance burden due to evolving base implementation.", "technical_keywords": "AutocompleteJsonView, get, serialize_result, JsonResponse, ModelAdmin, get_urls, PermissionDenied, object_list", "error_symptoms": "High maintenance overhead to customize autocomplete results with extra fields", "domain_area": "web_framework", "instance_id": "django__django-14631"}, {"problem_type": "feature request", "affected_modules": "django.forms.models.ModelFormSet", "core_issue": "ModelFormSet lacks native support to restrict creation of new objects, preventing a true edit-only view", "technical_keywords": "ModelFormSet, extra, Javascript, post data, formset", "error_symptoms": "Users can still add objects despite setting extra=0, leading to unintended object creation", "domain_area": "web_application_framework", "instance_id": "django__django-14672"}, {"problem_type": "bug", "affected_modules": "method_decorator, functools.partial, logger", "core_issue": "method_decorator does not preserve wrapper assignments when decorating partial objects, leading to missing function attributes like __name__", "technical_keywords": "method_decorator, functools.partial, logger, wraps, __name__, __module__, inner", "error_symptoms": "AttributeError: 'functools.partial' object has no attribute '__name__'", "domain_area": "software_frameworks", "instance_id": "django__django-14725"}, {"problem_type": "bug", "affected_modules": "django.forms.models, select widget, ModelChoiceIteratorValue", "core_issue": "ModelChoiceIteratorValue objects are not hashable after Django upgrade, causing dictionary lookups to fail for select widget option customization", "technical_keywords": "ModelChoiceIteratorValue, create_option, django.forms, data-* attributes, json.dumps, TypeError", "error_symptoms": "TypeError: unhashable type: 'ModelChoiceIteratorValue'", "domain_area": "web_framework", "instance_id": "django__django-14752"}, {"problem_type": "code enhancement", "affected_modules": "ProjectState.__init__", "core_issue": "ProjectState.__init__() can assert real_apps is a set since all callers now provide a set, making redundant type checking unnecessary", "technical_keywords": "ProjectState, __init__, real_apps, PR #14760, Django", "error_symptoms": "unknown", "domain_area": "framework internal API", "instance_id": "django__django-14765"}, {"problem_type": "behavior change, bug", "affected_modules": "django.db.models.functions.Trunc, django.db.models.functions.Extract, django.utils.timezone, django.db.backends.postgresql.base.DatabaseOperations, django.db.models.functions.TimezoneMixin", "core_issue": "Django 3.2 changes time zone conversion in Trunc and Extract functions by returning the time zone name instead of the UTC offset for 'Etc/GMT-10', resulting in a reversed time zone direction in generated Postgres queries.", "technical_keywords": "Trunc, Extract, TimezoneMixin, get_tzname, _get_timezone_name, _prepare_tzname_delta, DatabaseOperations, pytz.timezone, zoneinfo.ZoneInfo, DATE_TRUNC, AT TIME ZONE", "error_symptoms": "Generated SQL queries use the wrong time zone direction, e.g., 'Etc/GMT+10' instead of '-10', causing date truncation to shift time in the opposite direction than expected.", "domain_area": "database, time zone management", "instance_id": "django__django-14771"}, {"problem_type": "bug", "affected_modules": "django.contrib.staticfiles.storage, django.contrib.staticfiles.management.commands.collectstatic", "core_issue": "Setting max_post_process_passes to 0 in a subclass of ManifestStaticFilesStorage leads to UnboundLocalError due to the 'substitutions' variable not being initialized before use", "technical_keywords": "ManifestStaticFilesStorage, max_post_process_passes, collectstatic, post_process, substitutions, UnboundLocalError", "error_symptoms": "UnboundLocalError: local variable 'substitutions' referenced before assignment", "domain_area": "web_frameworks", "instance_id": "django__django-14787"}, {"problem_type": "unexpected behavior", "affected_modules": "RenameModel operation, db_table attribute, Postgres backend, sqlite backend", "core_issue": "RenameModel with db_table set should not perform any action but currently modifies schema by dropping and recreating constraints or tables depending on backend", "technical_keywords": "RenameModel, db_table, foreign key constraints, Postgres, sqlite, table renaming", "error_symptoms": "Foreign key constraints dropped and recreated in Postgres, entire table recreated in sqlite", "domain_area": "database schema migrations", "instance_id": "django__django-14792"}, {"problem_type": "bug", "affected_modules": "django.contrib.admin.helpers, django.contrib.admin.options, custom Admin Site", "core_issue": "get_admin_url generates incorrect URLs for readonly ForeignKey fields in custom Admin Site by not passing current_app parameter to reverse", "technical_keywords": "get_admin_url, reverse, current_app, readonly_fields, ForeignKey, ModelAdmin, response_add, admin_site.name, quote, remote_obj.pk", "error_symptoms": "URL for ForeignKey link points to /admin/... instead of /custom-admin/...", "domain_area": "web_framework", "instance_id": "django__django-14855"}, {"problem_type": "feature request", "affected_modules": "json_script", "core_issue": "The element_id argument of json_script is currently required, but some use-cases do not need an id, making it desirable to make element_id optional", "technical_keywords": "json_script, element_id, <script>, <template>, argument", "error_symptoms": "Cannot use json_script without specifying element_id", "domain_area": "web development", "instance_id": "django__django-14915"}, {"problem_type": "bug", "affected_modules": "django.db.models.fields.reverse_related.ManyToManyRel, django.db.models.fields.reverse_related.ForeignObjectRel", "core_issue": "Missing make_hashable call for through_fields in ManyToManyRel results in unhashable list when checking proxy models", "technical_keywords": "ManyToManyRel, through_fields, make_hashable, ForeignObjectRel, identity property, hash, proxy model, limit_choices_to, __hash__, TypeError", "error_symptoms": "TypeError: unhashable type: 'list' during model checks involving proxy models", "domain_area": "ORM, Django model management", "instance_id": "django__django-14999"}, {"problem_type": "bug", "affected_modules": "django.conf.urls.i18n.i18n_patterns, django.middleware.locale.LocaleMiddleware", "core_issue": "i18n_patterns does not support language locales containing both script and region subtags, such as en-Latn-US, resulting in url patterns not being resolved for those locales", "technical_keywords": "i18n_patterns, LocaleMiddleware, LANGUAGE_CODE, LANGUAGES, RFC 5646, Accept-Language, Content-Language, langtag, script, region", "error_symptoms": "404 not found response for URLs with locales containing both script and region subtags, e.g. /en-latn-us/, /en-Latn-US/", "domain_area": "internationalization and localization", "instance_id": "django__django-15022"}, {"problem_type": "enhancement", "affected_modules": "django.db.models, django.db.models.expressions", "core_issue": "Simplify deconstruction of expression objects to use shorter import paths in migrations", "technical_keywords": "deconstruct, django.db.models.F, django.db.models.expressions.F, migration, PR #14047", "error_symptoms": "None, code improvement for migration readability", "domain_area": "web_framework", "instance_id": "django__django-15037"}, {"problem_type": "bug", "affected_modules": "django.contrib.messages, django.contrib.messages.storage.base.Message, @override_settings", "core_issue": "LEVEL_TAGS settings overridden with @override_settings are not reflected in message tag lookups during tests", "technical_keywords": "LEVEL_TAGS, @override_settings, django.contrib.messages, storage.base.Message, level_tag", "error_symptoms": "Message.level_tag returns an empty string and does not recognize new message tags", "domain_area": "web_framework", "instance_id": "django__django-15098"}, {"problem_type": "incorrect behavior", "affected_modules": "django.db.migrations.recorder, django.db.migrations.executor, django.db.backends.creation, django.test.runner", "core_issue": "MigrationRecorder creates migration tables on non-default database connections, disregarding db_router allow_migrate rules", "technical_keywords": "MigrationRecorder, allow_migrate, db_router, ensure_schema, record_applied, applied_migrations, record_unapplied, create_test_db", "error_symptoms": "Migration table created on connections where migrations should not run according to router rules", "domain_area": "database management", "instance_id": "django__django-15103"}, {"problem_type": "bug", "affected_modules": "inspectdb", "core_issue": "inspectdb generates a ForeignKey to the referenced table's primary key instead of the specified unique field in the foreign key constraint", "technical_keywords": "inspectdb, ForeignKey, CREATE TABLE, UNIQUE, constraint", "error_symptoms": "Generated model ForeignKey points to the wrong field; refers to primary key instead of the specified unique field", "domain_area": "ORM, database_schema_introspection", "instance_id": "django__django-15104"}, {"problem_type": "bug", "affected_modules": "django.db.migrations.autodetector, django.db.models.fields.related, django.db.migrations.state, django.core.management.commands.test", "core_issue": "MigrationAutodetector fails with a KeyError when processing a custom ForeignKey field that hardcodes its to argument and removes it from its deconstructed kwargs.", "technical_keywords": "ForeignKey, MigrationAutodetector, deconstruct, ProjectState, ModelState, KeyError, only_relation_agnostic_fields", "error_symptoms": "KeyError: 'to' during migration autodetection when running tests", "domain_area": "database_migrations", "instance_id": "django__django-15127"}, {"problem_type": "optimization", "affected_modules": "migrations, migrations.AlterUniqueTogether, migrations.AlterIndexTogether", "core_issue": "Multiple constraint operations are performed when they can be combined into a single operation for efficiency.", "technical_keywords": "AlterFooTogether, AlterUniqueTogether, AlterIndexTogether, migrations, unique_together, index_together", "error_symptoms": "Inefficient migrations containing redundant operations that can be reduced to one per constraint.", "domain_area": "database_management", "instance_id": "django__django-15128"}, {"problem_type": "bug", "affected_modules": "django.db.models.sql.query, QuerySet.or, Query.change_aliases, Query.combine, Query.join, Query.table_alias", "core_issue": "Performing an OR operation between certain QuerySets triggers an AssertionError in Query.change_aliases due to intersecting keys and values in the change_map, arising from conflicting table alias renaming logic", "technical_keywords": "QuerySet, __or__, Query.change_aliases, Query.combine, Query.join, Query.table_alias, assertion, change_map, table_alias, alias_map", "error_symptoms": "AssertionError in Query.change_aliases when combining QuerySets using OR in non-commutative order", "domain_area": "web_application_framework", "instance_id": "django__django-15161"}, {"problem_type": "performance issue", "affected_modules": "django.db.models.query, django.contrib.admin.options", "core_issue": "Excessive SQL JOINs are generated in admin changelist search queries when multiple words are used, causing admin interface to stall", "technical_keywords": "ModelAdmin, search_fields, QuerySet.filter, ForeignKey, SQL JOIN, Client, ClientOffice", "error_symptoms": "admin interface stalls or becomes very slow when performing multi-word searches", "domain_area": "web_framework", "instance_id": "django__django-15252"}, {"problem_type": "compatibility bug", "affected_modules": "django.db.backends.sqlite3, migrations.AddField, models.OneToOneField", "core_issue": "Adding a nullable OneToOneField via migrations crashes on SQLite due to a sqlite3 restriction that prohibits adding a UNIQUE column with ALTER TABLE", "technical_keywords": "sqlite3, OperationalError, ALTER TABLE, UNIQUE column, migrations.AddField, models.OneToOneField, django.db.backends.sqlite3.base.SQLiteCursorWrapper", "error_symptoms": "django.db.utils.OperationalError: Cannot add a UNIQUE column", "domain_area": "database_orm", "instance_id": "django__django-15268"}, {"problem_type": "bug", "affected_modules": "django.db.models, django.db.models.Field, django.db.models.CharField", "core_issue": "Field.__hash__ becomes mutable when field is assigned to a model class, causing dict membership errors", "technical_keywords": "Field.__hash__, CharField, models.Model, AssertionError, #31750, dict, hash immutability", "error_symptoms": "AssertionError raised when checking field presence in dict after assignment to model", "domain_area": "web_framework, object_modeling", "instance_id": "django__django-15277"}, {"problem_type": "bug", "affected_modules": "django.db.models.query, django.db.models.expressions", "core_issue": "bulk_update incorrectly inserts F expression string representations instead of resolving to column values due to improper type checking", "technical_keywords": "bulk_update, F, SelfRef, Expression, resolve_expression, refresh_from_db", "error_symptoms": "Database field contains literal string 'F(name)' rather than actual column value after bulk_update", "domain_area": "database_orm", "instance_id": "django__django-15278"}, {"problem_type": "configuration issue", "affected_modules": "ModelAdmin, django.contrib.admin.options", "core_issue": "Custom empty_label set in formfield_for_foreignkey is ignored when radio_fields is defined, default value is always used", "technical_keywords": "ModelAdmin, radio_fields, formfield_for_foreignkey, empty_label, db_field, kwargs, django.contrib.admin.options", "error_symptoms": "Custom empty_label value does not appear in admin interface, default_empty_label used instead", "domain_area": "web_frameworks", "instance_id": "django__django-15280"}, {"problem_type": "bug", "affected_modules": "django.db.models.JSONField, django.db.backends.sqlite3, django.db.backends.mysql, django.db.backends.oracle", "core_issue": "JSONField lookups has_key, has_keys, and has_any_keys fail to match numeric keys on SQLite, MySQL, and Oracle databases", "technical_keywords": "JSONField, has_key, has_keys, has_any_keys, filter, Django ORM, SQLite, MySQL, Oracle, Postgresql", "error_symptoms": "Lookup with numeric key returns 0 results instead of expected matches, causing assertion failure in tests", "domain_area": "database integration", "instance_id": "django__django-15315"}, {"problem_type": "bug", "affected_modules": "django.db.models, django.db.models.functions, django.db.backends.sqlite3.base", "core_issue": "Using aggregate() with a default argument after annotate() causes a SQL syntax error due to malformed query generation in Django 4.0.1", "technical_keywords": "aggregate, annotate, Sum, default argument, Coalesce, F, Book, OperationalError, execute, SQL", "error_symptoms": "OperationalError: near \"FROM\": syntax error", "domain_area": "ORM, database query construction", "instance_id": "django__django-15368"}, {"problem_type": "bug", "affected_modules": "django.db.models.FilteredRelation, django.db.models.query", "core_issue": "When applying multiple FilteredRelation with different filters to the same relation, only one SQL JOIN is generated and the others are ignored", "technical_keywords": "FilteredRelation, Q, Case, When, alias, annotate, F, SQL JOIN, myrelation__nested", "error_symptoms": "Only one join appears in generated SQL query regardless of multiple FilteredRelation aliases", "domain_area": "ORM, database_querying", "instance_id": "django__django-15375"}, {"problem_type": "optimization", "affected_modules": "migration operations, CreateModel, AlterModelManagers, AlterModelOptions", "core_issue": "Migrations combining CreateModel with AlterModelManagers can be simplified to a single CreateModel operation", "technical_keywords": "CreateModel, AlterModelManagers, AlterModelOptions, migration optimization", "error_symptoms": "Redundant migration steps, unnecessarily complex migration plans", "domain_area": "database schema management", "instance_id": "django__django-15380"}, {"problem_type": "unexpected behavior", "affected_modules": "Django migrations, SQLite backend", "core_issue": "AlterField operation incorrectly generates SQL schema changes when modifying choices on SQLite, which should be a no-op", "technical_keywords": "AlterField, choices, SQLite, schema migration, Django", "error_symptoms": "Unnecessary SQL operations: new table creation, insert, drop, rename during choices modification", "domain_area": "database management", "instance_id": "django__django-15382"}, {"problem_type": "bug", "affected_modules": "django.db.models.query, django.db.models.Exists", "core_issue": "Using an Exists subquery built from an empty queryset in a filter causes the WHERE block to be removed from the query entirely, resulting in an EmptyResultSet", "technical_keywords": "Exists, filter, MyModel.objects.none, QuerySet, EmptyResultSet, WHERE block", "error_symptoms": "Filtered QuerySet is empty, generated SQL has no WHERE block, EmptyResultSet displayed instead of expected filtering", "domain_area": "web_framework", "instance_id": "django__django-15467"}, {"problem_type": "bug", "affected_modules": "django.db.models.query_utils, schema.tests.SchemaTests", "core_issue": "The _unregister_lookup method of RegisterLookupMixin does not clear the lookup cache, unlike register_lookup which does", "technical_keywords": "RegisterLookupMixin, _unregister_lookup, register_lookup, lookup cache, SchemaTests.test_func_unique_constraint_lookups", "error_symptoms": "Cache remains uncleared after unregistering lookup, leading to outdated cached data", "domain_area": "ORM, Django", "instance_id": "django__django-15499"}, {"problem_type": "migration bug", "affected_modules": "Django ORM, migrations, models", "core_issue": "Django cannot drop a unique_together constraint when the field already has a unique=True or primary key constraint", "technical_keywords": "unique_together, unique=True, primary key, migrations, PostgreSQL, model, constraint", "error_symptoms": "Migration fails to drop unique_together constraint due to existing unique constraint on the same field", "domain_area": "database_schema_management", "instance_id": "django__django-15503"}, {"problem_type": "performance optimization", "affected_modules": "django.db.models.Value, django.db.models.fields.CharField, django.core.validators.MaxLengthValidator", "core_issue": "CharField.__init__ always adds MaxLengthValidator regardless of max_length value, causing unnecessary validator instantiation and potential runtime errors when max_length is None", "technical_keywords": "Value._resolve_output_field, CharField.__init__, MaxLengthValidator, validators, deconstructible, BinaryField.__init__, clean, compare, TypeError", "error_symptoms": "TypeError: '>' not supported between instances of 'int' and 'NoneType', unnecessary MaxLengthValidator present in CharField validators list", "domain_area": "ORM, web_framework", "instance_id": "django__django-15525"}, {"problem_type": "regression bug", "affected_modules": "django.template.autoreload, TEMPLATES DIRS setting", "core_issue": "Autoreload breaks due to empty string in TEMPLATES DIRS being normalized to project root, causing template_changed() to always return True", "technical_keywords": "pathlib.Path, template_changed, autoreload, TEMPLATES DIRS, DIRS setting, Django 3.2.4, django/template/autoreload.py", "error_symptoms": "Autoreload stops working and does not trigger on app code changes", "domain_area": "web_framework", "instance_id": "django__django-15554"}, {"problem_type": "bug", "affected_modules": "django.db.migrations.autodetector, django.core.management.commands.makemigrations", "core_issue": "Migration autodetector crashes with KeyError when renaming both a model and its field in the same migration step", "technical_keywords": "autodetector.changes, generate_renamed_fields, makemigrations, KeyError, model rename, field rename", "error_symptoms": "KeyError: ('test_one', 'mymodel') during makemigrations", "domain_area": "database_migrations", "instance_id": "django__django-15561"}, {"problem_type": "bug", "affected_modules": "django.db.models, django.db.models.query, queryset, multiple inheritance", "core_issue": "QuerySet update modifies parent model instances instead of the child model when using multiple inheritance in Django models", "technical_keywords": "QuerySet.update, models.Model, multiple inheritance, Child, Base, OtherBase, field_otherbase, primary_key, objects.create, objects.update, objects.filter, values", "error_symptoms": "Updating fields from the child model has no effect; parent model instances' fields are incorrectly updated instead", "domain_area": "ORM, database layer", "instance_id": "django__django-15563"}, {"problem_type": "bug", "affected_modules": "django.core.serializers, django.core.serializers.json, django.core.serializers.python, django.db.models.fields.related_descriptors, django.db.models.fields.mixins, django.db.models.query, testbug.models", "core_issue": "Loading data via loaddata with natural keys referencing foreign keys fails on non-default databases because related objects do not exist, causing a DoesNotExist exception", "technical_keywords": "loaddata, natural_key, ForeignKey, get_by_natural_key, Deserializer, base.build_instance, DoesNotExist, unique_together, use_natural_foreign_keys, Author, Book", "error_symptoms": "testbug.models.DoesNotExist: Author matching query does not exist.", "domain_area": "database management", "instance_id": "django__django-15569"}, {"problem_type": "bug", "affected_modules": "RenameIndex, database_backwards, database_forwards, schema_editor", "core_issue": "RenameIndex does not correctly restore auto-generated names for unnamed indexes moved backward and forward, causing a crash when the index name already exists upon re-applying", "technical_keywords": "RenameIndex, unique_together, OperationTests, database_backwards, database_forwards, schema_editor, assertIndexNameExists, deconstruct, ProgrammingError", "error_symptoms": "django.db.utils.ProgrammingError: relation \"new_pony_test_idx\" already exists", "domain_area": "database_migrations", "instance_id": "django__django-15572"}, {"problem_type": "bug", "affected_modules": "django.db.models.manager, inspect, functools", "core_issue": "inspect.signature returns incorrect signatures for manager/queryset methods because manual decorator does not copy full metadata; functools.wraps should be used", "technical_keywords": "inspect.signature, django.db.models.manager, bulk_create, functools.wraps, metadata, docstring, __name__", "error_symptoms": "Methods display as (*args, **kwargs) instead of correct argument signatures in documentation and REPLs like ipython/jupyter", "domain_area": "web_frameworks", "instance_id": "django__django-15629"}, {"problem_type": "regression bug", "affected_modules": "django.utils.formats.get_format, date template filter", "core_issue": "get_format does not handle lazy translation objects, causing TypeError when template filters use translated format strings", "technical_keywords": "django.utils.formats.get_format, lazy string, TypeError, getattr, translation, date filter", "error_symptoms": "TypeError: getattr(): attribute name must be string", "domain_area": "web development", "instance_id": "django__django-15695"}, {"problem_type": "bug", "affected_modules": "django.db.models.query, django.db.models.sql.query", "core_issue": "QuerySet.only() used after select_related() crashes on proxy models due to incorrect meta handling, causing a ValueError for missing primary key attribute", "technical_keywords": "QuerySet.only, select_related, proxy models, ForeignKey, _meta, concrete_model, ValueError, RelatedPopulator", "error_symptoms": "ValueError: 'id' is not in list", "domain_area": "web_framework", "instance_id": "django__django-15731"}, {"problem_type": "bug", "affected_modules": "loaddata, FIXTURE_DIRS", "core_issue": "Duplicate fixture directories are not detected when FIXTURE_DIRS contains Path instances", "technical_keywords": "FIXTURE_DIRS, Path, loaddata, duplicate check", "error_symptoms": "Fixture directory duplication goes undetected", "domain_area": "data_management", "instance_id": "django__django-15732"}, {"problem_type": "bug", "affected_modules": "django.db.models.Case, django.db.models.Q", "core_issue": "Using the negated Q object with an empty pk__in list in a Case When clause generates invalid SQL syntax due to a missing condition.", "technical_keywords": "Case, When, Q, pk__in, Value, BooleanField, annotate, order_by, ProgrammingError, SQL syntax", "error_symptoms": "ProgrammingError: syntax error at or near \"THEN\"; generated SQL lacks a condition before THEN", "domain_area": "ORM, database query construction", "instance_id": "django__django-15741"}, {"problem_type": "bug", "affected_modules": "django.views, django.http, django.core.handlers.exception, django.core.handlers.base, asgiref.sync", "core_issue": "Async View subclass with only a post method causes a crash when a GET request produces a synchronous HttpResponseNotAllowed that is incorrectly awaited, resulting in a TypeError.", "technical_keywords": "View, async def post, HttpResponse, HttpResponseNotAllowed, Demo.as_view, asgiref.sync, TypeError, await expression", "error_symptoms": "Server crash with 500 error, TypeError: object HttpResponseNotAllowed can't be used in 'await' expression", "domain_area": "web_framework", "instance_id": "django__django-15814"}, {"problem_type": "bug", "affected_modules": "django.db.models.expressions, django.db.models.fields", "core_issue": "The MOD operator does not resolve the output_field to Decimal when combining expressions of Decimal and Integer types, unlike other mathematical operators in Django.", "technical_keywords": "Django expression, MOD operator, output_field, DecimalField, IntegerField, resolve_expression", "error_symptoms": "Resulting field type is incorrect when using MOD with mixed Decimal and Integer input types", "domain_area": "web_development", "instance_id": "django__django-15851"}, {"problem_type": "bug", "affected_modules": "django.db.models.ManyToManyField, django.db.migrations, core/fonte/models.py, core/fonte_variavel/models.py, core/variavel/models.py", "core_issue": "Defining the intermediary 'through' model for a ManyToManyField in a different app results in Django treating the model reference as a string instead of a class, triggering AttributeError during migration.", "technical_keywords": "ManyToManyField, through, ForeignKey, Migration, Model, _meta, AttributeError, create_model, remote_field", "error_symptoms": "AttributeError: 'str' object has no attribute '_meta' during migration", "domain_area": "web_frameworks", "instance_id": "django__django-15863"}, {"problem_type": "limitation", "affected_modules": "django.db.models.query, django.db.models.Prefetch", "core_issue": "Prefetch objects cannot be used with sliced querysets because Django raises an AssertionError when filtering after slicing", "technical_keywords": "Prefetch, prefetch_related, queryset, slice, AssertionError, Category.objects, Post.objects, to_attr", "error_symptoms": "AssertionError: Cannot filter a query once a slice has been taken.", "domain_area": "web_framework", "instance_id": "django__django-15916"}, {"problem_type": "bug", "affected_modules": "Django ORM, migrations, MySQL backend, ShortUUIDField, ForeignKey, OneToOneField", "core_issue": "db_collation setting on primary keys is not propagated to related foreign key fields, causing mismatched collations and foreign key constraint errors in MySQL during migrations", "technical_keywords": "db_collation, ShortUUIDField, primary_key, ForeignKey, OneToOneField, makemigrations, sqlmigrate, COLLATE, MySQL", "error_symptoms": "Foreign key constraint errors when executing ADD CONSTRAINT queries due to collation mismatch between primary key and foreign key columns", "domain_area": "database_schema_management", "instance_id": "django__django-15930"}, {"problem_type": "feature request", "affected_modules": "django.apps, django.core.management, django.utils.autoreload, StatReloader", "core_issue": "The Django auto-reloader does not pass Python -X options to child processes when using the CPython implementation, resulting in inconsistent sys._xoptions and file encodings during reloads.", "technical_keywords": "django, manage.py, runserver, -X utf8, sys._xoptions, StatReloader, winpty, AppConfig, open, encoding", "error_symptoms": "File encoding changes or inconsistencies, sys._xoptions missing expected values, unexpected encoding output in reloaded processes", "domain_area": "web_development", "instance_id": "django__django-15957"}, {"problem_type": "usability inconsistency", "affected_modules": "django.core.management.commands.makemigrations, django.core.management.commands.migrate, django.core.management.commands.optimizemigration", "core_issue": "makemigrations --check requires an additional --dry-run flag to avoid creating migrations, which is inconsistent with other --check commands that just exit cleanly", "technical_keywords": "makemigrations, --check, --dry-run, migrate, optimizemigration, management commands", "error_symptoms": "makemigrations --check creates migration files unless combined with --dry-run, leading to unexpected file changes", "domain_area": "web_framework", "instance_id": "django__django-15973"}, {"problem_type": "incorrect argument handling", "affected_modules": "manage.py dbshell, PostgreSQL psql", "core_issue": "Additional dbshell parameters are passed before the database name, causing psql to ignore extra command-line arguments", "technical_keywords": "dbshell, manage.py, psql, command-line arguments, database name, -c", "error_symptoms": "psql: warning: extra command-line argument ignored, command-line options not executed as intended", "domain_area": "database management", "instance_id": "django__django-15987"}, {"problem_type": "bug", "affected_modules": "UserAdmin, UserChangeForm", "core_issue": "Accessing UserAdmin using to_field via another model causes incorrect password reset link, resulting in a 404 error", "technical_keywords": "UserAdmin, to_field, UserChangeForm, forms.ModelForm, ReadOnlyPasswordHashField, password.help_text, self.instance.pk", "error_symptoms": "Password reset link is broken and leads to a 404 error", "domain_area": "web_framework", "instance_id": "django__django-16032"}, {"problem_type": "bug", "affected_modules": "django.db.models.query.QuerySet, django.db.models.query.QuerySet.alias, django.db.models.query.QuerySet.annotate, django.db.models.fields", "core_issue": "__in filter does not restrict selected columns to one when QuerySet.alias() is chained after annotate(), resulting in too many columns in subquery", "technical_keywords": "QuerySet, __in, alias, annotate, subquery, Value, filter, OperationalError", "error_symptoms": "django.db.utils.OperationalError: sub-select returns 10 columns - expected 1", "domain_area": "ORM/querying", "instance_id": "django__django-16082"}, {"problem_type": "incorrect behavior", "affected_modules": "django.core.management.commands.runserver", "core_issue": "The runserver command outputs the server address as http://0:8000/ when started with 0:8000, which is not a usable address and inconsistent with documentation suggesting 0:8000 should map to 0.0.0.0:8000", "technical_keywords": "manage.py, runserver, address resolution, StatReloader, output message, 0:8000, 0.0.0.0:8000", "error_symptoms": "Starting development server at http://0:8000/ (non-working address in browser)", "domain_area": "web development", "instance_id": "django__django-16100"}, {"problem_type": "bug", "affected_modules": "django.utils.timesince", "core_issue": "timesince() raises TypeError when called with a datetime one month or more in the past if USE_TZ is True, due to subtracting offset-naive and offset-aware datetime objects", "technical_keywords": "timesince, USE_TZ, timezone.now, datetime.timedelta, tzinfo, TypeError", "error_symptoms": "TypeError: can't subtract offset-naive and offset-aware datetimes", "domain_area": "web_framework", "instance_id": "django__django-16116"}, {"problem_type": "feature request", "affected_modules": "django.contrib.admin.views.main, changelist_view", "core_issue": "The changelist_view method in Django admin does not wrap list_editable data changes in a transaction, which can lead to inconsistent database states during errors.", "technical_keywords": "django admin, changelist_view, transaction, list_editable, database", "error_symptoms": "Potential inconsistent database state if errors occur during list_editable processing.", "domain_area": "web_framework", "instance_id": "django__django-16136"}, {"problem_type": "bug", "affected_modules": "django.db.models.query.QuerySet, bulk_create", "core_issue": "ON CONFLICT clause in bulk_create incorrectly uses model field names instead of the actual db_column names, causing invalid SQL syntax", "technical_keywords": "bulk_create, bulk_update, db_column, ON CONFLICT, update_fields, unique_fields, PostgreSQL, ActivityBlackListed", "error_symptoms": "PostgreSQL ERROR: column \"blacklistid\" does not exist at character 1508", "domain_area": "database", "instance_id": "django__django-16139"}, {"problem_type": "bug", "affected_modules": "django.db.models.fields.related_descriptors, QuerySet, related managers", "core_issue": "Async methods acreate(), aget_or_create(), and aupdate_or_create() on related managers do not invoke the expected manager-level implementations but incorrectly call QuerySet methods instead.", "technical_keywords": "acreate, aget_or_create, aupdate_or_create, create, get_or_create, update_or_create, QuerySet, related managers, sync_to_async, ForwardManyToManyDescriptor, ReverseManyToManyDescriptor, ManyToManyDescriptor", "error_symptoms": "Async operations on related managers do not work as intended, potentially leading to incorrect data creation or retrieval logic", "domain_area": "web_application_framework", "instance_id": "django__django-16145"}, {"problem_type": "performance enhancement", "affected_modules": "queryset, annotate, count, Django ORM", "core_issue": "The queryset.count() method includes unused annotations in the generated SQL, leading to unnecessary query complexity and potential performance degradation", "technical_keywords": "annotate, Count, queryset.count, select_related, Book.objects.annotate", "error_symptoms": "Generated SQL contains unused annotation (Count('chapters')) but result is same as without annotation", "domain_area": "database_query_optimization", "instance_id": "django__django-16255"}, {"problem_type": "bug", "affected_modules": "django.template.defaultfilters.floatformat, django.template.backends.django.DjangoTemplates", "core_issue": "The floatformat template filter converts Decimal numbers to float, causing precision loss when rendering decimal values with many digits", "technical_keywords": "floatformat, Decimal, Template, Context, django.template.defaultfilters, render", "error_symptoms": "Rendered output shows reduced precision, decimal digits replaced with zeros", "domain_area": "web_framework, templating", "instance_id": "django__django-16256"}, {"problem_type": "bug", "affected_modules": "contrib.auth.forms.UserCreationForm, django.forms.ModelForm, ManyToManyField, ModelMultipleChoiceField", "core_issue": "UserCreationForm.save does not save ManyToMany field data because it omits calling self.save_m2m()", "technical_keywords": "UserCreationForm, save, commit, save_m2m, ManyToManyField, ModelMultipleChoiceField, contrib.auth.forms, ModelForm", "error_symptoms": "Data from ManyToMany form fields is not persisted when using UserCreationForm", "domain_area": "web_framework", "instance_id": "django__django-16263"}, {"problem_type": "bug", "affected_modules": "django.db.models.FileField, django.core.files.storage, migrations", "core_issue": "FileField fails to properly deconstruct when storage is set via a callable that may return default_storage, leading to migrations that inconsistently include or omit the storage argument", "technical_keywords": "FileField, storage, default_storage, FileSystemStorage, get_storage, deconstruct, makemigrations, migration", "error_symptoms": "Migrations randomly include or omit the storage argument on FileField depending on the evaluated value of the storage callable", "domain_area": "web_framework", "instance_id": "django__django-16315"}, {"problem_type": "bug", "affected_modules": "django.template.defaultfilters", "core_issue": "floatformat filter raises ValueError when input is '0.00' and precision is set to 0", "technical_keywords": "floatformat, Decimal, ValueError, prec", "error_symptoms": "ValueError: valid range for prec is [1, MAX_PREC]", "domain_area": "web_framework", "instance_id": "django__django-16333"}, {"problem_type": "bug", "affected_modules": "django.forms.formsets, FormSet, add_fields, empty_form", "core_issue": "Formsets' add_fields() method raises a TypeError when index is None and self.can_delete is True with self.can_delete_extra False, typically when accessing FormSet.empty_form", "technical_keywords": "FormSet, add_fields, empty_form, can_delete, can_delete_extra, index, initial_form_count, TypeError", "error_symptoms": "TypeError: '<' not supported between instances of 'NoneType' and 'int'", "domain_area": "web_framework", "instance_id": "django__django-16429"}, {"problem_type": "feature request", "affected_modules": "BaseConstraint, ValidationError", "core_issue": "Cannot customize the code attribute of ValidationError raised by BaseConstraint.validate without subclassing", "technical_keywords": "BaseConstraint, validate, ValidationError, violation_error_message, code, error code", "error_symptoms": "ValidationError from constraints have non-customizable error code", "domain_area": "form validation", "instance_id": "django__django-16454"}, {"problem_type": "bug", "affected_modules": "runserver, django.core.servers.basehttp, WSGIServer", "core_issue": "runserver does not strip response body for HTTP HEAD requests, causing non-compliance with HTTP spec and potential broken pipe errors", "technical_keywords": "runserver, HEAD request, RFC 2616, response body, WSGIServer, manage.py, django-admin, Django 1.10, curl", "error_symptoms": "Response body present in HEAD requests, broken pipe error messages in runserver output", "domain_area": "web_framework", "instance_id": "django__django-16485"}, {"problem_type": "bug", "affected_modules": "django.contrib.sitemaps, django.contrib.sitemaps.views", "core_issue": "When a sitemap has no items but defines a callable lastmod, calling get_latest_lastmod raises a ValueError because max() is called on an empty sequence", "technical_keywords": "get_latest_lastmod, lastmod, max, sitemap, items, ValueError, callable, django.contrib.sitemaps", "error_symptoms": "Exception ValueError: max() arg is an empty sequence when accessing /sitemap.xml", "domain_area": "web_framework", "instance_id": "django__django-16493"}, {"problem_type": "bug", "affected_modules": "django.forms.modelform_factory, django.forms.ModelForm", "core_issue": "modelform_factory ignores the formfield_callback specified in the Meta class of a ModelForm and overwrites it with None, resulting in the callback not being used in the generated FactoryForm", "technical_keywords": "modelform_factory, ModelForm, formfield_callback, Meta, MyModel, all_required, FactoryForm", "error_symptoms": "FactoryForm fields are not required as expected because formfield_callback is not called", "domain_area": "web_framework", "instance_id": "django__django-16502"}, {"problem_type": "bug", "affected_modules": "django.contrib.admin.sites, AdminSite.catch_all_view", "core_issue": "AdminSite.catch_all_view() fails to preserve query strings in redirects when APPEND_SLASH is True", "technical_keywords": "AdminSite.catch_all_view, HttpResponsePermanentRedirect, request.META['QUERY_STRING'], APPEND_SLASH, request.path", "error_symptoms": "Redirects lose query strings, resulting in incorrect target URL", "domain_area": "web_framework", "instance_id": "django__django-16527"}, {"problem_type": "configuration error", "affected_modules": "SECRET_KEY_FALLBACKS, Django sessions, AbstractBaseUser", "core_issue": "Sessions do not recognize SECRET_KEY_FALLBACKS during secret key rotation, causing user logouts", "technical_keywords": "SECRET_KEY_FALLBACKS, SECRET_KEY, salted_hmac, AbstractBaseUser.get_session_auth_hash, Django", "error_symptoms": "All users are logged out after secret key rotation", "domain_area": "web application security", "instance_id": "django__django-16560"}, {"problem_type": "optimization bug", "affected_modules": "django.db.migrations, django.db.migrations.operations, optimizer, AlterField", "core_issue": "Migration optimizer does not consolidate consecutive AlterField operations into a single operation when AddField is not present", "technical_keywords": "migrations.AddField, migrations.AlterField, optimizer.optimize, AlterField.reduce, is_same_field_operation, CharField, model_name, name, field", "error_symptoms": "Multiple AlterField operations are not reduced; all are retained after optimization", "domain_area": "database migrations", "instance_id": "django__django-16569"}, {"problem_type": "bug", "affected_modules": "django.core.management.base, argparse, CommandParser", "core_issue": "CommandParser does not propagate enhanced error formatting arguments to subparsers, causing CLI stacktraces instead of user-friendly usage messages for missing subparser arguments", "technical_keywords": "CommandParser, add_subparsers, add_parser, BaseCommand, ArgumentParser, CommandError", "error_symptoms": "Stacktrace shown on CLI for missing subparser arguments instead of a formatted usage error message", "domain_area": "command_line_interface", "instance_id": "django__django-16595"}, {"problem_type": "permission bug", "affected_modules": "django.contrib.admin.templatetags.admin_modify", "core_issue": "The 'show_save_as_new' tag does not validate add permission, allowing users to perform save-as-new operations without proper authorization.", "technical_keywords": "show_save_as_new, save_as_new, has_add_permission, has_change_permission, admin_modify.py", "error_symptoms": "Users can add new objects via 'save as new' without having add permission", "domain_area": "web_frameworks", "instance_id": "django__django-16612"}, {"problem_type": "coding style violation", "affected_modules": "django.db.migrations, django.db.models, migration file generator", "core_issue": "Migration file import statements are ordered by module instead of placing all import module statements before from module import objects, violating Django coding style and isort defaults", "technical_keywords": "isort, import ordering, migration file generator, import statement, Django coding style, migrations", "error_symptoms": "Newly generated migration files fail isort checks due to improper import ordering", "domain_area": "software development", "instance_id": "django__django-16631"}, {"problem_type": "optimization", "affected_modules": "AddIndex, RemoveIndex, migration operations", "core_issue": "Excessive AddIndex and RemoveIndex operations occur during migration optimization and should be reduced to improve efficiency", "technical_keywords": "AddIndex, RemoveIndex, migration, optimization", "error_symptoms": "Unnecessarily high number of index add/remove operations during migration", "domain_area": "database_management", "instance_id": "django__django-16642"}, {"problem_type": "usability improvement", "affected_modules": "django.contrib.admin.options.ModelAdmin, readonly_fields validation", "core_issue": "Error messages for readonly_fields validation do not display the field name, only the index, making debugging harder compared to other fields", "technical_keywords": "ModelAdmin, readonly_fields, error message, validation, list_editable, raw_id_fields, list_display", "error_symptoms": "Error message for readonly_fields only shows the index and not the problematic field's name", "domain_area": "web framework", "instance_id": "django__django-16661"}, {"problem_type": "bug", "affected_modules": "ModelAdmin, modeladmin", "core_issue": "lookup_allowed wrongly interprets foreign key primary key relationship as concrete inheritance, causing DisallowedModelAdminLookup for nested lookups in list_filter", "technical_keywords": "ModelAdmin.lookup_allowed, OneToOneField, ForeignKey, list_filter, DisallowedModelAdminLookup, primary_key, concrete inheritance", "error_symptoms": "DisallowedModelAdminLookup exception when using nested lookups with a foreign key as primary key in list_filter", "domain_area": "web_framework", "instance_id": "django__django-16662"}, {"problem_type": "bug", "affected_modules": "django.forms.widgets, django.forms.fields, SelectDateWidget, ReproForm", "core_issue": "SelectDateWidget does not validate user-supplied date values, causing OverflowError when large integers are passed to datetime.date constructor", "technical_keywords": "SelectDateWidget, value_from_datadict, datetime.date, OverflowError, forms.DateField, is_valid, int, sys.maxsize", "error_symptoms": "Internal Server Error with OverflowError: signed integer is greater than maximum when invalid date input is provided", "domain_area": "web_framework", "instance_id": "django__django-16667"}, {"problem_type": "performance issue", "affected_modules": "django.db.models.fields.files.ImageField", "core_issue": "ImageField attaches a post_init signal handler even when width_field and height_field are unset, causing unnecessary overhead during model initialization", "technical_keywords": "ImageField, post_init signal, width_field, height_field, Django model, signal handler", "error_symptoms": "Significant slowdown (30-40% of time) during Django model initialization after database fetch", "domain_area": "web application framework", "instance_id": "django__django-16801"}, {"problem_type": "bug", "affected_modules": "models.Model, models.TextChoices, ArrayField, migrations.AddField", "core_issue": "Django migrations incorrectly reference nested class methods in Field.default, causing migration failure", "technical_keywords": "Profile, Capability, models.TextChoices, ArrayField, default, migrations.AddField, django.contrib.postgres.fields.ArrayField", "error_symptoms": "Migration passes wrong default argument value, leading to error during migrate step", "domain_area": "web_framework", "instance_id": "django__django-16819"}, {"problem_type": "feature request", "affected_modules": "template filters, escapeseq, safeseq", "core_issue": "A new template filter escapeseq is needed to escape each element in a sequence before applying operations like join, particularly when autoescape is disabled", "technical_keywords": "escapeseq, safeseq, template filter, autoescape, join", "error_symptoms": "unknown", "domain_area": "web application security", "instance_id": "django__django-16877"}, {"problem_type": "bug", "affected_modules": "FileResponse", "core_issue": "FileResponse fails to assign the correct mime type for files with .br and .Z extensions, defaulting to text/html", "technical_keywords": "FileResponse, mime type, .br, .Z, content type, file extension", "error_symptoms": "Content type is incorrectly set to text/html for .br and .Z files", "domain_area": "web_framework", "instance_id": "django__django-16899"}, {"problem_type": "enhancement", "affected_modules": "Paginator", "core_issue": "Paginator requires use of page_range for iteration instead of supporting native Python iteration via __iter__", "technical_keywords": "Paginator, __iter__, page_range, self.page", "error_symptoms": "Cannot use for-in loop to iterate over Paginator pages directly", "domain_area": "software_framework", "instance_id": "django__django-16901"}, {"problem_type": "compatibility issue", "affected_modules": "django.db.models, django.db.models.functions, psycopg2", "core_issue": "Aggregates over window functions in ORM queries throw GroupingError after upgrading to Django 4.2", "technical_keywords": "Window, Sum, Coalesce, annotate, aggregate, F, Django ORM, psycopg2.errors.GroupingError", "error_symptoms": "psycopg2.errors.GroupingError: aggregate function calls cannot contain window function calls", "domain_area": "database_query", "instance_id": "django__django-16938"}, {"problem_type": "bug", "affected_modules": "apps, get_swappable_settings_name, django-stubs", "core_issue": "apps.clear_cache does not clear the functools.lru_cache cache of get_swappable_settings_name method", "technical_keywords": "apps.clear_cache, get_swappable_settings_name, functools._lru_cache_wrapper, cache_clear, django-stubs", "error_symptoms": "get_swappable_settings_name cache persists after apps.clear_cache is called", "domain_area": "type checking, caching, Django, static analysis", "instance_id": "django__django-16950"}, {"problem_type": "bug", "affected_modules": "matplotlib.figure, matplotlib.legend, matplotlib.pyplot", "core_issue": "Calling legend on a SubFigure raises TypeError because SubFigure is not recognized as a valid legend parent", "technical_keywords": "SubFigure, legend, FigureBase, matplotlib.figure.Figure, matplotlib.legend.Legend, ax.plot, TypeError", "error_symptoms": "TypeError: Legend needs either Axes or Figure as parent", "domain_area": "data_visualization", "instance_id": "django__django-17029"}, {"problem_type": "bug", "affected_modules": "matplotlib.pyplot.hist", "core_issue": "When using plt.hist with density=True and specifying range, the bins do not respect the provided range limits", "technical_keywords": "plt.hist, density=True, range, bins, numpy, matplotlib", "error_symptoms": "Returned bins array starts and ends at unexpected values, not matching specified range boundaries", "domain_area": "data_visualization", "instance_id": "django__django-17084"}, {"problem_type": "bug", "affected_modules": "django.db.models.UUIDField, django.contrib.admin, admin.StackedInline, ModelAdmin", "core_issue": "Django Admin inlines do not use the default value for UUIDField, causing the UUIDField 'id' to be null when adding related inline objects", "technical_keywords": "UUIDField, default=uuid.uuid4, admin.StackedInline, ForeignKey, Thing, SubThing, admin.ModelAdmin", "error_symptoms": "UUIDField 'id' in Thing model becomes null when saving a Thing with a new SubThing inline", "domain_area": "web_framework", "instance_id": "django__django-17087"}, {"problem_type": "bug", "affected_modules": "django.db.models.Manager, django.db.models.query, django.core.serializers, django.db.models.sql.compiler", "core_issue": "Serializing a many-to-many relation with a custom manager using select_related causes FieldError due to a conflict between select_related and deferred fields during serialization.", "technical_keywords": "select_related, only, ManyToManyField, Model, Manager, get_queryset, RelatedManager, FieldError, serializers.serialize", "error_symptoms": "django.core.exceptions.FieldError: Field TestTag.master cannot be both deferred and traversed using select_related at the same time.", "domain_area": "object-relational mapping, serialization", "instance_id": "django__django-7530"}, {"problem_type": "bug", "affected_modules": "matplotlib.image, matplotlib.colors, test_image.py", "core_issue": "test_huge_range_log fails due to LogNorm raising ValueError for invalid vmin or vmax, likely triggered by numpy change affecting masked array handling", "technical_keywords": "LogNorm, self.norm, masked_array, __call__, autoscale_None, np.isfinite, ValueError", "error_symptoms": "ValueError: Invalid vmin or vmax", "domain_area": "data_visualization", "instance_id": "django__django-9296"}, {"problem_type": "bug", "affected_modules": "matplotlib.widgets.SpanSelector, matplotlib.axes.Axes", "core_issue": "Using interactive SpanSelector causes axes limits to incorrectly expand to include zero, rather than preserving original limits plus margins", "technical_keywords": "SpanSelector, Axes, interactive, span_stays, xlimits, axes, plt.subplots, plot, pyplot", "error_symptoms": "Axes xlimits unnecessarily expand to include x=0 when using interactive SpanSelector", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-13989"}, {"problem_type": "bug", "affected_modules": "django.db.models.Q, Django ORM SQL compilation", "core_issue": "Django generates incorrect fallback SQL for multiple Q-object XOR operations on databases without native XOR, interpreting as exactly-one-true instead of parity (odd number true).", "technical_keywords": "Q, ^, XOR, Client.objects.filter, SQL fallback, PostgreSQL, MySQL", "error_symptoms": "Logical queries using Q(…) ^ Q(…) ^ Q(…) return wrong results; parity logic fails, only returns true for exactly-one argument true.", "domain_area": "database_querying", "instance_id": "matplotlib__matplotlib-14623"}, {"problem_type": "bug", "affected_modules": "django.db.migrations, makemigrations, router.allow_migrate", "core_issue": "makemigrations uses incorrect app_label and model pairings when calling router.allow_migrate(), causing inconsistency checks and invalid shard combinations", "technical_keywords": "makemigrations, router.allow_migrate, app_label, model, shards, migrations", "error_symptoms": "Routers receive invalid app_label and model combinations, leading to incorrect migration routing for database shards", "domain_area": "database_migrations", "instance_id": "matplotlib__matplotlib-20488"}, {"problem_type": "bug", "affected_modules": "matplotlib.pyplot, matplotlib.axes, matplotlib.scale", "core_issue": "Setting axis limits in descending order does not invert a log scale axis in matplotlib version 3.1.0", "technical_keywords": "matplotlib.pyplot, plt.subplots, ax.plot, ax.set_yscale, ax.set_ylim, log scale, axis limits", "error_symptoms": "Y-axis inversion works for linear scale but not for log scale when limits are set in descending order", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-20676"}, {"problem_type": "bug", "affected_modules": "matplotlib.patches, matplotlib.patches.Rectangle, matplotlib.patches.Ellipse", "core_issue": "Dash offset in linestyle tuple is ignored for patch objects, causing edge lines to render without the intended offset", "technical_keywords": "linestyle, dash tuple, offset, patch object, Rectangle, Ellipse, add_patch, edgecolor, linewidth", "error_symptoms": "Patch edge lines overlap and do not show the dash offset specified in the linestyle tuple", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-20826"}, {"problem_type": "bug", "affected_modules": "matplotlib.pyplot, matplotlib.axes._subplots, matplotlib.gridspec", "core_issue": "The set_visible method does not hide 3D projection subplots when set_visible(False) is called", "technical_keywords": "set_visible, projection='3d', Axes3D, plt.subplots, scatter", "error_symptoms": "The subplot remains visible despite calling set_visible(False)", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-20859"}, {"problem_type": "bug", "affected_modules": "matplotlib.pyplot, matplotlib.rcParams, axis formatting, datetime axis", "core_issue": "Datetime axis spacing appears unclear and inconsistent in matplotlib version 3.4 when using usetex=True compared to version 3.3", "technical_keywords": "matplotlib.pyplot, rcParams, text.usetex, pd.date_range, ax.plot, datetime axis, savefig", "error_symptoms": "Datetime axis labels and spacing look different or unclear with usetex enabled in matplotlib 3.4 compared to 3.3", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-21568"}, {"problem_type": "bug", "affected_modules": "matplotlib.dates.ConciseDateFormatter, matplotlib.dates.AutoDateLocator, matplotlib.axes.Axes", "core_issue": "ConciseDateFormatter does not display the year on the x-axis when plotting data covering less than 12 months and January is excluded from the axis range", "technical_keywords": "ConciseDateFormatter, AutoDateLocator, Axes.xaxis.set_major_formatter, Axes.xaxis.set_major_locator, fig.autofmt_xdate", "error_symptoms": "Year information missing from x-axis labels and offset in plots spanning less than 1 year", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-22719"}, {"problem_type": "bug", "affected_modules": "matplotlib.axes.Axes.clear, matplotlib.pyplot.subplots", "core_issue": "Calling ax.clear() on shared axes restores ticks and tick labels that should remain hidden, resulting in additional ticks and labels being displayed incorrectly after clearing axes", "technical_keywords": "Axes.clear, plt.subplots, sharex, sharey, FuncAnimation, axis sharing, tick labels, ticks", "error_symptoms": "Extra ticks and tick labels shown on shared axes, especially along top and right sides of subplots, after using ax.clear(), differing behavior between matplotlib 3.4.1 and 3.4.2", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-22865"}, {"problem_type": "bug", "affected_modules": "matplotlib.colorbar, matplotlib.colors", "core_issue": "When using drawedges=True on a colorbar with extend='both', the black edge lines are missing at the extremities", "technical_keywords": "ColorbarBase, drawedges, extend, from_levels_and_colors, cmap, norm", "error_symptoms": "Black lines that separate colorbar segments are not drawn at the colorbar extremities when both drawedges=True and extend='both' are used", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-22871"}, {"problem_type": "bug", "affected_modules": "matplotlib.pyplot, matplotlib.get_backend, matplotlib._pylab_helpers.Gcf, matplotlib.rc_context", "core_issue": "Calling matplotlib.get_backend() after creating the first figure inside rc_context causes all figures to be removed from Gcf.figs", "technical_keywords": "matplotlib.get_backend, rc_context, plt.figure, Gcf.figs, OrderedDict, plt._pylab_helpers.Gcf, FigureManagerQT", "error_symptoms": "AssertionError when comparing Gcf.figs before and after get_backend(), figures missing from Gcf, plt.close does not work for affected figures", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-23299"}, {"problem_type": "bug", "affected_modules": "matplotlib.pyplot, matplotlib.stackplot, matplotlib.axes._base, matplotlib.rcsetup", "core_issue": "matplotlib.stackplot does not accept color aliases like 'C2' in the colors argument and raises a ValueError when attempting to use them for the Axes property cycler, unlike ax.plot and Rectangle which accept them", "technical_keywords": "ax.plot, Rectangle, stackplot, Axes.set_prop_cycle, colors, cycler, validate_color_for_prop_cycle, ValueError, CN alias", "error_symptoms": "ValueError: Cannot put cycle reference ('C2') in prop_cycler", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-23314"}, {"problem_type": "bug", "affected_modules": "matplotlib.offsetbox.HPacker", "core_issue": "The align parameter in HPacker reverses the top and bottom alignment options, leading to unexpected packing behavior.", "technical_keywords": "HPacker, align, DrawingArea, VPacker, AnchoredOffsetbox, TextArea, Rectangle", "error_symptoms": "Setting align='bottom' aligns content as if 'top' were selected, and vice versa", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-23412"}, {"problem_type": "bug", "affected_modules": "matplotlib.axes, matplotlib.artist", "core_issue": "Clearing an axes using cla() does not unset the .axes attribute of its child artists, while removing the artist does", "technical_keywords": "cla(), clf(), Artist, .axes attribute, remove(), Figure, Axes", "error_symptoms": "After calling cla() on an axes, the artist's .axes attribute is still set", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-23476"}, {"problem_type": "deprecation warning", "affected_modules": "matplotlib.colors, numpy", "core_issue": "NumPy 1.24 issues deprecation warnings when matplotlib.colors assigns out-of-bound integer values to uint8 arrays, as future NumPy versions will fail these conversions", "technical_keywords": "matplotlib.colors, plt.get_cmap, np.empty, uint8, DeprecationWarning, xa, self._i_over, self._i_under, self._i_bad", "error_symptoms": "DeprecationWarning messages about conversion of out-of-bound Python integers to uint8 in matplotlib/colors.py", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-24026"}, {"problem_type": "bug", "affected_modules": "matplotlib.offsetbox.AnnotationBbox, matplotlib.backends.backend_svg", "core_issue": "The gid set on AnnotationBbox is not passed to the SVG renderer, resulting in missing gid labels for images in the saved SVG file", "technical_keywords": "AnnotationBbox, set_gid, get_gid, SVG renderer, fig.savefig, OffsetImage, matplotlib.backends.backend_svg", "error_symptoms": "SVG file missing gid label for images despite AnnotationBbox having a gid set", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-24149"}, {"problem_type": "bug", "affected_modules": "matplotlib.axes._axes, matplotlib.cbook.__init__, matplotlib.pyplot", "core_issue": "ax.bar raises StopIteration when given all-nan x data, causing histogram logic that relies on this to break", "technical_keywords": "ax.bar, _convert_dx, _safe_first_finite, StopIteration, BarCollection, Rectangle, sanitize_sequence", "error_symptoms": "StopIteration exception when calling ax.bar([np.nan], [np.nan])", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-24177"}, {"problem_type": "bug", "affected_modules": "matplotlib.axis, matplotlib.category, matplotlib._api.deprecation, matplotlib.axes._axes, matplotlib.lines, matplotlib.artist", "core_issue": "Confusing deprecation warning and conversion error are raised when plotting with empty data structures on axes with category unit converters; the warning message is misleading and does not provide an actionable solution for empty inputs.", "technical_keywords": "MatplotlibDeprecationWarning, axis.update_units, converter.convert, units.ConversionInterface, Axis.convert_units, ax.plot, ax.convert_xunits, ConversionError", "error_symptoms": "MatplotlibDeprecationWarning about unit converters, ConversionError: Failed to convert value(s) to axis units: [], generic warning when plotting empty data with category units", "domain_area": "visualization", "instance_id": "matplotlib__matplotlib-24570"}, {"problem_type": "enhancement request", "affected_modules": "matplotlib.pyplot.contour", "core_issue": "contour() does not auto-detect boolean 2D arrays and defaults to multiple contour levels, causing overlapping lines; should default to a single level at 0.5 for boolean inputs", "technical_keywords": "contour, levels, boolean_2d_array, plt.contour, numpy.ogrid, imshow, RGBA", "error_symptoms": "Multiple contour lines are drawn on top of each other for boolean arrays when default levels are used", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-24627"}, {"problem_type": "bug", "affected_modules": "mlab._spectral_helper", "core_issue": "Window correction in mlab._spectral_helper uses np.abs, causing incorrect results for windows with negative values such as flattop", "technical_keywords": "mlab._spectral_helper, window correction, np.abs, signal.windows.flattop, window.sum, window", "error_symptoms": "Observed output is 4372.942556173262 while expected is 0 for flattop window correction", "domain_area": "signal_processing", "instance_id": "matplotlib__matplotlib-24637"}, {"problem_type": "bug", "affected_modules": "matplotlib.figure, matplotlib.backends.backend_macosx, matplotlib.backend_bases, pickle", "core_issue": "The dpi of a figure is doubled each time it is unpickled on M1 Macs with the MacOSX backend, eventually causing an OverflowError.", "technical_keywords": "Figure.dpi, pickle.dump, pickle.load, __setstate__, new_figure_manager_given_figure, FigureCanvas, OverflowError, backend_macosx", "error_symptoms": "Figure dpi repeatedly doubles after each unpickling in a loop, resulting in OverflowError: signed integer is greater than maximum", "domain_area": "visualization", "instance_id": "matplotlib__matplotlib-24870"}, {"problem_type": "bug", "affected_modules": "matplotlib.pyplot, stackplot, twinx, axes.Axes.dataLim", "core_issue": "When using twinx and creating a stackplot on the first axis, ax1's dataLims are unexpectedly set to ±inf after plotting on the second axis", "technical_keywords": "matplotlib.pyplot, stackplot, twinx, dataLim, axes, plot, intervaly", "error_symptoms": "ax1 dataLims become [inf -inf] after plotting on ax2", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-24970"}, {"problem_type": "bug", "affected_modules": "matplotlib.figure, matplotlib.axes, matplotlib._align, matplotlib.pyplot", "core_issue": "Calling align_labels() on a figure adds objects that prevent pickling due to weakref, resulting in a TypeError", "technical_keywords": "Figure, Axes, align_labels, pickle, weakref.ReferenceType, TypeError, add_subplot, plot", "error_symptoms": "TypeError: cannot pickle 'weakref.ReferenceType' object", "domain_area": "visualization", "instance_id": "matplotlib__matplotlib-25122"}, {"problem_type": "bug", "affected_modules": "matplotlib.figure.Figure, matplotlib.pyplot", "core_issue": "wspace and hspace parameters in Figure.subfigures have no effect on subplot spacing", "technical_keywords": "Figure.subfigures, wspace, hspace, subplots, plt.figure, matplotlib", "error_symptoms": "Spacing between subfigures remains unchanged regardless of wspace and hspace values", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-25287"}, {"problem_type": "bug", "affected_modules": "axis.py, rcParams, offsetText", "core_issue": "Setting ytick.labelcolor or xtick.labelcolor does not update the exponent label color; it continues to use ytick.color or xtick.color instead", "technical_keywords": "ytick.labelcolor, xtick.labelcolor, rcParams, offsetText, axis.py, mtransforms.blended_transform_factory, axes.transAxes, IdentityTransform", "error_symptoms": "Exponent label color does not match tick label color, it uses tick color instead even after updating labelcolor", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-25311"}, {"problem_type": "bug", "affected_modules": "matplotlib.axes.Axes.hist", "core_issue": "When using histtype='step' and density=True, the y-axis is not auto-scaled correctly, resulting in inconsistent density values when data is rescaled, whereas other histtypes work as expected.", "technical_keywords": "matplotlib.axes.Axes.hist, histtype, step, density, scale, numpy.random.randn", "error_symptoms": "Histogram density axis does not fit the data when using histtype='step' and density=True; density values change incorrectly when data is scaled", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-25332"}, {"problem_type": "visualization bug", "affected_modules": "seaborn.objects, seaborn.scatterplot, seaborn._core.scales, matplotlib.ticker.ScalarFormatter", "core_issue": "Legends for large numeric ranges do not display multiplicative offset values when using ScalarFormatter, causing misleading legend labels", "technical_keywords": "ScalarFormatter, offset value, so.Plot, add, Dot, scatterplot, mpl.rcParams, axes.formatter.useoffset, axes.formatter.offset_threshold", "error_symptoms": "Legend values omit offset, legend labels do not reflect correct data scaling for large numbers", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-25479"}, {"problem_type": "usability issue, bug", "affected_modules": "matplotlib.cm, matplotlib.colors, matplotlib.pyplot", "core_issue": "Colormap lookup fails if the colormap object's internal name does not match the registered cmap name, causing unexpected ValueError when using pyplot functions", "technical_keywords": "LinearSegmentedColormap, from_list, register_cmap, get_cmap, set_cmap, pyplot, name, cmap_d, ValueError", "error_symptoms": "ValueError: Colormap some_cmap_name is not recognized, failure to apply newly registered colormap in pyplot despite successful registration", "domain_area": "visualization", "instance_id": "matplotlib__matplotlib-25775"}, {"problem_type": "bug", "affected_modules": "matplotlib.pyplot, matplotlib.legend.Legend, FigureCanvasQTAgg", "core_issue": "Pickling a figure fails when the legend or annotation is set as draggable due to non-pickleable FigureCanvasQTAgg object", "technical_keywords": "plt.figure, ax.legend, set_draggable, pickle.dumps, FigureCanvasQTAgg, TypeError", "error_symptoms": "TypeError: cannot pickle 'FigureCanvasQTAgg' object", "domain_area": "visualization", "instance_id": "matplotlib__matplotlib-25960"}, {"problem_type": "feature request", "affected_modules": "Blueprint", "core_issue": "The Blueprint class currently allows creation with an empty name, which leads to incorrect behavior; there should be validation to raise ValueError for empty names", "technical_keywords": "Blueprint, ValueError, name validation", "error_symptoms": "Incorrect behavior occurs when a Blueprint is created with an empty name", "domain_area": "web_framework", "instance_id": "matplotlib__matplotlib-26113"}, {"problem_type": "enhancement request", "affected_modules": "ContourSet, cartopy.mpl.contour", "core_issue": "ContourSet lacks a set_paths method for replacing its paths with transformed versions, requiring awkward workarounds in Cartopy", "technical_keywords": "ContourSet, set_paths, get_paths, transformed_paths, cartopy.mpl.contour", "error_symptoms": "No direct method to set paths in ContourSet, forcing manual replacement of paths list", "domain_area": "visualization", "instance_id": "matplotlib__matplotlib-26208"}, {"problem_type": "enhancement", "affected_modules": "Text, Annotations, rcParams, GraphicsContext, backend code", "core_issue": "Text objects lack per-artist antialiased configuration and always use the global rcParams value, unlike other artists", "technical_keywords": "Text, set_antialiased, get_antialiased, rcParams[\"text.antialias\"], GraphicsContext, Annotations, backend code", "error_symptoms": "Antialiasing for Text cannot be set or queried individually per object; always uses global configuration", "domain_area": "graphics_rendering", "instance_id": "matplotlib__matplotlib-26291"}, {"problem_type": "bug", "affected_modules": "mpl_toolkits.axes_grid1.inset_locator, matplotlib.offsetbox, matplotlib._tight_bbox, matplotlib.backend_bases, IPython.core.pylabtools", "core_issue": "Attempting to create inset axes using inset_axes results in AttributeError due to renderer being None when calling get_window_extent", "technical_keywords": "inset_axes, AnchoredLocatorBase, get_window_extent, OffsetBox, _get_renderer, FigureCanvasBase, Axes, Bbox", "error_symptoms": "AttributeError: 'NoneType' object has no attribute '_get_renderer'", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-26342"}, {"problem_type": "bug", "affected_modules": "matplotlib.axes.Axes.annotate, matplotlib.patches, numpy.array", "core_issue": "Annotate keeps reference to the original array passed as xy parameter instead of making a copy, causing arrow positions to update if the array is modified after annotation", "technical_keywords": "annotate, xy, numpy.array, arrowprops, Axes, matplotlib", "error_symptoms": "Arrows in annotation change position when the original xy array is modified after plotting", "domain_area": "data_visualization", "instance_id": "matplotlib__matplotlib-26466"}, {"problem_type": "bug", "affected_modules": "matplotlib.axes._axes, matplotlib.pyplot.hexbin", "core_issue": "The mincnt parameter in hexbin displays inconsistent behavior depending on whether the C parameter is provided, filtering with len(vals) > mincnt instead of len(vals) >= mincnt when C is present.", "technical_keywords": "hexbin, mincnt, C, reduce_C_function, extent, gridsize, matplotlib.axes._axes, pyplot, numpy, Z", "error_symptoms": "When mincnt=1 and C is specified, only gridpoints containing at least two data points are shown, instead of those with at least one datum; inconsistent filtering compared to behavior when C is not specified.", "domain_area": "data_visualization", "instance_id": "mwaskom__seaborn-3069"}, {"problem_type": "unexpected behavior", "affected_modules": "requests.get", "core_issue": "The requests.get method always includes a 'content-length' header in GET requests, potentially causing servers like amazon.com to return errors", "technical_keywords": "requests.get, content-length, HTTP header, GET request", "error_symptoms": "Remote server returns 503 error for GET requests containing 'content-length' header", "domain_area": "web_request_handling", "instance_id": "mwaskom__seaborn-3187"}, {"problem_type": "bug", "affected_modules": "requests, Python 3.8.12", "core_issue": "Proxy authentication fails with error 407 when making requests in Python 3.8.12, but works in other Python versions", "technical_keywords": "requests.get, proxies, Python 3.8.12, HTTP 407, status_code", "error_symptoms": "Received HTTP status code 407 instead of 200 when connecting through a proxy", "domain_area": "networking", "instance_id": "pallets__flask-5014"}, {"problem_type": "unexpected behavior", "affected_modules": "requests.Session, requests.headers", "core_issue": "Setting a session header value to None does not remove the header but sends 'None' as the header value instead", "technical_keywords": "requests.Session, headers, Accept-Encoding, del, None", "error_symptoms": "The HTTP request includes 'Accept-Encoding: None' instead of omitting the header", "domain_area": "networking", "instance_id": "psf__requests-1142"}, {"problem_type": "compatibility bug", "affected_modules": "requests.sessions, python-neutronclient.utils", "core_issue": "A method value encoded as binary string is converted into its string representation by builtin_str, causing incorrect HTTP method and 404 Not Found error", "technical_keywords": "builtin_str, requests.sessions, python-neutronclient, utils.safe_encode_list, method, HTTP 404", "error_symptoms": "HTTP 404 Not Found returned due to using literal string 'b'GET'' as method", "domain_area": "networking, HTTP client", "instance_id": "psf__requests-1724"}, {"problem_type": "bug", "affected_modules": "requests.models, idna", "core_issue": "Accessing a URL with an empty label like http://.example.com raises a raw UnicodeError from the idna codec instead of a requests.exceptions.InvalidUrl as intended", "technical_keywords": "requests.get, requests.exceptions.InvalidUrl, UnicodeError, idna, url encoding", "error_symptoms": "UnicodeError: encoding with 'idna' codec failed (UnicodeError: label empty or too long)", "domain_area": "networking", "instance_id": "psf__requests-1766"}, {"problem_type": "bug", "affected_modules": "xarray.DataArray, xarray.core.dataarray", "core_issue": "DataArray.quantile does not preserve attributes when keep_attrs=True is specified", "technical_keywords": "DataArray, quantile, keep_attrs, attrs, OrderedDict", "error_symptoms": "out.attrs returns OrderedDict() instead of OrderedDict([('units', 'K')])", "domain_area": "data_analysis", "instance_id": "psf__requests-1921"}, {"problem_type": "regression bug", "affected_modules": "xarray.Dataset, xarray.DataArray, IndexVariable, copy, copy.deepcopy", "core_issue": "Copying datasets or data arrays with deep=True causes unicode index variables to be cast to object type instead of retaining their original unicode dtype", "technical_keywords": "xarray.Dataset, xarray.DataArray, copy, deepcopy, IndexVariable, dtype='<U*', object, deep=True", "error_symptoms": "After deep copy, coordinates with dtype '<U*' become dtype 'object' instead of remaining unicode", "domain_area": "data_analysis", "instance_id": "psf__requests-2317"}, {"problem_type": "bug", "affected_modules": "xarray.Dataset.merge, xarray.DataArray, xarray.merge, xarray.core.merge, xarray.core.dataset, xarray.core.common", "core_issue": "The Dataset.merge method fails when trying to merge a DataArray, whereas the top-level merge function works, due to DataArray lacking an items attribute", "technical_keywords": "Dataset.merge, DataArray, merge_core, coerce_pandas_values, items, AttributeError", "error_symptoms": "AttributeError: 'DataArray' object has no attribute 'items'", "domain_area": "data_processing", "instance_id": "psf__requests-2931"}, {"problem_type": "feature inconsistency", "affected_modules": "seaborn.categorical, seaborn.objects.Nominal, matplotlib", "core_issue": "Nominal scales in seaborn do not mimic the visual handling of categorical scales regarding axis margins, grid display, and axis inversion", "technical_keywords": "so.Nominal, Plotter._finalize_figure, categorical axis, sticky edges, spine artist, grid, matplotlib", "error_symptoms": "Nominal scale plots display different margins, grid behaviors, and y-axis orientation compared to categorical scale plots", "domain_area": "data_visualization", "instance_id": "psf__requests-5414"}, {"problem_type": "specification compliance issue", "affected_modules": "Digest Auth implementation, server-side authentication", "core_issue": "Some server-side Digest Auth implementations are sensitive to whether the qop-options directive is properly quoted as specified by RFC2617", "technical_keywords": "Digest Auth, qop-options, RFC2617, quoted string, curl, authentication", "error_symptoms": "Authentication may fail or be rejected due to improperly quoted or overly strict parsing of qop-options", "domain_area": "network_security", "instance_id": "psf__requests-6028"}, {"problem_type": "bug", "affected_modules": "xarray.DataArray.weighted, xarray.dot", "core_issue": "Passing boolean weights to the weighted mean fails because sum_of_weights is not properly normalized, leading to incorrect mean calculation", "technical_keywords": "xarray.DataArray, weighted, mean, np.bool, xr.dot, sum_of_weights, notnull", "error_symptoms": "Weighted mean returns incorrect result when weights are boolean arrays (e.g., returns 2. instead of expected 1.)", "domain_area": "data_analysis", "instance_id": "pydata__xarray-2905"}, {"problem_type": "bug", "affected_modules": "xarray.core.variable", "core_issue": "Assignment to DataArray elements with objects having a values property causes their values property to be extracted and stored, rather than the object itself, breaking storage of arbitrary objects in object dtype arrays.", "technical_keywords": "xarray, DataArray, Variable.__setitem__, values property, object dtype, loc, assignment, pull request 1746", "error_symptoms": "Assigned objects with a values property are replaced by their values attribute when set item is called, resulting in unexpected arrays containing the values property, not the original objects.", "domain_area": "scientific_data_handling", "instance_id": "pydata__xarray-3095"}, {"problem_type": "bug", "affected_modules": "xarray.DataArray.sum, xarray.core.nanops", "core_issue": "The sum method with min_count argument fails on DataArrays when reducing across multiple dimensions due to incorrect calculation of valid elements, leading to errors.", "technical_keywords": "xarray, DataArray, sum, min_count, nanops, mask.shape, np.take, axis, prod", "error_symptoms": "min_count is not available for reduction with more than one dimensions, error when using sum with multiple dims and min_count", "domain_area": "scientific_computing", "instance_id": "pydata__xarray-3151"}, {"problem_type": "bug", "affected_modules": "xarray.Dataset, xarray.DataArray, to_stacked_array, to_unstacked_dataset", "core_issue": "The to_unstacked_dataset method raises a MergeError when unstacking datasets whose variables only have a single dimension after stacking with to_stacked_array.", "technical_keywords": "xarray, Dataset, DataArray, to_stacked_array, to_unstacked_dataset, MergeError, sample_dims, compat='override'", "error_symptoms": "MergeError: conflicting values for variable 'y' on objects to be combined", "domain_area": "data_processing", "instance_id": "pydata__xarray-3305"}, {"problem_type": "regression bug", "affected_modules": "requests, requests.models", "core_issue": "Binary payload requests fail in version 2.9 due to to_native_string being called on byte objects", "technical_keywords": "put, data, to_native_string, requests.put, bytes, unicode, encode", "error_symptoms": "Request with binary data raises exception or fails to send", "domain_area": "web_api", "instance_id": "pydata__xarray-3677"}, {"problem_type": "bug", "affected_modules": "xarray.core.merge", "core_issue": "When merging datasets with combine_attrs='override', the merged object's attrs references the first source object's attrs instead of making a copy, causing attribute changes in the merged output to affect the original source.", "technical_keywords": "merge, combine_attrs, override, attrs, xarray.Dataset, variable_attrs, dict, xarray.core.merge", "error_symptoms": "Changing an attribute in the merged dataset also changes it in the source dataset", "domain_area": "data_handling", "instance_id": "pydata__xarray-3993"}, {"problem_type": "bug", "affected_modules": "xarray.where", "core_issue": "xr.where fails when the second argument is a scalar and keep_attrs is set to True, resulting in an IndexError due to improper attribute access", "technical_keywords": "xr.where, xarray.DataArray, keep_attrs, lambda attrs, IndexError", "error_symptoms": "IndexError: list index out of range", "domain_area": "data_analysis", "instance_id": "pydata__xarray-4075"}, {"problem_type": "feature gap", "affected_modules": "xarray.coding.variables, xarray.conventions, pydap, netcdf-c", "core_issue": "xarray does not handle the OPeNDAP/netCDF-c hack of storing signed bytes using _Unsigned=False, resulting in incorrect interpretation of signed byte variables when using the pydap engine", "technical_keywords": "xarray, pydap, netcdf-c, _Unsigned attribute, open_dataset, engine, SerializationWarning, coding.variables.py, conventions.py, thredds server", "error_symptoms": "With engine='pydap', signed byte variables are read as unsigned values and a SerializationWarning is emitted about ignoring the _Unsigned attribute; negative values are not returned as expected", "domain_area": "scientific data access", "instance_id": "pydata__xarray-4094"}, {"problem_type": "bug", "affected_modules": "xarray.DataArray, xarray.where, numpy", "core_issue": "Using xr.where on a DataArray with attributes returns a new DataArray that does not preserve the original attributes, and may also change the dtype.", "technical_keywords": "xr.where, DataArray.attrs, apply_ufunc, keep_attrs, np.int8, np.int64", "error_symptoms": "Resulting DataArray has empty attributes and its dtype is not conserved", "domain_area": "scientific data analysis", "instance_id": "pydata__xarray-4356"}, {"problem_type": "bug", "affected_modules": "xarray.DataArrayRolling", "core_issue": "The 'center' keyword argument is ignored when manually iterating over a DataArrayRolling object, resulting in non-centered windows", "technical_keywords": "xarray.DataArrayRolling, rolling, center kwarg, mean, window iterator", "error_symptoms": "Manual iteration produces windows that are not center-justified despite 'center=True', yielding shifted results compared to automatic method", "domain_area": "data_analysis", "instance_id": "pydata__xarray-4629"}, {"problem_type": "bug", "affected_modules": "requests.api, requests.sessions, requests.adapters, requests.packages.urllib3.connectionpool, httplib", "core_issue": "Using a unicode string for the HTTP method argument in requests.request leads to UnicodeDecodeError in Python 2.7.2", "technical_keywords": "requests.request, method argument, unicode string, Python 2.7, sessions.py, .upper(), UnicodeDecodeError, httplib", "error_symptoms": "UnicodeDecodeError: 'ascii' codec can't decode byte 0xcf in position 140: ordinal not in range(128)", "domain_area": "networking, web_requests", "instance_id": "pydata__xarray-4687"}, {"problem_type": "bug", "affected_modules": "xarray.polyval", "core_issue": "polyval returns incorrect results when using timedelta64 coordinates in the latest development version compared to previous stable version", "technical_keywords": "xarray.polyval, timedelta64, datetime64, DataArray, polyfit_coefficients", "error_symptoms": "polyval output contains very large nonsensical values instead of expected polynomial results when input coordinates are timedelta64", "domain_area": "data_analysis", "instance_id": "pydata__xarray-4695"}, {"problem_type": "false positive", "affected_modules": "pylint.unused-import", "core_issue": "Pylint reports an unused-import warning for a module used only in a type comment", "technical_keywords": "pylint, unused-import, abc, ABC, type comment, W0611", "error_symptoms": "W0611: Unused import abc (unused-import)", "domain_area": "static code analysis", "instance_id": "pydata__xarray-4966"}, {"problem_type": "bug", "affected_modules": "xr.core.dataset.DataVariables, xr.Dataset, xr.core.dataset, xr.core", "core_issue": "After index refactor, there can be more _coord_names than _variables, breaking the assumption in DataVariables that data variables are those in _variables and not in _coord_names, leading to errors in Dataset operations such as repr", "technical_keywords": "xr.core.dataset.DataVariables, ds._dataset._variables, ds._dataset._coord_names, set_index, reset_index, ValueError, __len__", "error_symptoms": "ValueError: __len__() should return >= 0", "domain_area": "data_processing", "instance_id": "pydata__xarray-6461"}, {"problem_type": "bug", "affected_modules": "xr.combine_by_coords, xarray.Dataset", "core_issue": "xr.combine_by_coords raises ValueError when identical coordinate dimensions are non-monotonic, even though documentation states monotonicity should not be required for coordinates that do not vary between datasets", "technical_keywords": "xr.combine_by_coords, xarray.Dataset, coords, data_vars, ValueError, monotonic indexes, dimension y", "error_symptoms": "ValueError: Resulting object does not have monotonic global indexes along dimension y", "domain_area": "data analysis", "instance_id": "pydata__xarray-6599"}, {"problem_type": "bug", "affected_modules": "xarray.Dataset, xarray.stack", "core_issue": "Stacking coordinates using xarray.stack changes the dtype of int32 coordinates to int64 in the resulting MultiIndex", "technical_keywords": "xarray.Dataset, xarray.stack, MultiIndex, np.array, dtype, int32, int64, coords", "error_symptoms": "The dtype of the 'a' coordinate changes from 'i4' (int32) to 'i8' (int64), leading to comparison ds['a'].values.dtype == ds.stack(b=('a',))['a'].values.dtype returning False", "domain_area": "data_processing", "instance_id": "pydata__xarray-6721"}, {"problem_type": "bug", "affected_modules": "pylint.cli, pylint.options", "core_issue": "The short option '-v' for verbose requires an argument, while the long option '--verbose' does not, leading to inconsistent option behavior", "technical_keywords": "pylint, verbose option, -v, --verbose, argument parsing, command line options", "error_symptoms": "pylint: error: argument --verbose/-v: expected one argument", "domain_area": "command_line_interface", "instance_id": "pydata__xarray-6744"}, {"problem_type": "configuration_issue", "affected_modules": "pylint.similarity_checker, rcfile", "core_issue": "Setting min-similarity-lines to 0 erroneously causes every code line to be flagged as duplicate rather than disabling the check", "technical_keywords": "min-similarity-lines, rcfile, R0801, pylint, flake8", "error_symptoms": "Excessive duplicate code errors for every line when min-similarity-lines is set to 0", "domain_area": "static_code_analysis", "instance_id": "pydata__xarray-6938"}, {"problem_type": "feature request", "affected_modules": "pyreverse", "core_issue": "pyreverse does not recognize or display Python PEP 484 type hints in UML generation, leading to missing attribute type annotations", "technical_keywords": "pyreverse, PEP 484, type hints, UML, pylint, astroid, Python 3.6", "error_symptoms": "UML diagrams generated by pyreverse omit attribute type information defined by type hints", "domain_area": "static analysis, code visualization", "instance_id": "pydata__xarray-6992"}, {"problem_type": "feature request", "affected_modules": "pylint.data_storage, pylint.file_paths, pylint.home_directory_management", "core_issue": "Pylint stores its data files in a .pylint.d directory in the user's home folder rather than following the XDG Base Directory Specification for data storage locations", "technical_keywords": "XDG Base Directory Specification, .pylint.d, $HOME, $HOME/.local/share, $HOME/.config, $HOME/.cache, directory management, data storage paths", "error_symptoms": "User's home directory cluttered with .pylint.d directory", "domain_area": "tooling and configuration management", "instance_id": "pydata__xarray-7229"}, {"problem_type": "bug", "affected_modules": "xarray.Dataset, xarray.core.dataset", "core_issue": "The swap_dims() method can unexpectedly modify the original Dataset object, specifically by changing the .dims attribute of a data variable that has been swapped into being a dimension coordinate.", "technical_keywords": "swap_dims, Dataset, dims, data_vars, dimension coordinate, rename_dims, reset_index, reset_coords", "error_symptoms": "After applying .swap_dims(), the original or intermediate Dataset object's 'lev' variable changes its dimension from 'z' to 'lev', even if the Dataset otherwise appears unchanged.", "domain_area": "data_analysis", "instance_id": "pydata__xarray-7233"}, {"problem_type": "performance bug", "affected_modules": "xarray.core.dataset, xarray.core.variable, xarray.core.common, xarray.core.indexing, xarray.backends.zarr, zarr.core, zarr.storage, fsspec.mapping", "core_issue": "Accessing the chunks attribute of a zarr-backed xarray dataset loads the entire array into memory instead of just inspecting metadata", "technical_keywords": "xarray.Dataset.chunks, get_chunksizes, Variable.values, _as_array_or_item, ZarrArrayWrapper, FSStore.getitems, fsspec, lazy loading, encoding attribute", "error_symptoms": "Entire dataset loaded into memory upon accessing chunks attribute; process interruption (KeyboardInterrupt) due to excessive memory or long running data load", "domain_area": "scientific data access", "instance_id": "pydata__xarray-7393"}, {"problem_type": "bug", "affected_modules": "pylint.run, pylint.lint.run, pylint.lint.parallel", "core_issue": "pylint crashes on Kubernetes when --jobs=0 and _query_cpu() returns 0, causing multiprocessing Pool initialization to fail due to zero processes", "technical_keywords": "pylint, --jobs, _query_cpu, multiprocessing.Pool, cpu.cfs_quota_us, cpu.cfs_period_us, cpu.shares, check_parallel", "error_symptoms": "ValueError: Number of processes must be at least 1", "domain_area": "static_code_analysis", "instance_id": "pylint-dev__pylint-4551"}, {"problem_type": "API inconsistency", "affected_modules": "xarray.DataArray.integrate, xarray.Dataset.integrate, xarray.DataArray.differentiate, xarray.Dataset.differentiate", "core_issue": "The integrate and differentiate methods use inconsistent argument names ('dim' for DataArray and 'coord' for Dataset), causing confusion for users", "technical_keywords": "DataArray.integrate, Dataset.integrate, DataArray.differentiate, Dataset.differentiate, dim, coord, API syntax, deprecation cycle", "error_symptoms": "User confusion due to inconsistent argument naming between DataArray and Dataset methods", "domain_area": "scientific data analysis", "instance_id": "pylint-dev__pylint-4604"}, {"problem_type": "bug", "affected_modules": "xarray.where, xarray.core.coordinates, xarray.tutorial", "core_issue": "Using xr.where with keep_attrs=True causes coordinate attributes to be overwritten by variable attributes instead of preserving them", "technical_keywords": "xr.where, keep_attrs, coordinates, attrs, xarray, #6461, lambda, merge functions", "error_symptoms": "Coordinate attributes are replaced with variable attributes, resulting in incorrect metadata for coordinates", "domain_area": "data_analysis", "instance_id": "pylint-dev__pylint-4661"}, {"problem_type": "bug", "affected_modules": "pylint, recursive mode, ignore options", "core_issue": "Pylint fails to exclude files and directories specified by ignore, ignore-paths, or ignore-patterns when run with --recursive=y, contrary to documentation", "technical_keywords": "pylint, --recursive, --ignore, --ignore-paths, --ignore-patterns, ignore-patterns, module discovery", "error_symptoms": "Ignored files and directories are still processed and reported in pylint output regardless of ignore settings in recursive mode", "domain_area": "static code analysis", "instance_id": "pylint-dev__pylint-4970"}, {"problem_type": "bug", "affected_modules": "xarray.DataArray.loc, xarray.core.indexing", "core_issue": "Naming a dimension 'method' causes .loc to misinterpret the dimension name as a fill method argument, leading to a ValueError instead of performing label-based indexing", "technical_keywords": "xarray, DataArray, dims, coords, .loc, method, ValueError, label-based indexing", "error_symptoms": "ValueError: Invalid fill method. Expecting pad (ffill), backfill (bfill) or nearest.", "domain_area": "data_analysis", "instance_id": "pylint-dev__pylint-6386"}, {"problem_type": "unexpected behavior", "affected_modules": "pytest, unittest.TestCase", "core_issue": "tearDown method of unittest.TestCase runs for classes decorated with unittest.skip when using pytest --pdb, instead of being skipped", "technical_keywords": "pytest, --pdb, unittest.TestCase, unittest.skip, tearDown, setUp, test_one, NameError", "error_symptoms": "tearDown executes and raises NameError in skipped test class when running pytest with --pdb", "domain_area": "testing", "instance_id": "pylint-dev__pylint-6528"}, {"problem_type": "bug", "affected_modules": "pytest._pytest.logging, caplog", "core_issue": "After caplog.clear() is called, caplog.get_records() becomes detached from caplog.records and no longer reflects new or cleared log records", "technical_keywords": "caplog.get_records, caplog.records, caplog.clear, LogRecord, pytest._pytest.logging", "error_symptoms": "caplog.get_records() returns stale log records and does not match caplog.records after caplog.clear(), leading to assertion failures in tests", "domain_area": "automated_testing", "instance_id": "pylint-dev__pylint-6903"}, {"problem_type": "bug", "affected_modules": "pylint.__init__, sys.path, runpy", "core_issue": "pylint unconditionally removes the first item from sys.path when running via runpy, potentially deleting necessary custom paths without validation", "technical_keywords": "pylint, sys.path, runpy.run_module, __main__, alter_sys, os.getcwd", "error_symptoms": "Extension or bundled libraries fail to load due to missing entries in sys.path after execution", "domain_area": "application_execution_environment", "instance_id": "pylint-dev__pylint-7080"}, {"problem_type": "bug", "affected_modules": "pylint.config.argument, pylint.config.config_initialization, pylint.config.arguments_manager", "core_issue": "Regular expressions in bad-name-rgxs containing commas are incorrectly split, causing invalid patterns and crashes during parsing.", "technical_keywords": "bad-name-rgxs, pylint, regular expressions, config parser, _regexp_csv_transfomer, re.compile, configuration file", "error_symptoms": "Crash with re.error: missing ), unterminated subpattern at position 0", "domain_area": "static code analysis", "instance_id": "pylint-dev__pylint-7277"}, {"problem_type": "compatibility issue", "affected_modules": "pytest, conftest", "core_issue": "Upgrading to pytest 5.1.2 causes path casing to be converted to lowercase on Windows, resulting in ImportError for conftest due to mismatched folder casing", "technical_keywords": "pytest, conftest.py, ImportError, ModuleNotFoundError, path casing, Windows", "error_symptoms": "ImportError while loading conftest, ModuleNotFoundError: No module named 'python'", "domain_area": "test_automation", "instance_id": "pylint-dev__pylint-8898"}, {"problem_type": "bug", "affected_modules": "pytest.reports, pytest.nodes, pytest.python", "core_issue": "Test report headlines incorrectly replace '.[' with '[' due to string replacement in getmodpath function", "technical_keywords": "pytest, getmodpath, reportinfo, test discovery, headline, string.replace", "error_symptoms": "The headline in pytest test report displays '[.[' instead of expected '[..[', causing confusion and breaking vscode-python test discovery", "domain_area": "testing_framework", "instance_id": "pytest-dev__pytest-10051"}, {"problem_type": "bug", "affected_modules": "pytest.mark, class inheritance, pytestmark attribute handling, metaclass resolution", "core_issue": "When inheriting from multiple base classes with pytest markers, only the marker from the first base class in MRO is retained for the derived class; markers from other base classes are lost unless a custom metaclass is used to merge them.", "technical_keywords": "pytest.mark, pytestmark, class inheritance, metaclass, BaseMeta, MRO, Foo, Bar, TestDings, itertools.chain.from_iterable, getattr, __metaclass__", "error_symptoms": "Derived test classes only receive one marker (from the first base class in MRO), missing markers from other base classes unless a metaclass workaround is applied", "domain_area": "test_frameworks", "instance_id": "pytest-dev__pytest-10081"}, {"problem_type": "bug", "affected_modules": "pylint.command_line, pylint.config, pylint.runners", "core_issue": "`ignore-paths` configuration is ignored when running pylint with `--recursive=y`, causing files in ignored paths to be linted", "technical_keywords": "pylint, ignore-paths, pyproject.toml, --recursive, command line options, configuration file", "error_symptoms": "Modules matching ignore-paths (e.g. src\\gen\\*) are checked and reported in pylint output despite being listed to ignore; unexpected lint errors and warnings for ignored files", "domain_area": "static_code_analysis", "instance_id": "pytest-dev__pytest-10356"}, {"problem_type": "behavioral regression", "affected_modules": "unittest.TestCase, pytest", "core_issue": "tearDown is executed for skipped unittest.TestCase tests when running pytest with --pdb, leading to errors", "technical_keywords": "unittest.TestCase, tearDown, setUp, unittest.skip, pytest, --pdb, NameError", "error_symptoms": "tearDown triggered on a skipped test, causing NameError: name 'xxx' is not defined when running pytest --pdb", "domain_area": "testing framework", "instance_id": "pytest-dev__pytest-5262"}, {"problem_type": "bug", "affected_modules": "src/_pytest/setuponly.py, pytest, _show_fixture_action", "core_issue": "Using str() on a bytes parameter in fixture setup causes BytesWarning when ByteWarning is enabled", "technical_keywords": "pytest, _show_fixture_action, fixturedef.cached_param, str(), saferepr, BytesWarning, --setup-show", "error_symptoms": "BytesWarning: str() on a bytes instance during test setup", "domain_area": "test_framework", "instance_id": "pytest-dev__pytest-5631"}, {"problem_type": "feature deficiency", "affected_modules": "pytest, pytest-xdist", "core_issue": "Exception serialization performed by pytest-xdist does not include chained exceptions, resulting in incomplete traceback information when running tests in parallel.", "technical_keywords": "pytest, pytest-xdist, exception chaining, exception serialization, ValueError, traceback", "error_symptoms": "Test failures only display the final exception without showing the full chain of exceptions and their causes when using pytest-xdist; missing context for debugging.", "domain_area": "test automation", "instance_id": "pytest-dev__pytest-5787"}, {"problem_type": "bug", "affected_modules": "_pytest.capture.EncodedFile, youtube_dl.YoutubeDL, youtube_dl.utils.write_string", "core_issue": "_pytest.capture.EncodedFile reports its mode as binary ('rb+'), but its write() method only accepts str and raises an exception when passed bytes, causing failure when modules like youtube-dl log to pytest output streams and expect binary mode to accept bytes.", "technical_keywords": "_pytest.capture.EncodedFile, mode, write, youtube_dl, YoutubeDL.extract_info, utils.write_string, TypeError", "error_symptoms": "TypeError: write() argument must be str, not bytes", "domain_area": "testing_frameworks", "instance_id": "pytest-dev__pytest-5809"}, {"problem_type": "feature bug", "affected_modules": "_pytest.pastebin", "core_issue": "Using lexer=python3 in the --pastebin feature causes HTTP 400 errors when submitting pytest output to bpaste.net; changing lexer to text resolves the issue", "technical_keywords": "--pastebin, bpaste.net, lexer, python3, text, HTTPError, urllib.request.urlopen, pytest", "error_symptoms": "HTTP Error 400: Bad Request", "domain_area": "testing infrastructure", "instance_id": "pytest-dev__pytest-5840"}, {"problem_type": "bug", "affected_modules": "src/_pytest/skipping.py, pytest_runtest_makereport", "core_issue": "Using --runxfail causes skip location reporting to show the internal skipping.py file instead of the test item when tests are marked as skip or skipif", "technical_keywords": "pytest.mark.skip, pytest.mark.skipif, skip location, --runxfail, pytest -rs, pytest_runtest_makereport, skipping.py", "error_symptoms": "SKIPPED message reports src/_pytest/skipping.py line instead of actual test location", "domain_area": "testing_framework", "instance_id": "pytest-dev__pytest-6197"}, {"problem_type": "regression bug", "affected_modules": "pytest", "core_issue": "pytest 5.2.3 erroneously collects and imports __init__.py files, causing errors if they contain code not meant for import", "technical_keywords": "pytest, __init__.py, test discovery, tox, test collection, AssertionError", "error_symptoms": "ERROR collecting foobar/__init__.py, AssertionError, commands failed with exit code 2", "domain_area": "test automation", "instance_id": "pytest-dev__pytest-6202"}, {"problem_type": "bug", "affected_modules": "sklearn.feature_extraction.text.CountVectorizer", "core_issue": "get_feature_names method of CountVectorizer raises NotFittedError even when vocabulary parameter is provided and transform has not been called", "technical_keywords": "CountVectorizer, get_feature_names, vocabulary, NotFittedError, transform, _validate_vocabulary, vocabulary_", "error_symptoms": "NotFittedError: CountVectorizer - Vocabulary wasn't fitted.", "domain_area": "machine_learning", "instance_id": "pytest-dev__pytest-7205"}, {"problem_type": "regression", "affected_modules": "pytest.capturing, _pytest.capture.CaptureFixture", "core_issue": "In pytest 6.0.0rc1, capfd.readouterr() converts carriage return characters ('\\r') to newline characters ('\\n'), causing tests that check for '\\r' in output to fail.", "technical_keywords": "capfd.readouterr, CaptureFixture, ProgressIndicatorPercent, print, carriage return, newline, AssertionError", "error_symptoms": "AssertionError: assert ' 0%\\n' == ' 0%\\r'; output does not end with '\\r' as expected but with '\\n'", "domain_area": "test_framework", "instance_id": "pytest-dev__pytest-7236"}, {"problem_type": "regression", "affected_modules": "pytest, test collection", "core_issue": "Symlinked directories in test directories are skipped and not collected due to follow_symlinks=False introduced in pytest 6.1.0", "technical_keywords": "pytest, symlink, follow_symlinks, test collection, directory traversal, b473e515bc57ff1133fe650f1e7e6d7e22e5d841", "error_symptoms": "Symlinked directories are not included in test collection; tests in those directories are not discovered or run", "domain_area": "testing", "instance_id": "pytest-dev__pytest-7324"}, {"problem_type": "bug", "affected_modules": "sklearn.metrics.cluster.supervised, fowlkes_mallows_score", "core_issue": "fowlkes_mallows_score computation causes RuntimeWarning and invalid output when pk and qk are large, due to integer overflow in np.sqrt(pk * qk)", "technical_keywords": "fowlkes_mallows_score, tk, pk, qk, np.sqrt, int_scalars, RuntimeWarning, nan", "error_symptoms": "RuntimeWarning: overflow encountered in int_scalars, result is nan instead of a number", "domain_area": "machine_learning", "instance_id": "pytest-dev__pytest-7432"}, {"problem_type": "bug", "affected_modules": "_pytest.compat, _pytest.python, _pytest.fixtures, pluggy, unittest.mock.patch", "core_issue": "Using @patch with a numpy array as the 'new' value causes pytest's collection phase to fail with ValueError due to incorrect boolean evaluation when checking 'p.new in sentinels'.", "technical_keywords": "@patch, np.array, pytest, pluggy, getfuncargnames, num_mock_patch_args, sentinels, ValueError", "error_symptoms": "ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all() when collecting tests", "domain_area": "testing", "instance_id": "pytest-dev__pytest-7490"}, {"problem_type": "interpreter crash", "affected_modules": "Expression.compile, Python/compile.c", "core_issue": "An assertion fails in compiler_nameop when compiling certain expressions, causing the Python interpreter to abort on debug builds of Python 3.8 and above", "technical_keywords": "Expression.compile, compiler_nameop, Python/compile.c, _PyUnicode_EqualToASCIIString, assertion failure, debug build", "error_symptoms": "Assertion error and core dump when compiling expressions like 'False', abort (core dumped)", "domain_area": "programming_language_runtime", "instance_id": "pytest-dev__pytest-7521"}, {"problem_type": "feature limitation", "affected_modules": "SparseCoder, Lasso", "core_issue": "SparseCoder does not provide a way for users to specify 'max_iter' or other Lasso parameters, causing convergence warnings", "technical_keywords": "SparseCoder, Lasso, algorithm, lasso_cd, max_iter, __init__", "error_symptoms": "warning about estimator not converging in plot_sparse_coding.py", "domain_area": "machine_learning", "instance_id": "pytest-dev__pytest-7571"}, {"problem_type": "missing feature, documentation bug", "affected_modules": "sklearn.linear_model.RidgeClassifierCV", "core_issue": "RidgeClassifierCV does not support the store_cv_values parameter despite documentation claiming otherwise", "technical_keywords": "RidgeClassifierCV, store_cv_values, cv_values_, fit, __init__, TypeError", "error_symptoms": "TypeError: __init__() got an unexpected keyword argument 'store_cv_values'", "domain_area": "machine_learning", "instance_id": "pytest-dev__pytest-7982"}, {"problem_type": "bug", "affected_modules": "sklearn.base.clone", "core_issue": "The clone function fails when estimator parameters are given as classes instead of instances, causing a TypeError due to inappropriate invocation of get_params on a class object.", "technical_keywords": "clone, StandardScaler, get_params, estimator, type, sklearn.base, TypeError", "error_symptoms": "TypeError: get_params() missing 1 required positional argument: 'self'", "domain_area": "machine_learning", "instance_id": "pytest-dev__pytest-8399"}, {"problem_type": "regression bug", "affected_modules": "pytest.caplog", "core_issue": "caplog fixture fails to restore log level after the test ends in pytest 6.0", "technical_keywords": "caplog, set_level, handler.level, pytest", "error_symptoms": "Log level remains set from previous test, expected reset but observed persisting value", "domain_area": "testing", "instance_id": "scikit-learn__scikit-learn-10297"}, {"problem_type": "regression", "affected_modules": "pytest, pytest.mark.xfail, request.node.add_marker", "core_issue": "Dynamically adding an xfail marker during test execution with request.node.add_marker no longer causes failures to be treated as expected failures in pytest 6.x; instead, the test fails normally.", "technical_keywords": "pytest, xfail, request.node, add_marker, mark.xfail, AssertionError", "error_symptoms": "Tests which dynamically add an xfail marker fail with AssertionError, instead of being reported as xfailed.", "domain_area": "test_automation", "instance_id": "scikit-learn__scikit-learn-10844"}, {"problem_type": "bug", "affected_modules": "sklearn.linear_model.HuberRegressor, sklearn.linear_model.huber._huber_loss_and_gradient", "core_issue": "HuberRegressor.fit raises TypeError when input predictor X has dtype bool due to unsupported numpy boolean negative operator usage in gradient computation", "technical_keywords": "HuberRegressor, fit, X_bool, numpy.bool_, _huber_loss_and_gradient, axis0_safe_slice, TypeError, sklearn.linear_model, numpy.ndarray", "error_symptoms": "TypeError: The numpy boolean negative, the `-` operator, is not supported, use the `~` operator or the logical_not function instead.", "domain_area": "machine_learning", "instance_id": "scikit-learn__scikit-learn-10908"}, {"problem_type": "regression bug", "affected_modules": "_pytest.unittest", "core_issue": "From v6.2.0, unittest setUpClass fixtures generated by pytest are no longer treated as private (underscore-prefixed), causing them to appear in fixture listings without docstrings and breaking CI scripts checking for undocumented fixtures.", "technical_keywords": "pytest, unittest, setUpClass, unittest_setUpClass_fixture_Tests, fixture, --fixtures, class scope, docstring", "error_symptoms": "Fixtures for unittest setUpClass appear in pytest fixture list without underscore prefix and without docstring, causing CI checks to fail", "domain_area": "test automation", "instance_id": "scikit-learn__scikit-learn-11310"}, {"problem_type": "bug", "affected_modules": "sklearn.tree.export, export_text", "core_issue": "export_text raises IndexError when used on a decision tree fitted with a single feature", "technical_keywords": "export_text, DecisionTreeClassifier, feature_names, IndexError, list index out of range", "error_symptoms": "IndexError: list index out of range", "domain_area": "machine_learning", "instance_id": "scikit-learn__scikit-learn-11578"}, {"problem_type": "bug", "affected_modules": "sklearn.linear_model.logistic._log_reg_scoring_path, sklearn.linear_model.LogisticRegressionCV, sklearn.linear_model.LogisticRegression", "core_issue": "LogisticRegressionCV with multi_class='multinomial' incorrectly uses OvR scoring for probabilistic scorers due to not passing the multi_class argument when initializing the LogisticRegression instance in _log_reg_scoring_path.", "technical_keywords": "LogisticRegressionCV, LogisticRegression, multi_class, multinomial, OvR, _log_reg_scoring_path, predict_proba, neg_log_loss, decision_function, softmax", "error_symptoms": "Scores for probabilistic scorers like neg_log_loss do not match multinomial predictions; instead, they reflect OvR calculations even when multinomial is specified", "domain_area": "machine_learning", "instance_id": "scikit-learn__scikit-learn-12585"}, {"problem_type": "bug", "affected_modules": "sklearn.mixture.GaussianMixture, sklearn.mixture", "core_issue": "fit_predict and predict produce inconsistent labels when n_init > 1 in GaussianMixture due to differing initializations across methods", "technical_keywords": "GaussianMixture, fit_predict, predict, n_init, assert_array_equal, sklearn.mixture", "error_symptoms": "Arrays are not equal; AssertionError with high mismatch rate between predict and fit_predict cluster labels", "domain_area": "machine_learning", "instance_id": "scikit-learn__scikit-learn-12682"}, {"problem_type": "bug", "affected_modules": "VotingClassifier", "core_issue": "fit method fails when sample_weight is provided and one of the estimators is set to None, due to lack of NoneType check", "technical_keywords": "VotingClassifier, fit, sample_weight, set_params, estimators, NoneType", "error_symptoms": "AttributeError: 'NoneType' object has no attribute 'fit'", "domain_area": "machine_learning", "instance_id": "scikit-learn__scikit-learn-12973"}, {"problem_type": "bug", "affected_modules": "sklearn.linear_model.LassoLarsIC, sklearn.linear_model.least_angle", "core_issue": "The LassoLarsIC class allows the copy_X parameter to be set both during initialization and in the fit method, leading to unintended overwriting and unpredictable behaviour for users", "technical_keywords": "LassoLarsIC, copy_X, fit, least_angle.py, estimator", "error_symptoms": "User-defined copy_X value at initialization is silently ignored if fit is called without specifying copy_X, resulting in mixed and invisible behaviour", "domain_area": "machine_learning", "instance_id": "scikit-learn__scikit-learn-13124"}, {"problem_type": "feature request", "affected_modules": "sklearn.pipeline.Pipeline", "core_issue": "The Pipeline class does not implement the __len__ method, causing errors when calling len(pipe) or using slice indexing like pipe[:len(pipe)].", "technical_keywords": "Pipeline, __len__, __getitem__, SelectKBest, SVC, f_regression", "error_symptoms": "TypeError: object of type 'Pipeline' has no len(), error when using len(pipe) or pipe[:len(pipe)]", "domain_area": "machine_learning", "instance_id": "scikit-learn__scikit-learn-13135"}, {"problem_type": "enhancement", "affected_modules": "show_versions, issue_template", "core_issue": "joblib is missing from dependencies in show_versions and issue template for sklearn versions greater than 0.20", "technical_keywords": "joblib, show_versions, dependencies, sklearn, issue_template", "error_symptoms": "joblib version information is not displayed or recorded, leading to incomplete environment reports", "domain_area": "software_development_tools", "instance_id": "scikit-learn__scikit-learn-13142"}, {"problem_type": "bug", "affected_modules": "sklearn.linear_model.logistic, LogisticRegressionCV", "core_issue": "An IndexError occurs when fitting LogisticRegressionCV with refit=False, due to an attempt to index arrays with incompatible dimensions during result aggregation", "technical_keywords": "LogisticRegressionCV, fit, refit, coefs_paths, best_indices, np.mean, cv, solver, IndexError", "error_symptoms": "IndexError: too many indices for array", "domain_area": "machine_learning", "instance_id": "scikit-learn__scikit-learn-13328"}, {"problem_type": "bug", "affected_modules": "sklearn.preprocessing.KBinsDiscretizer, sklearn.preprocessing._discretization.py, numpy.digitize", "core_issue": "KBinsDiscretizer with strategy='kmeans' produces unsorted bin_edges, causing np.digitize to fail with a ValueError", "technical_keywords": "KBinsDiscretizer, strategy='kmeans', fit_transform, bin_edges, np.digitize, ValueError, sklearn.preprocessing, test_nonuniform_strategies", "error_symptoms": "ValueError: bins must be monotonically increasing or decreasing", "domain_area": "machine_learning, data_preprocessing", "instance_id": "scikit-learn__scikit-learn-13439"}, {"problem_type": "feature enhancement", "affected_modules": "sklearn.ensemble.IsolationForest, sklearn.ensemble.BaseBagging, sklearn.ensemble.BaseForest", "core_issue": "The warm_start parameter is supported through inheritance by IsolationForest but is not exposed in its __init__(), making incremental training unintuitive and undocumented", "technical_keywords": "warm_start, IsolationForest, BaseBagging, __init__, n_estimators, RandomForestClassifier, fit", "error_symptoms": "Users are unaware that warm_start can be used with IsolationForest, requiring source code inspection and manual parameter setting", "domain_area": "machine_learning", "instance_id": "scikit-learn__scikit-learn-13496"}, {"problem_type": "feature request", "affected_modules": "sklearn.model_selection.BaseSearchCV, sklearn.model_selection.GridSearchCV", "core_issue": "There is no attribute to directly retrieve the time taken to refit the best model on full data after hyperparameter search, especially when using parallel processing", "technical_keywords": "BaseSearchCV, GridSearchCV, RandomForestClassifier, cv_results_, mean_fit_time, mean_score_time, n_jobs, refit_time_", "error_symptoms": "Unable to obtain the refit time, especially when n_jobs is not 1", "domain_area": "machine_learning", "instance_id": "scikit-learn__scikit-learn-13779"}, {"problem_type": "bug", "affected_modules": "xarray.core.coarsen, xarray.core.dataset", "core_issue": "The coarsen.construct method demotes non-dimensional coordinates to variables instead of retaining their status as coordinates after constructing new dimensions.", "technical_keywords": "xarray, DataArray, Dataset, coarsen, coarsen.construct, assign_coords, non-dimensional coordinates, construct", "error_symptoms": "Coordinates that were non-dimensional before applying coarsen.construct are no longer coordinates but become variables in the resulting Dataset.", "domain_area": "scientific_data_analysis", "instance_id": "scikit-learn__scikit-learn-14053"}, {"problem_type": "bug, documentation issue", "affected_modules": "sklearn.model_selection.StratifiedKFold", "core_issue": "The shuffle parameter does not shuffle samples within each stratum, but only shuffles the order of batches; documentation claims per-stratum shuffling, misleading users", "technical_keywords": "StratifiedKFold, shuffle, random_state, split, n_splits, cross-validation", "error_symptoms": "Batches have same sample pairs regardless of shuffle setting; only batch order changes, not composition; shuffle is ineffective for cross-validation", "domain_area": "machine_learning", "instance_id": "scikit-learn__scikit-learn-14087"}, {"problem_type": "bug", "affected_modules": "sklearn.feature_extraction.text.strip_accents_unicode, sklearn.feature_extraction.text.CountVectorizer", "core_issue": "strip_accents_unicode does not remove accents from strings already in NFKD form, leaving combining characters unstripped", "technical_keywords": "strip_accents_unicode, CountVectorizer, NFKD, combining tilde, unicode normalization", "error_symptoms": "strip_accents_unicode fails to strip accents from visually identical strings in NFKD form", "domain_area": "natural language processing", "instance_id": "scikit-learn__scikit-learn-14141"}, {"problem_type": "bug", "affected_modules": "sklearn.svm.base, _sparse_fit", "core_issue": "SVR fit with sparse input raises ZeroDivisionError when support_vectors_ is empty", "technical_keywords": "sklearn.svm.SVR, fit, _sparse_fit, support_vectors_, dual_coef_indices, sp.csr_matrix, ZeroDivisionError", "error_symptoms": "ZeroDivisionError: float division by zero during fit with sparse data", "domain_area": "machine_learning", "instance_id": "scikit-learn__scikit-learn-14496"}, {"problem_type": "bug", "affected_modules": "sklearn.model_selection._validation, sklearn.multioutput.MultiOutputClassifier", "core_issue": "cross_val_predict with method='predict_proba' incorrectly accesses classes_ attribute on MultiOutputClassifier instead of its estimators", "technical_keywords": "cross_val_predict, predict_proba, MultiOutputClassifier, estimator.classes_, estimators_, AttributeError", "error_symptoms": "AttributeError: 'MultiOutputClassifier' object has no attribute 'classes_'", "domain_area": "machine_learning", "instance_id": "scikit-learn__scikit-learn-14629"}, {"problem_type": "bug", "affected_modules": "sklearn.cluster.optics_, sklearn.neighbors.base", "core_issue": "The min_samples parameter passed as a float is not converted to an integer before being used to instantiate the NearestNeighbors class, causing a TypeError.", "technical_keywords": "OPTICS, NearestNeighbors, min_samples, compute_optics_graph, fit, n_neighbors, round, int, numpy.float64", "error_symptoms": "TypeError: n_neighbors does not take <class 'numpy.float64'> value, enter integer value", "domain_area": "machine_learning", "instance_id": "scikit-learn__scikit-learn-14710"}, {"problem_type": "bug", "affected_modules": "sklearn.metrics._ranking, sklearn.metrics.roc_curve", "core_issue": "roc_curve can return thresholds greater than 1 when using probability estimates due to improper threshold augmentation logic", "technical_keywords": "roc_curve, thresholds, probability estimates, fpr, tpr, np.logical_or, test_roc_curve_with_probablity_estimates", "error_symptoms": "roc_curve returns threshold values greater than 1 despite input scores being probabilities in [0, 1]", "domain_area": "machine_learning, model_evaluation", "instance_id": "scikit-learn__scikit-learn-14894"}, {"problem_type": "feature request", "affected_modules": "sklearn.impute.IterativeImputer", "core_issue": "IterativeImputer lacks a fill_value parameter to specify the constant used for initial imputation when initial_strategy is set to constant", "technical_keywords": "IterativeImputer, initial_strategy, fill_value, SimpleImputer, np.nan", "error_symptoms": "Unable to customize initial constant value for missing data imputation with IterativeImputer", "domain_area": "machine_learning", "instance_id": "scikit-learn__scikit-learn-14983"}, {"problem_type": "bug", "affected_modules": "sklearn.ensemble.HistGradientBoostingClassifier, sklearn.ensemble._hist_gradient_boosting.gradient_boosting, sklearn.metrics.classification, sklearn.metrics.accuracy_score", "core_issue": "When early stopping is enabled, the scorer receives encoded integer y_true and string y_pred, causing a TypeError due to type mismatch when targets are string labels.", "technical_keywords": "HistGradientBoostingClassifier, early stopping, scorer_, score, accuracy_score, _check_early_stopping_scorer, classes_, y_true, y_pred, TypeError", "error_symptoms": "TypeError: '<' not supported between instances of 'str' and 'float' during fit with string labels and early stopping enabled", "domain_area": "machine_learning", "instance_id": "scikit-learn__scikit-learn-15100"}, {"problem_type": "bug", "affected_modules": "sklearn.compose.ColumnTransformer, sklearn.compose._column_transformer", "core_issue": "ColumnTransformer.set_output does not apply the output configuration to the remainder transformer when it is an estimator, resulting in incorrect final transformed results.", "technical_keywords": "ColumnTransformer, set_output, remainder, estimator, VarianceThreshold, make_column_selector, make_column_transformer, fit_transform, transform", "error_symptoms": "When remainder is an estimator, the output after transformation does not match expected results because set_output ignores the remainder transformer.", "domain_area": "machine_learning, data_preprocessing", "instance_id": "scikit-learn__scikit-learn-25102"}, {"problem_type": "bug", "affected_modules": "LaTeX writer, Docutils code role, syntax highlighting, sphinx.highlighting", "core_issue": "New inline code highlighting feature introduced by #10251 inserts unwanted whitespace at the start and end of inline code in LaTeX-generated PDF output", "technical_keywords": "LaTeX, sphinxcode, sphinxupquote, Docutils code role, syntax highlighting, #10251, make latexpdf, index.rst, test_build_latex.py", "error_symptoms": "PDF output from LaTeX includes extra spaces before and after inline code, deviating from expected markup", "domain_area": "documentation generation", "instance_id": "scikit-learn__scikit-learn-25232"}, {"problem_type": "bug", "affected_modules": "sklearn.ensemble.IsolationForest, sklearn.ensemble._iforest", "core_issue": "IsolationForest.fit raises an unexpected feature names warning when contamination parameter is set to non-default value and input is a pandas DataFrame", "technical_keywords": "IsolationForest, fit, predict, contamination, pd.DataFrame, offset_, feature names, warning", "error_symptoms": "X does not have valid feature names, but IsolationForest was fitted with feature names", "domain_area": "machine_learning", "instance_id": "scikit-learn__scikit-learn-25747"}, {"problem_type": "bug", "affected_modules": "sklearn.feature_selection.SequentialFeatureSelector, sklearn.model_selection._validation", "core_issue": "SequentialFeatureSelector does not accept an iterable of splits for the cv parameter, resulting in an IndexError during fit", "technical_keywords": "SequentialFeatureSelector, cv, splits, fit, KNeighborsClassifier, LeaveOneGroupOut, _aggregate_score_dicts, IndexError", "error_symptoms": "IndexError: list index out of range when calling seq.fit(X, y)", "domain_area": "machine_learning", "instance_id": "scikit-learn__scikit-learn-25931"}, {"problem_type": "feature_request", "affected_modules": "toctree, Sphinx documentation, index.rst", "core_issue": "Sphinx toctree warns about references to 'genindex', 'modindex', and 'search' as nonexisting documents when users try to link them in the toctree", "technical_keywords": "toctree, genindex, modindex, search, index.rst, Sphinx, make html, :ref:", "error_symptoms": "WARNING: toctree contains reference to nonexisting document 'genindex', 'modindex', 'search'", "domain_area": "documentation_generation", "instance_id": "scikit-learn__scikit-learn-25973"}, {"problem_type": "bug", "affected_modules": "sphinx.builders.gettext, babel.messages.pofile.PoFileParser, babel.messages.catalog.Message", "core_issue": "Duplicate file locations are unnecessarily recorded for translation messages in .pot files during gettext build", "technical_keywords": "make gettext, Message.__init__, uniqueLocation, babel.messages.pofile.PoFileParser._process_comment, babel.messages.catalog.Message.__init__, sphinx.builders.gettext", "error_symptoms": "Multiple identical file location entries in .pot files for some messages", "domain_area": "documentation_localization", "instance_id": "scikit-learn__scikit-learn-26194"}, {"problem_type": "bug", "affected_modules": "sphinx.directives.code, sphinx.util.dedent, sphinx.literals, literalinclude", "core_issue": "The literalinclude directive with prepend or append strips leading whitespace, resulting in incorrectly indented code examples and no way to match the indentation of prepended content to the included code", "technical_keywords": "literalinclude, prepend, append, dedent, directive, :prepend:, :dedent:, xml, sphinx", "error_symptoms": "Code examples rendered with mismatched or poor indentation; warning 'non-whitespace stripped by dedent' when using :dedent: with prepended content", "domain_area": "documentation_generation", "instance_id": "scikit-learn__scikit-learn-26323"}, {"problem_type": "bug", "affected_modules": "sphinx.ext.autodoc, autodoc_typehints", "core_issue": "Using autodoc_typehints = \"description\" causes autoclass to incorrectly document a return type for the class, even when __init__ has a None return annotation", "technical_keywords": "autodoc_typehints, autoclass, __init__, Sphinx, return annotation, class documentation", "error_symptoms": "Class documentation incorrectly displays a return type specification", "domain_area": "documentation_generation", "instance_id": "scikit-learn__scikit-learn-9288"}, {"problem_type": "bug", "affected_modules": "sphinx.domains.python", "core_issue": "Sphinx raises IndexError when handling type annotations with empty tuple Tuple[()] during documentation build.", "technical_keywords": "Tuple, type annotation, sphinx.domains.python, unparse, result.pop, autodoc", "error_symptoms": "IndexError: pop from empty list", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-10323"}, {"problem_type": "bug", "affected_modules": "sklearn.model_selection._split, RepeatedKFold, RepeatedStratifiedKFold", "core_issue": "RepeatedKFold and RepeatedStratifiedKFold lack a custom __repr__ implementation, resulting in the default object representation being shown instead of a descriptive string", "technical_keywords": "RepeatedKFold, RepeatedStratifiedKFold, __repr__, sklearn.model_selection._split, object representation", "error_symptoms": "repr() outputs the default object memory address instead of a parameterized string for RepeatedKFold and RepeatedStratifiedKFold instances", "domain_area": "machine_learning", "instance_id": "sphinx-doc__sphinx-10435"}, {"problem_type": "bug", "affected_modules": "rst_prolog, domain directive, sphinx-build, toctree", "core_issue": "Setting rst_prolog causes documents with a top-level domain directive heading to not render the heading or include it in the toctree", "technical_keywords": "rst_prolog, :mod:, domain directive, sphinx-build, toctree, conf.py, index.rst, mypackage.rst", "error_symptoms": "Top-level headings with domain directives are missing from the rendered output and toctree when rst_prolog is set", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-10449"}, {"problem_type": "bug", "affected_modules": "Sphinx source-read event, custom extension (my-extension.py), include directive handling", "core_issue": "The source-read event does not effectively modify the content of files included via the reStructuredText include directive, so custom search and replace logic fails to apply to included documents in the final output.", "technical_keywords": "Sphinx, source-read, my-extension.py, subst_vars_replace, include directive, conf.py, .rst file, Sphinx 5.0.2, yocto-vars.py", "error_symptoms": "Included files containing &REPLACE_ME; are not replaced and appear unmodified in the generated HTML output, despite the extension hooking the source-read event for those files.", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-10466"}, {"problem_type": "bug", "affected_modules": "sphinx.ext.inheritance_diagram", "core_issue": "SVG inheritance diagram links are incorrectly resolved when the diagram is embedded in a non-root directory, causing links to result in 404 errors", "technical_keywords": "inheritance-diagram, sphinx.ext.inheritance_diagram, SVG, object tag, link resolution, relative path, 404 error", "error_symptoms": "Links in SVG diagrams lead to 404 pages when diagrams are not in the root directory", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-10614"}, {"problem_type": "documentation bug", "affected_modules": "sphinx, sphinx.ext.napoleon", "core_issue": "Decorating the __init__ method prevents it from appearing in generated Sphinx documentation due to loss of class reference in obj.__globals__", "technical_keywords": "__init__, functools.wraps, sphinx, obj.__globals__, napoleon_include_init_with_doc, cls_is_owner, DistributedTrainerReplicated, __doc__", "error_symptoms": "__init__ method does not show up in documentation despite having a docstring and napoleon_include_init_with_doc enabled", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-10673"}, {"problem_type": "feature request", "affected_modules": "sphinx.domains.cpp", "core_issue": "Sphinx does not support C++ user defined literals, causing documentation parsing errors for code using UDLs", "technical_keywords": "user defined literals, UDL, sphinx, domains.cpp, planck_constant", "error_symptoms": "WARNING: Invalid definition: Expected end of definition. [error at 58]", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-11445"}, {"problem_type": "bug", "affected_modules": "Sphinx autodoc, py:function directive", "core_issue": "Sphinx does not display the default value for positional only arguments in function signatures documented with py:function", "technical_keywords": "Sphinx, py:function, positional only argument, function signature, default value", "error_symptoms": "Default value for positional only argument is missing in rendered documentation", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-11510"}, {"problem_type": "bug", "affected_modules": "sphinx.ext.autodoc, sphinx.ext.intersphinx, sphinx.ext.coverage, sphinx.ext.ifconfig, sphinx.ext.napoleon, sphinx.mock", "core_issue": "Autodoc's mock._make_subclass fails when generating documentation for generic-typed classes due to TypeError in string concatenation with TypeVar", "technical_keywords": "mock._make_subclass, TypeVar, TypeError, generic-typed class, Sphinx, autodoc", "error_symptoms": "TypeError thrown during documentation build when generics are used", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-7440"}, {"problem_type": "bug", "affected_modules": "sphinx.ext.autodoc, sphinx.ext.intersphinx, autodoc_typehints", "core_issue": "autodoc_typehints generates inconsistent hyperlinking for None type hints in signatures and descriptions, failing to link None in signatures to its documentation", "technical_keywords": "autodoc_typehints, sphinx.ext.autodoc, sphinx.ext.intersphinx, type hints, None, int, Python 3.8, conf.py, index.rst", "error_symptoms": "None type hint in signature view does not hyperlink to None's documentation, while description view does", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-7454"}, {"problem_type": "bug", "affected_modules": "sklearn.pipeline.FeatureUnion, sklearn.utils._set_output, pandas.DataFrame", "core_issue": "FeatureUnion fails with ValueError when using pandas transform output with a custom transformer that performs aggregation, due to index length mismatch during output wrapping", "technical_keywords": "FeatureUnion, transform_output, set_config, make_union, BaseEstimator, TransformerMixin, MyTransformer, fit_transform, pandas.DataFrame, groupby, sklearn.utils._set_output._wrap_in_pandas_container, ValueError", "error_symptoms": "ValueError: Length mismatch: Expected axis has 4 elements, new values have 96 elements", "domain_area": "machine_learning", "instance_id": "sphinx-doc__sphinx-7462"}, {"problem_type": "feature request", "affected_modules": "sklearn.feature_selection.SelectKBest, sklearn.compose.ColumnTransformer, _SetOutputMixin, _wrap_in_pandas_container, _wrap_data_with_container", "core_issue": "Transformers that use pandas output do not preserve input DataFrame dtypes, resulting in loss of dtype information such as categorical and float16 types after transformations.", "technical_keywords": "set_output, pandas, SelectKBest, fit_transform, _SetOutputMixin, _wrap_in_pandas_container, astype, dtypes, category, float16, float64", "error_symptoms": "Transformed DataFrame columns like category and float16 are converted to float64, resulting in lost dtype information needed for subsequent analysis.", "domain_area": "machine_learning, data_preprocessing", "instance_id": "sphinx-doc__sphinx-7590"}, {"problem_type": "feature request", "affected_modules": "autodoc_docstring_signature, swig", "core_issue": "autodoc_docstring_signature only extracts the first signature from docstrings of overloaded C++ methods wrapped with swig, instead of all signatures", "technical_keywords": "autodoc_docstring_signature, swig, C++ class, docstring, overloaded methods, Python binding", "error_symptoms": "Only the first overloaded method signature appears in documentation; others are omitted", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-7748"}, {"problem_type": "build error", "affected_modules": "doc/glossary.rst, Sphinx", "core_issue": "Duplicate glossary term definitions for mysql and MySQL differing only by case cause Sphinx to raise a treated-as-error warning during documentation build", "technical_keywords": "glossary, Sphinx, duplicate term, mysql, MySQL, doc/glossary.rst, Warning, treated as error", "error_symptoms": "Warning, treated as error: doc/glossary.rst:243:duplicate term description of mysql, other instance in glossary", "domain_area": "documentation", "instance_id": "sphinx-doc__sphinx-7757"}, {"problem_type": "feature request", "affected_modules": "sphinx.ext.autodoc", "core_issue": "The autodoc :private-members: option cannot specify particular private members, only enabling documentation of all or none", "technical_keywords": ":private-members:, :members:, :autoattribute:, autodoc, Sphinx", "error_symptoms": "Unable to selectively document specific private members; only all are included when :private-members: is used", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-7889"}, {"problem_type": "bug", "affected_modules": "sphinx.locale, gettext_auto_build, conf.py", "core_issue": "Custom translations in locale/<language>/LC_MESSAGES/sphinx.po are ignored in favor of official translations despite locale directory setup and language configuration", "technical_keywords": "sphinx.po, sphinx.mo, locale_dirs, language, conf.py, gettext_auto_build, index.html", "error_symptoms": "Custom figure and code captions do not appear; official translations are used instead of expected localized outputs", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-7910"}, {"problem_type": "bug", "affected_modules": "sphinx.linkcheck", "core_issue": "Linkcheck reports missing anchor instead of HTTP errors when linkcheck_anchors is True, obscuring actual server-side errors", "technical_keywords": "linkcheck, linkcheck_anchors, sphinx-quickstart, make linkcheck, HTTP 404, HTTP 500", "error_symptoms": "Reported as 'Anchor not found' instead of HTTP error codes such as '404 Client Error: Not Found for url'", "domain_area": "documentation tooling", "instance_id": "sphinx-doc__sphinx-7985"}, {"problem_type": "bug", "affected_modules": "sklearn.cluster.KMeans", "core_issue": "KMeans produces slightly different clustering results depending on whether n_jobs is set to 1 or greater than 1, even with the same random_state.", "technical_keywords": "KMeans, n_jobs, inertia_, fit, random_state, sklearn.cluster", "error_symptoms": "Different inertia values for n_jobs=1 versus n_jobs>1 despite identical input and random seed", "domain_area": "machine_learning", "instance_id": "sphinx-doc__sphinx-8035"}, {"problem_type": "bug", "affected_modules": "sphinx.ext.autodoc, sphinx.ext.napoleon, sphinxarg.ext", "core_issue": "autodoc_type_aliases does not apply when autodoc_typehints is set to 'description', leading to type aliases being ignored in generated documentation", "technical_keywords": "autodoc_type_aliases, autodoc_typehints, types.JSONObject, Dict[str, Any], sphinx_doc", "error_symptoms": "Type hints are displayed as Dict[str, Any] instead of the expected types.JSONObject alias in documentation output when autodoc_typehints is set to 'description'", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-8056"}, {"problem_type": "rendering issue", "affected_modules": "Sphinx, sphinx.ext.napoleon, numpydoc", "core_issue": "Docstring with multiple input parameters in one line is not rendered correctly in HTML, especially failing to show 'optional' annotation", "technical_keywords": "docstring, numpydoc, Sphinx, sphinx.ext.napoleon, array_like, optional, Parameters section", "error_symptoms": "Rendered HTML does not differentiate optional parameters or display combined parameter types correctly", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-8120"}, {"problem_type": "documentation rendering bug", "affected_modules": "sphinx.ext.autodoc, pyvista.BasePlotter.add_lines", "core_issue": "Default argument tuple values in Python function docstrings are incorrectly rendered as separate comma values in HTML output, instead of as a tuple", "technical_keywords": "add_lines, color, sphinx.ext.autodoc, docstring, HTML rendering, default argument, BasePlotter", "error_symptoms": "HTML documentation shows 'color=1, 1, 1' instead of 'color=(1, 1, 1)' in function signature", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-8265"}, {"problem_type": "feature_request", "affected_modules": "sphinx.linkcheck", "core_issue": "The linkcheck builder does not check local (internal) links, but users expect it to verify these as well.", "technical_keywords": "sphinx.linkcheck, index.rst, sphinx-quickstart, reStructuredText, linkcheck builder", "error_symptoms": "Local internal links such as 'doesntexist' are not checked, only external links are reported as broken.", "domain_area": "documentation_tools", "instance_id": "sphinx-doc__sphinx-8269"}, {"problem_type": "bugfix", "affected_modules": "linkchecker", "core_issue": "HEAD requests causing infinite redirects lead to TooManyRedirects exception and are not retried with GET, causing valid links to be reported as broken", "technical_keywords": "HEAD request, GET request, TooManyRedirects, linkcheck, exception handling, Sphinx", "error_symptoms": "Valid links fail linkcheck and are falsely reported as broken due to TooManyRedirects from HEAD requests", "domain_area": "web_validation", "instance_id": "sphinx-doc__sphinx-8459"}, {"problem_type": "documentation bug", "affected_modules": "sphinx.ext.autodoc", "core_issue": "The :meta public: directive is ignored for variables, so privately-named variables annotated as public are not included in the generated documentation.", "technical_keywords": "autodoc, :meta public:, automodule, Sphinx, variables, documentation, underscore prefix", "error_symptoms": "_foo variable is not shown in the built documentation despite having :meta public: annotation", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-8475"}, {"problem_type": "bug", "affected_modules": "sphinx.ext.autodoc, autodoc", "core_issue": "autodoc shows all module members even when __all__ is defined as an empty list, instead of omitting all members", "technical_keywords": "__all__, automodule, :members:, autodoc, index.rst, example.py", "error_symptoms": "All functions foo, bar, and baz are visible in documentation despite __all__ being empty", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-8548"}, {"problem_type": "bug", "affected_modules": "sphinx.ext.autodoc, sphinx-apidoc, sphinx.ext.intersphinx", "core_issue": "Instance variable documentation links to unrelated variables of the same name elsewhere in the project due to auto-linking heuristics", "technical_keywords": "autodoc, apidoc, instance variable, global variable, variable linking, referencing heuristic, Sphinx", "error_symptoms": "Instance variable documentation incorrectly links to unrelated variables with the same name from other classes or subpackages", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-8551"}, {"problem_type": "rendering issue", "affected_modules": "sphinx.ext.autodoc, enum", "core_issue": "Function signatures show Python Enum default values using their full representation instead of the class member name, producing cluttered documentation", "technical_keywords": "Enum, autodoc, function signature, default value, MyEnum, ValueA, sphinx.ext.autodoc", "error_symptoms": "Signatures display Enum values as '<MyEnum.ValueA: 10>' rather than 'MyEnum.ValueA'", "domain_area": "documentation", "instance_id": "sphinx-doc__sphinx-8593"}, {"problem_type": "usability bug", "affected_modules": "sphinx.quickstart", "core_issue": "sphinx-quickstart cannot exit gracefully when an existing conf.py is present and the user presses Enter at the root path prompt", "technical_keywords": "sphinx-quickstart, conf.py, root path prompt, exit behavior, input validation", "error_symptoms": "Pressing Enter returns an error message 'Please enter a valid path name' instead of exiting", "domain_area": "documentation tooling", "instance_id": "sphinx-doc__sphinx-8595"}, {"problem_type": "bug", "affected_modules": "sphinx.ext.viewcode", "core_issue": "Viewcode generates module pages for epub output even when viewcode_enable_epub is set to False during make html epub", "technical_keywords": "viewcode_enable_epub, sphinx.ext.viewcode, make html epub, Sphinx, module pages", "error_symptoms": "Module pages are created for epub output unexpectedly", "domain_area": "documentation_generation", "instance_id": "sphinx-doc__sphinx-8621"}, {"problem_type": "feature request", "affected_modules": "type annotation parser, docstring parser", "core_issue": "Lack of support for union type specification using the vertical bar '|' in parameter type annotations within docstrings", "technical_keywords": "union type, |, docstring, :type, type hinting, bytes, str, restructuredtext, PyCharm", "error_symptoms": "Unable to specify multiple accepted types using | in docstring type annotations", "domain_area": "documentation parsing", "instance_id": "sphinx-doc__sphinx-8638"}, {"problem_type": "feature limitation", "affected_modules": "sphinx.ext.autodoc", "core_issue": "autodoc fails to document inherited data members because it does not search for docstrings in base class namespaces", "technical_keywords": "autodoc, inherited-members, data members, docstring, namespace, search-key, base class", "error_symptoms": "Inherited attributes are not documented when autodoc is used with inherited-members option", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-8721"}, {"problem_type": "documentation bug", "affected_modules": "sphinx.ext.autodoc", "core_issue": "Type annotations in property methods are not cross-referenced in generated documentation", "technical_keywords": "property, type annotation, cross-reference, Point, Sphinx, autodoc", "error_symptoms": "Documented types in property type annotations do not link to their definitions in the generated HTML documentation", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-9229"}, {"problem_type": "bug", "affected_modules": "sphinx.roles.kbd", "core_issue": "The :kbd: role misinterprets -,+,^ as separators in single keystrokes and compound keystrokes, resulting in incorrect HTML output with empty kbd elements", "technical_keywords": ":kbd:, Sphinx, separator, compound-key, regexp, HTML output", "error_symptoms": "Single keystrokes containing -,+,^ are split into blank kbd elements in HTML; compound keystrokes produce extra blank kbd elements", "domain_area": "documentation rendering", "instance_id": "sphinx-doc__sphinx-9230"}, {"problem_type": "documentation bug", "affected_modules": "sphinx.ext.autodoc, sphinx, alibi_detect.utils.pytorch.kernels", "core_issue": "When documenting classes inheriting from mocked base classes with sphinx>=3.4.2, the 'Bases' section displays incomplete base class names such as 'torch.nn.' instead of the full base name 'torch.nn.Module'.", "technical_keywords": "sphinx, sphinx.ext.autodoc, autodoc, mocked classes, Bases section, torch.nn.Module, DeepKernel, readthedocs", "error_symptoms": "The generated documentation's 'Bases' section shows incomplete or incorrect base class names for inherited mocked classes; specifically, it displays 'Bases: torch.nn.' instead of 'Bases: torch.nn.Module'.", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-9258"}, {"problem_type": "bug", "affected_modules": "sphinx.ext.autodoc, autodocsumm, sphinx.docstring parser", "core_issue": "Sphinx incorrectly renders :param dict(str, str): docstring annotation, mangling the parameter datatype and order in the generated documentation", "technical_keywords": "sphinx, :param, dict(str, str), docstring parsing, autodoc, documentation rendering", "error_symptoms": "Parameter annotation is rendered as 'str) opc_meta (dict(str,)' instead of 'opc_meta (dict(str,str))'", "domain_area": "documentation_generation", "instance_id": "sphinx-doc__sphinx-9281"}, {"problem_type": "bug", "affected_modules": "sphinx.tests.test_pycode_ast, sphinx.pycode.ast", "core_issue": "Rendering a 1-element tuple omits the trailing comma, displaying (1,) as (1)", "technical_keywords": "tuple, rendering, (1,), sphinx-doc, test_pycode_ast, pycode.ast, testcase", "error_symptoms": "Single-element tuple rendered without trailing comma", "domain_area": "documentation tool, code parsing", "instance_id": "sphinx-doc__sphinx-9320"}, {"problem_type": "bug", "affected_modules": "Point, distance", "core_issue": "The distance calculation ignores extra dimensions when Points of different lengths are provided, leading to incorrect results", "technical_keywords": "Point, distance, __init__, zip, sqrt", "error_symptoms": "Distance computed using only overlapping dimensions, third dimension ignored", "domain_area": "geometry_processing", "instance_id": "sphinx-doc__sphinx-9367"}, {"problem_type": "documentation bug", "affected_modules": "sphinx.ext.autodoc, Sphinx", "core_issue": "Sphinx does not consistently render multiline docstrings for type aliases, displaying the default 'alias of ...' message for some aliases instead of their provided documentation.", "technical_keywords": "type alias, docstring, sphinx.ext.autodoc, Sphinx, autodoc, Callable, Dict, Union", "error_symptoms": "Rendered HTML documentation shows 'alias of ...' for some type aliases instead of the actual docstring content.", "domain_area": "documentation_generation", "instance_id": "sphinx-doc__sphinx-9461"}, {"problem_type": "bug", "affected_modules": "py:method directive, property option, index entry generation", "core_issue": "An index entry for a method directive with the property option incorrectly includes parentheses, which should not be present for properties", "technical_keywords": "py:method, :property:, py:property, Sphinx, index entry", "error_symptoms": "Index entries for properties display parentheses, giving incorrect documentation output", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-9591"}, {"problem_type": "documentation bug", "affected_modules": "sphinx, sphinx.ext.autodoc, sphinx.ext.autosummary", "core_issue": "Sphinx fails to document methods decorated with both @classmethod and @property; these methods are omitted from the generated documentation.", "technical_keywords": "@classmethod, @property, BaseClass.baseclass_class_property, MetaClass.metaclass_class_property, SubClass.subclass_class_property, sphinx autodoc, class attribute, descriptor, __doc__, python3.9, python3.10", "error_symptoms": "Methods decorated with both @classmethod and @property do not appear in the generated html documentation, unlike regular @property methods.", "domain_area": "software documentation", "instance_id": "sphinx-doc__sphinx-9602"}, {"problem_type": "documentation build error", "affected_modules": "sphinx, sphinx.ext.autodoc", "core_issue": "Sphinx nitpick mode incorrectly interprets Literal type annotation values as py:class references, causing warnings for non-class values like True", "technical_keywords": "Literal, nitpick, autodoc, type annotation, py:class, sphinx-build", "error_symptoms": "Nitpick warning: missing py:class for Literal values such as True, build fails with -n -W enabled", "domain_area": "documentation generation", "instance_id": "sphinx-doc__sphinx-9658"}, {"problem_type": "regression", "affected_modules": "sympy.Matrix, sympy.Matrix.hstack", "core_issue": "The behavior of hstack with zero-row matrices changed between sympy 1.0 and 1.1, now returning fewer columns than expected", "technical_keywords": "Matrix.zeros, Matrix.hstack, shape, sympy", "error_symptoms": "hstack of zero-row matrices returns shape (0, 3) instead of expected (0, 6)", "domain_area": "symbolic_computation", "instance_id": "sphinx-doc__sphinx-9673"}, {"problem_type": "bug", "affected_modules": "sympy.functions.elementary.hyperbolic, sympy.core.symbol", "core_issue": "The coth(log(tan(x))).subs(x, n) expression raises a NameError due to an undefined variable 'cotm' in the eval method for certain integer substitutions.", "technical_keywords": "coth, log, tan, Symbol, subs, eval, cotm, S.ComplexInfinity, NameError", "error_symptoms": "NameError: name 'cotm' is not defined", "domain_area": "symbolic_computation", "instance_id": "sphinx-doc__sphinx-9698"}, {"problem_type": "bug", "affected_modules": "Permutation", "core_issue": "The Permutation constructor raises a ValueError when passed non-disjoint cycles, instead of applying them in left-to-right order to produce the correct permutation", "technical_keywords": "Permutation, constructor, cycles, ValueError, identity permutation", "error_symptoms": "ValueError is raised when Permutation is called with non-disjoint cycles", "domain_area": "mathematical algorithms", "instance_id": "sphinx-doc__sphinx-9711"}, {"problem_type": "bug", "affected_modules": "sympy.matrices, Matrix.col_insert", "core_issue": "Matrix.col_insert produces an incorrectly shifted identity matrix after column insertion; columns of the identity are misplaced after insertion", "technical_keywords": "Matrix.col_insert, sympy.matrices, eye, ones, identity matrix, column insertion", "error_symptoms": "Output matrix has the identity matrix columns misaligned after insertion; the identity appears at top rows instead of bottom rows", "domain_area": "symbolic computation", "instance_id": "sympy__sympy-11618"}, {"problem_type": "bug", "affected_modules": "sympy.utilities.lambdify, sympy.core.function", "core_issue": "Function.evalf does not recursively call evalf on implemented function results via _imp_, resulting in unevaluated compositions", "technical_keywords": "implemented_function, Function._eval_evalf, evalf, _imp_", "error_symptoms": "Composed implemented functions return symbolic expressions instead of numeric values when evalf is used", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-12096"}, {"problem_type": "bug", "affected_modules": "FiniteSet, Interval, Complement", "core_issue": "Complement returns incorrect result when applied to a FiniteSet containing both Symbols and numbers against an Interval, omitting the numeric value from the result", "technical_keywords": "FiniteSet, Interval, Complement, Symbol, number", "error_symptoms": "Only Symbols are returned by Complement, numeric elements are missing from the result", "domain_area": "symbolic mathematics", "instance_id": "sympy__sympy-12419"}, {"problem_type": "feature incompatibility", "affected_modules": "sphinx.ext.napoleon, autodoc_typehints", "core_issue": "Return types do not appear in documentation when autodoc_typehints_description_target is set to documented and Napoleon plugin is used with Google style docstrings", "technical_keywords": "autodoc_typehints, autodoc_typehints_description_target, sphinx.ext.napoleon, Google style docstring, Returns, rtype, sphinx.ext.autodoc", "error_symptoms": "Documentation missing return type information for functions with documented returns", "domain_area": "documentation generation", "instance_id": "sympy__sympy-12481"}, {"problem_type": "design flaw", "affected_modules": "sympy.core.basic", "core_issue": "Rich comparison methods like __eq__, __lt__, and so on return False instead of NotImplemented when encountering unknown types, resulting in unsymmetric equivalence relations", "technical_keywords": "__eq__, __lt__, __ge__, NotImplemented, sympy.Basic, rich comparison, python data model", "error_symptoms": "Comparisons between custom classes and sympy objects are not symmetric; f == s may be True while s == f is False", "domain_area": "object-oriented programming", "instance_id": "sympy__sympy-12489"}, {"problem_type": "bug", "affected_modules": "needs_extensions, sphinx_gallery.gen_gallery", "core_issue": "needs_extensions compares extension versions as strings instead of semver, causing valid high versions to be rejected as too low", "technical_keywords": "needs_extensions, Sphinx, sphinx_gallery, version_check, '0.6', '0.10'", "error_symptoms": "Extension version 0.10.0 rejected as not meeting minimum 0.6.0 requirement despite being newer", "domain_area": "documentation_generation", "instance_id": "sympy__sympy-13031"}, {"problem_type": "design limitation", "affected_modules": "combinatorics.Permutation, combinatorics.Basic", "core_issue": "Permutation object creation does not follow standard Python instance creation semantics, preventing effective subclassing as instances of the base class are always returned", "technical_keywords": "combinatorics.Permutation, __new__, _af_new, Basic.__new__, subclassing, static method, classmethod", "error_symptoms": "Subclassing Permutation results in instances of Permutation instead of the subclass; cannot override instance creation behavior without intrusive monkeypatching", "domain_area": "computer algebra system, symbolic computation", "instance_id": "sympy__sympy-13091"}, {"problem_type": "bug", "affected_modules": "sympy.matrices.expressions, sympy.assumptions.refine, sympy.core.symbol", "core_issue": "The total sum of the elements of an identity matrix derived from an orthogonal matrix is evaluated as 0 instead of n in SymPy", "technical_keywords": "MatrixSymbol, refine, Q.orthogonal, Sum, doit, ask, Q.diagonal, Q.integer_elements", "error_symptoms": "Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() yields 0 instead of n", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-13372"}, {"problem_type": "bug", "affected_modules": "sympy.core.evalf, Mul, Max", "core_issue": "UnboundLocalError occurs in evalf due to undefined reprec when argument order in Mul changes and evalf_table lookup fails for Max", "technical_keywords": "evalf, Mul, Max, evalf_table, reprec, imprec, KeyError, UnboundLocalError, NotImplementedError", "error_symptoms": "UnboundLocalError: local variable 'reprec' referenced before assignment, KeyError: Max when accessing evalf_table[x.func]", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-13480"}, {"problem_type": "inconsistent behavior", "affected_modules": "Poly, multiplication, sympy.core, sympy.polys.polytools", "core_issue": "Multiplying an expression by Poly does not fully evaluate when the expression is on the left side of the multiplication", "technical_keywords": "Poly, multiplication, S, domain, Python 3.4, Python 3.6", "error_symptoms": "Multiplication yields unevaluated expressions like x*Poly(x, x, domain='ZZ') instead of evaluated form Poly(x**2, x, domain='ZZ')", "domain_area": "symbolic computation", "instance_id": "sympy__sympy-13551"}, {"problem_type": "feature request", "affected_modules": "latex, pretty-printing", "core_issue": "The latex() function restricts mul_symbol to four predefined choices, preventing users from specifying arbitrary multiplication symbols such as '\\,'", "technical_keywords": "latex, mul_symbol, Integral, sympy", "error_symptoms": "Unable to customize mul_symbol in latex() beyond the predefined options", "domain_area": "computer algebra, symbolic computation", "instance_id": "sympy__sympy-13615"}, {"problem_type": "feature limitation", "affected_modules": "sympy.physics.quantum.TensorProduct, sympy.physics.quantum.tensor_product_simp", "core_issue": "TensorProduct expressions raised to powers cannot be properly evaluated or expanded using available methods such as expand(tensorproduct=True) or tensor_product_simp", "technical_keywords": "TensorProduct, tensor_product_simp, expand, Pauli, Symbol, commutative=False", "error_symptoms": "TensorProduct powers are left unevaluated, resulting in expressions like 1x1**2 or 1xsigma3**2 instead of fully simplified results", "domain_area": "symbolic computation", "instance_id": "sympy__sympy-13647"}, {"problem_type": "incorrect output formatting", "affected_modules": "sympy, sympy.matrices.expressions.MatrixSymbol, sympy.printing.str, sympy.printing.pretty, sympy.printing.latex", "core_issue": "MatrixSymbol differences are printed as sums with coefficients of -1 instead of using subtraction notation", "technical_keywords": "MatrixSymbol, sympy, str, pprint, latex, printing", "error_symptoms": "Printed expressions like (-1)*B + (-1)*A*B + A appear instead of the expected A - A*B - B", "domain_area": "symbolic mathematics, mathematical expression rendering", "instance_id": "sympy__sympy-13757"}, {"problem_type": "bug", "affected_modules": "sympy.physics.vector.vector, sympy.physics.vector.ReferenceFrame", "core_issue": "Adding a Vector and zero-initialized Vector expressions using sum() causes TypeError due to strict type checking in _check_vector", "technical_keywords": "ReferenceFrame, Vector, N.x, sum, _check_vector, __add__, TypeError", "error_symptoms": "TypeError: A Vector must be supplied", "domain_area": "symbolic mathematics", "instance_id": "sympy__sympy-13798"}, {"problem_type": "bug", "affected_modules": "mathematica_code", "core_issue": "The mathematica_code function outputs Max expressions with arguments in Python order instead of Mathematica order", "technical_keywords": "mathematica_code, Max, symbols, output format", "error_symptoms": "Returns 'Max(2, x)' instead of 'Max[x,2]'", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-13852"}, {"problem_type": "bug", "affected_modules": "sympy.lambdify, mpmath, inspect", "core_issue": "lambdify with modules='mpmath' does not convert rational constants to mpmath types, causing loss of precision in numeric evaluation", "technical_keywords": "lambdify, mpmath, RisingFactorial, nsolve, S, Eq, rf, Float, evalf, inspect.getsource", "error_symptoms": "Reduced precision results from nsolve due to rationals like 232/3 not evaluated at full precision", "domain_area": "symbolic computation, numerical analysis", "instance_id": "sympy__sympy-13877"}, {"problem_type": "bug", "affected_modules": "sympy.algebras.quaternion, Quaternion.to_rotation_matrix", "core_issue": "Quaternion.to_rotation_matrix() produces incorrect rotation matrix with sign error in sine terms", "technical_keywords": "Quaternion, to_rotation_matrix, trigsimp, Matrix, sympy", "error_symptoms": "Returned rotation matrix contains positive sin(x) where one should be negative", "domain_area": "mathematical_computations", "instance_id": "sympy__sympy-13878"}, {"problem_type": "bug", "affected_modules": "sympy.tensor.array.NDimArray, sympy.Array", "core_issue": "The __len__ method of NDimArray returns 0 for rank-0 arrays instead of 1, which is inconsistent with numpy and the number of elements in the iterator", "technical_keywords": "NDimArray, __len__, sympy.Array, rank-0 array, scalar, numpy.asarray, size", "error_symptoms": "len(array) returns 0 for rank-0 sympy Array, but len(list(array)) returns 1", "domain_area": "scientific_computing", "instance_id": "sympy__sympy-13974"}, {"problem_type": "bug", "affected_modules": "sympy.core.mod, sympy.core.tests.test_arit", "core_issue": "Mod(3*i, 2) does not reduce to Mod(i, 2) as expected", "technical_keywords": "Mod, doit, Symbol, sympify, cls, non_mod_l, mod_l, test_Mod, mod.py, test_arit.py", "error_symptoms": "Mod(3*i, 2) returns unchanged instead of reducing to Mod(i, 2)", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-14248"}, {"problem_type": "feature request", "affected_modules": "Min, Max", "core_issue": "Zero-argument Min() and Max() raise ValueError instead of returning mathematically appropriate values oo and -oo", "technical_keywords": "Min, Max, ValueError, oo, -oo, empty set", "error_symptoms": "ValueError: The Max/Min functions must have arguments.", "domain_area": "mathematical computation", "instance_id": "sympy__sympy-14531"}, {"problem_type": "incorrect symbolic computation, expansion error", "affected_modules": "sympy.functions.special.polylog, sympy.core.function.expand_func, sympy.simplify.nsimplify", "core_issue": "The expansion and evaluation of polylog do not yield the expected simplified numerical or symbolic result and introduce unnecessary exp_polar factors affecting the function's properties and derivatives.", "technical_keywords": "polylog, Rational, expand_func, nsimplify, evalf, pi, log, exp_polar, mpmath, derivative, function expansion, branch cut", "error_symptoms": "polylog expressions fail to expand to expected forms; unexpected exp_polar(-I*pi) terms in expansion; derivative calculation does not simplify to zero after expansion; incorrect symbolic answer returned.", "domain_area": "symbolic mathematics, computer algebra system", "instance_id": "sympy__sympy-14711"}, {"problem_type": "bug", "affected_modules": "StrPrinter, sstr, Eq, Limit, python", "core_issue": "StrPrinter settings such as sympy_integers are not consistently respected in subexpressions, causing incorrect string representations", "technical_keywords": "StrPrinter, sstr, sympy_integers, Eq, S, Limit, python", "error_symptoms": "String output ignores StrPrinter settings for certain subexpressions; representations show plain integers instead of S-form; code generation omits symbol definitions", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-14976"}, {"problem_type": "bug", "affected_modules": "sympy.matrices, sympy.matrices.expressions.determinant, sympy.matrices.matrices, sympy.matrices.immutable, sympy.polys.polytools, sympy.core.exprtools, sympy.core.expr", "core_issue": "Determinant calculation using Bareiss algorithm for symbolic matrices with certain entries causes Invalid NaN comparison error due to improper handling of non-integer/symbolic types", "technical_keywords": "Matrix, det, Determinant, doit, _eval_determinant, _eval_det_bareiss, bareiss, cancel, factor_terms, as_coeff_Mul, TypeError", "error_symptoms": "TypeError: Invalid NaN comparison, determinant returns nan for certain matrix sizes", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-15017"}, {"problem_type": "bug", "affected_modules": "posify, Symbol", "core_issue": "The posify function does not preserve the 'finite' assumption of Symbol objects, resulting in loss of finiteness information after transformation", "technical_keywords": "posify, Symbol, is_finite, _assumptions, finite, assumption propagation", "error_symptoms": "After applying posify, xp.is_finite returns None instead of True", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-15345"}, {"problem_type": "bug", "affected_modules": "core, Add, is_zero", "core_issue": "is_zero incorrectly returns False for certain complex integer expressions instead of None or the correct value", "technical_keywords": "is_zero, complex integer, Add, simplify, matrix rank", "error_symptoms": "is_zero returns False for expressions that are actually zero, leading to errors in determining matrix rank", "domain_area": "symbolic computation", "instance_id": "sympy__sympy-15349"}, {"problem_type": "bug", "affected_modules": "sympy.functions.combinatorial.product, sympy.abc", "core_issue": "The Product evaluation for n + 1 / 2**k over k from 0 to n-1 produces an incorrect result; the implementation does not correctly handle forms involving the q-Pochhammer symbol.", "technical_keywords": "Product, doit, simplify, sympy.abc.n, sympy.abc.k, q-Pochhammer symbol, subs", "error_symptoms": "Incorrect computed value for product, e.g., for n=2 returns 9/2 instead of 15/2", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-15599"}, {"problem_type": "bug", "affected_modules": "Sphinx, autodoc, cross-reference resolution, type info fields", "core_issue": "Unqualified class names in :type: and :rtype: fields generate ambiguous cross-reference warnings and resolve to incorrect classes when multiple classes with same name exist in different modules", "technical_keywords": ":type:, :rtype:, py:class, py:function, cross-reference, Sphinx, param, currentmodule, mod.A, mod.submod.A, warnings", "error_symptoms": "WARNING: more than one target found for cross-reference 'A': mod.A, mod.submod.A; incorrect links for type references", "domain_area": "documentation, docstring parsing", "instance_id": "sympy__sympy-15809"}, {"problem_type": "bug", "affected_modules": "simpy.crypto.crypto", "core_issue": "Morse code mapping for digit 1 uses '----' instead of '.----'", "technical_keywords": "Morse encoding, mapping, simpy.crypto.crypto", "error_symptoms": "Digit 1 is encoded incorrectly in Morse code", "domain_area": "cryptography", "instance_id": "sympy__sympy-15875"}, {"problem_type": "feature request", "affected_modules": "sympy.stats.cdf, sympy.stats.ContinuousDistribution, sympy.stats distribution classes", "core_issue": "SymPy's cdf calculation for several continuous distributions relies on integration of the PDF, which often fails or produces incorrect results; precomputed CDF formulas should be implemented via internal _cdf methods for reliability", "technical_keywords": "cdf, PDF, ContinuousDistribution, _cdf method, Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse, Kumaraswamy, Laplace, Logistic, Nakagami, StudentT, UniformSum, Integral, lowergamma, uppergamma, hypergeometric function, Piecewise, doit", "error_symptoms": "hangs, incorrect or non-convergent symbolic Integrals, partial evaluation, exception thrown, unexpected floats returned", "domain_area": "symbolic mathematics, probability distributions", "instance_id": "sympy__sympy-15976"}, {"problem_type": "bug", "affected_modules": "sympy.utilities.autowrap, sympy.codegen, cython backend", "core_issue": "autowrap generates incorrect Cython function signatures for array arguments that do not appear in the wrapped expression, leading to runtime TypeError due to scalar mismatch", "technical_keywords": "autowrap, MatrixSymbol, codegen, args, cython backend, double*, double, numpy array, TypeError", "error_symptoms": "TypeError: only size-1 arrays can be converted to Python scalars", "domain_area": "symbolic computation", "instance_id": "sympy__sympy-16450"}, {"problem_type": "bug", "affected_modules": "sympy.simplify.fu, sympy.simplify.trigsimp, sympy.strategies.core, sympy.simplify.simplify", "core_issue": "Simplifying cos(x) raised to the complex exponent I leads to an invalid comparison when a complex number is compared using < in the simplify logic", "technical_keywords": "simplify, cos, I, trigsimp, futrig, bottom_up, _futrig, greedy, TR6, _TR56, _f, expr.__lt__, TypeError", "error_symptoms": "TypeError: Invalid comparison of complex I", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-16597"}, {"problem_type": "design ambiguity", "affected_modules": "sympy.core.symbol, sympy.core.assumptions", "core_issue": "is_even assumption does not automatically imply is_finite for Symbol objects", "technical_keywords": "Symbol, is_even, is_finite, assumptions", "error_symptoms": "is_finite returns None when is_even is True for Symbol", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-16766"}, {"problem_type": "feature deficiency", "affected_modules": "sympy.printing.pycode, sympy.lambdify, PythonCodePrinter", "core_issue": "PythonCodePrinter lacks support for Indexed objects, causing lambdify to generate code with warnings for Indexed operations", "technical_keywords": "PythonCodePrinter, Indexed, IndexedBase, pycode, lambdify, _print_Indexed", "error_symptoms": "Warnings indicating 'Indexed' is not supported in Python, generated code contains commented warning and incomplete output for Indexed objects", "domain_area": "symbolic computation", "instance_id": "sympy__sympy-16792"}, {"problem_type": "rendering bug", "affected_modules": "sympy.printing.mathml, sympy", "core_issue": "Symbols with names ending in numbers are rendered invisible in MathML output when viewed in Safari browser", "technical_keywords": "sympy.symbols, sympy.mathml, printer='presentation', MathML, Safari 12.0.2", "error_symptoms": "Variables like 'x2' are not visible in browser-rendered MathML output, while variables like 'x' display normally", "domain_area": "mathematical expression rendering", "instance_id": "sympy__sympy-16886"}, {"problem_type": "unexpected exception, inconsistent operator behavior", "affected_modules": "sympy.geometry.point, sympy.geometry, sympy.core.mul, sympy.core.sympify", "core_issue": "Addition of geometry.Point and a product of a sympified number and another Point fails with GeometryError, while multiplication in reverse order works as expected", "technical_keywords": "geometry.Point, sympy.sympify, Point._normalize_dimension, Point.__add__, Mul, GeometryError", "error_symptoms": "GeometryError: Don't know how to add 2.0*Point2D(1, 1) and a Point object, TypeError: Expecting sequence of coordinates, not `Mul`", "domain_area": "symbolic mathematics, computational geometry", "instance_id": "sympy__sympy-17139"}, {"problem_type": "bug", "affected_modules": "nthroot_mod", "core_issue": "The nthroot_mod function fails to include zero as a valid root when a modulo p equals zero", "technical_keywords": "nthroot_mod, modular arithmetic, roots, modulo, equation, x**n = a mod p", "error_symptoms": "Zero root (x = 0 mod p) is missing from the result of nthroot_mod when a % p == 0", "domain_area": "number theory", "instance_id": "sympy__sympy-17318"}, {"problem_type": "bug", "affected_modules": "sympy.solvers.diophantine", "core_issue": "The diophantine function returns incomplete or inconsistent results depending on the order of symbols when permute=True is set", "technical_keywords": "diophantine, syms, permute, sympy, n**4 + m**4 - 2**4 - 3**4", "error_symptoms": "Results vary inconsistently or are incomplete for equivalent inputs with different symbol ordering", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-17630"}, {"problem_type": "inconsistent output", "affected_modules": "sqf, sqf_list", "core_issue": "sqf_list returns inconsistent factor multiplicities, grouping multiple factors with the same multiplicity separately instead of as a product", "technical_keywords": "sqf_list, factorization, multiplicity, polynomial, SymPy", "error_symptoms": "sqf_list outputs separate factors with the same multiplicity rather than combining them, leading to incorrect factorization representation", "domain_area": "computer algebra", "instance_id": "sympy__sympy-17655"}, {"problem_type": "bug", "affected_modules": "solveset, ConditionSet", "core_issue": "solveset raises NotImplementedError for equations it cannot explicitly solve instead of returning a ConditionSet representing the implicit solution", "technical_keywords": "solveset, ConditionSet, Eq, as_set, NotImplementedError, Reals", "error_symptoms": "NotImplementedError is raised when calling as_set on an unsolvable equation", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-18189"}, {"problem_type": "bug", "affected_modules": "sympy.printing.latex, sympy.core.function.Subs", "core_issue": "LaTeX printer does not correctly parenthesize Subs expressions in multiplication, leading to incorrect mathematical grouping in output", "technical_keywords": "Subs, sympy.printing.latex, LaTeXPrinter, sympy.abc, parenthesizing", "error_symptoms": "LaTeX output missing parentheses around substituted expressions, changing mathematical meaning", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-18199"}, {"problem_type": "bug", "affected_modules": "sympy.polys.polytools, sympy.factor", "core_issue": "The factor function with the extension argument incorrectly omits a factor when factoring certain polynomials, specifically dropping y-1 from (x-1)*(y-1) when extension=[I] is used", "technical_keywords": "sympy, factor, extension, expand, polynomial factoring, extension=[I]", "error_symptoms": "Expected factors are missing; factor(z, extension=[I]) returns x-1 instead of (x-1)*(y-1)", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-18211"}, {"problem_type": "bug", "affected_modules": "sympy.core.sympify", "core_issue": "The function kernS raises UnboundLocalError due to referencing the local variable 'kern' before assigning it", "technical_keywords": "kernS, kern, UnboundLocalError, sympy.core.sympify", "error_symptoms": "UnboundLocalError: local variable 'kern' referenced before assignment", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-18698"}, {"problem_type": "bug", "affected_modules": "sympy.simplify.sqrtdenest, sympy.simplify.radsimp", "core_issue": "sqrtdenest raises IndexError when unable to denest certain expressions instead of returning them unchanged", "technical_keywords": "sqrtdenest, _sqrtdenest0, _sqrtdenest1, _sqrt_match, split_surds, _split_gcd, IndexError", "error_symptoms": "IndexError: tuple index out of range", "domain_area": "symbolic_math", "instance_id": "sympy__sympy-18763"}, {"problem_type": "bug", "affected_modules": "sympy.combinatorics.perm_groups, sympy.combinatorics, sympy", "core_issue": "Calling sylow_subgroup on a DihedralGroup with p=2 raises IndexError due to incorrect list manipulation in minimal_blocks method", "technical_keywords": "DihedralGroup, sylow_subgroup, minimal_blocks, IndexError, PermutationGroup", "error_symptoms": "IndexError: list assignment index out of range", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-19040"}, {"problem_type": "bug", "affected_modules": "sympy.srepr", "core_issue": "The srepr function does not serialize dict and set elements as symbolic representations, outputting their default Python representations instead", "technical_keywords": "srepr, Symbol, dict, set, sympy.abc", "error_symptoms": "srepr({x, y}) outputs {x, y} instead of {Symbol('x'), Symbol('y')}; srepr({x: y}) outputs {x: y} instead of {Symbol('x'): Symbol('y')}", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-19346"}, {"problem_type": "bug", "affected_modules": "sympy.physics.quantum.dagger, sympy.physics.quantum.operator, sympy.physics.quantum.identityoperator", "core_issue": "Multiplying a Daggered operator by IdentityOperator does not simplify the expression to just the Daggered operator", "technical_keywords": "Dagger, IdentityOperator, Operator, __mul__, simplification", "error_symptoms": "Dagger(A) * IdentityOperator() returns an unsimplified expression instead of Dagger(A)", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-19495"}, {"problem_type": "design flaw", "affected_modules": "sympy.utilities.iterables", "core_issue": "partitions() iterator reuses output dictionaries, causing unexpected mutations and confusing results when collecting outputs", "technical_keywords": "partitions, iterator, dictionary reuse, docstring, sympy.utilities.iterables", "error_symptoms": "list(partitions()) produces incorrect results, subtle bugs due to shared dictionary state", "domain_area": "mathematical computation", "instance_id": "sympy__sympy-19637"}, {"problem_type": "bug", "affected_modules": "sympy.core.singleton, sympy.core.numbers", "core_issue": "Equality comparison between S.false and S(0.0) yields inconsistent results depending on operand order", "technical_keywords": "S.false, S(0.0), S(0), __eq__, sympy", "error_symptoms": "S(0.0) == S.false returns True, but S.false == S(0.0) returns False", "domain_area": "symbolic mathematics", "instance_id": "sympy__sympy-19783"}, {"problem_type": "bug", "affected_modules": "sympy.Symbol, sympy.core.symbol", "core_issue": "Symbol instances have a __dict__ attribute in version 1.7, violating intended __slots__ usage and memory optimization found in 1.6.2", "technical_keywords": "sympy.Symbol, __dict__, __slots__, AttributeError", "error_symptoms": "__dict__ exists and is empty for Symbol instances in 1.7, whereas AttributeError was raised in 1.6.2", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-19954"}, {"problem_type": "bug", "affected_modules": "sympy.sets.sets, sympy.sets.fancysets, sympy.core.relational", "core_issue": "The is_subset method produces incorrect results when comparing ProductSet and FiniteSet containing the same elements", "technical_keywords": "is_subset, ProductSet, FiniteSet, intersection, Eq.simplify, Complement.equals, AttributeError", "error_symptoms": "is_subset returns wrong boolean, Eq(b, c).simplify raises AttributeError: 'Complement' object has no attribute 'equals'", "domain_area": "symbolic mathematics", "instance_id": "sympy__sympy-20154"}, {"problem_type": "bug", "affected_modules": "sympy.polys.polytools, sympy.polys.polyclasses, sympy.polys.densebasic, sympy.polys.monomials, sympy.polys.densetools, sympy.polys.densearith", "core_issue": "clear_denoms() produces a zero polynomial with an unstripped leading 0 in its DMP representation, causing inconsistent behavior and errors in Poly methods", "technical_keywords": "clear_denoms, Poly, DMP, is_zero, as_expr, terms_gcd, primitive, dmp_terms_gcd, dmp_ground_primitive, dup_primitive, dup_quo_ground, monomial_min, ZeroDivisionError, EX domain", "error_symptoms": "Poly(0,...).is_zero is False, as_expr() returns 0 with is_zero True, methods like terms_gcd raise IndexError, primitive raises ZeroDivisionError in older versions", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-20428"}, {"problem_type": "bug", "affected_modules": "sympy.core.cache, sympy.core.symbol, sympy.functions, sympy.core.expr", "core_issue": "Applying subs to expressions with hyperbolic sinusoids containing piecewise arguments and real symbol assumptions unexpectedly raises PolynomialError, depending on cache state and symbol properties.", "technical_keywords": "subs, Piecewise, sinh, cosh, tanh, exp, symbols, PolynomialError, isympy, clear_cache, lambdify", "error_symptoms": "PolynomialError: Piecewise generators do not make sense", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-20438"}, {"problem_type": "formatting issue", "affected_modules": "pprint", "core_issue": "pprint unicode does not correctly format subscripts on Greek letters", "technical_keywords": "pprint, unicode, subscript, Greek letters, formatting", "error_symptoms": "Subscripted Greek letters appear incorrectly as regular letters followed by numbers instead of proper Unicode subscript characters", "domain_area": "text_rendering", "instance_id": "sympy__sympy-20590"}, {"problem_type": "rendering issue", "affected_modules": "sympy.physics.secondquant", "core_issue": "Latex output in the secondquant module does not correctly format double superscripts with the dagger command, leading to incorrect rendering in Jupyter Notebook", "technical_keywords": "Commutator, B, Bd, init_printing, Latex, dagger, Jupyter Notebook", "error_symptoms": "Latex output shows b^\\dagger_{0}^{2} instead of the correct {b^\\dagger_{0}}^{2}", "domain_area": "symbolic mathematics", "instance_id": "sympy__sympy-20801"}, {"problem_type": "bug", "affected_modules": "sympy.matrices.expressions.blockmatrix, sympy.core.numbers", "core_issue": "BlockMatrix multiplication with ZeroMatrix blocks results in Zero scalars instead of ZeroMatrix blocks, causing AttributeError due to missing 'cols' attribute", "technical_keywords": "BlockMatrix, ZeroMatrix, block_collapse, _blockmul, blockshape, colblocksizes, AttributeError, sympy.matrices.expressions.blockmatrix, sympy.core.numbers.Zero", "error_symptoms": "AttributeError: 'Zero' object has no attribute 'cols' when multiplying block matrices with ZeroMatrix blocks more than once", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-20916"}, {"problem_type": "bug", "affected_modules": "sympy.core.sympify, sympy.parsing.sympy_parser, sympy.geometry.point", "core_issue": "Using with evaluate(False) context when sympifying Point2D causes an unexpected ValueError about imaginary coordinates, unlike direct usage with evaluate=False", "technical_keywords": "sympy.S, evaluate(False), Point2D, Integer, sympify, parse_expr, ValueError", "error_symptoms": "ValueError: Imaginary coordinates are not permitted.", "domain_area": "computer algebra", "instance_id": "sympy__sympy-21379"}, {"problem_type": "bug", "affected_modules": "sympy.sets.conditionset, sympy.sets.imageset", "core_issue": "Substitution with ConditionSet containing an ImageSet produces unexpected results, misinterpreting bound variables during substitution", "technical_keywords": "ConditionSet, ImageSet, subs, xreplace, solveset_real, Lambda, S.Integers, Contains, Interval, pi, asin", "error_symptoms": "Substitution on ConditionSet with ImageSet leads to set containing substituted values as elements instead of substituting inside the ImageSet expression; bound variable confusion", "domain_area": "symbolic_math", "instance_id": "sympy__sympy-21596"}, {"problem_type": "feature inconsistency", "affected_modules": "codegen.ast", "core_issue": "The String class in codegen.ast does not support argument invariance via positional arguments, violating expected behavior for Basic subclasses", "technical_keywords": "codegen.ast, String, Basic, func, args, kwargs", "error_symptoms": "expr.func(*expr.args) does not reconstruct expr as expected; only expr.func(**expr.kwargs()) works", "domain_area": "symbolic computation", "instance_id": "sympy__sympy-21612"}, {"problem_type": "bug", "affected_modules": "sympy.itermonomials, sympy.polys.orderings", "core_issue": "itermonomials fails to produce all monomials with correct total degree when min_degrees argument is used", "technical_keywords": "itermonomials, monomial_key, min_degrees, max_degrees, symbolic variables", "error_symptoms": "Missing expected monomials of specified degree in output", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-21847"}, {"problem_type": "bug", "affected_modules": "imageset, intersect, is_subset, S.Reals, S.Integers, Lambda", "core_issue": "The intersect(Reals) operation on imageset produces incorrect membership results, wrongly indicating an element as being present in the intersection with Reals", "technical_keywords": "imageset, Lambda, S.Integers, S.Reals, intersect, is_subset", "error_symptoms": "Membership test returns True for an element not in the intersection, expected False", "domain_area": "symbolic mathematics", "instance_id": "sympy__sympy-21930"}, {"problem_type": "parsing error", "affected_modules": "sympy.parsing.latex", "core_issue": "Latex fractions are parsed incorrectly due to missing brackets in the denominator, resulting in the wrong expression structure.", "technical_keywords": "parse_latex, \\frac, latex parser, denominator, expression brackets", "error_symptoms": "LaTeX expression '\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}' is parsed to '((a**3 + b)/c)/1/(c**2)' instead of the expected '((a**3 + b)/c)/(1/(c**2))'", "domain_area": "symbolic computation", "instance_id": "sympy__sympy-22080"}, {"problem_type": "bug", "affected_modules": "sympy.lambdify, sympy.Mod", "core_issue": "When using lambdify with modules=[], expressions like expr * Mod(a, b) are incorrectly transformed so that the multiplier is included in the first argument of Mod, altering the semantics.", "technical_keywords": "lambdify, Mod, modules, symbols, sympy, lambdifygenerated", "error_symptoms": "Unexpected computation result; e.g., -Mod(3, 7) gives 4 instead of -3 when modules=[]", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-22456"}, {"problem_type": "feature limitation", "affected_modules": "sympy.printing.pycode, PythonCodePrinter", "core_issue": "PythonCodePrinter cannot convert Min and Max expressions into valid Python code and outputs an unsupported message instead", "technical_keywords": "sympy, Min, Max, pycode, PythonCodePrinter, _print_Min, _print_Max", "error_symptoms": "pycode returns a comment stating Min is not supported and outputs Min(a, b) instead of Python code", "domain_area": "symbolic computation", "instance_id": "sympy__sympy-22714"}, {"problem_type": "bug", "affected_modules": "sympy.physics.hep.gamma_matrices, kahane_simplify", "core_issue": "kahane_simplify reverses the order of leading uncontracted gamma matrices when simplifying products, causing incorrect output", "technical_keywords": "kahane_simplify, GammaMatrix, gamma_trace, LorentzIndex, tensor_indices", "error_symptoms": "Order of leading gamma matrices is reversed in result; assertion error in test due to non-equivalent ordering", "domain_area": "symbolic computation, physics", "instance_id": "sympy__sympy-22914"}, {"problem_type": "bug", "affected_modules": "sympy.physics.units, sympy.physics.units.systems.si", "core_issue": "SI._collect_factor_and_dimension incorrectly identifies the dimension of expressions where the exponent should be dimensionless", "technical_keywords": "sympy, SI._collect_factor_and_dimension, exp, get_dimension_system, is_dimensionless, units.second, units.ohm, units.farad", "error_symptoms": "ValueError: Dimension of \"exp(second/(farad*ohm))\" is Dimension(time/(capacitance*impedance)), but it should be Dimension(1)", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-23262"}, {"problem_type": "regression bug", "affected_modules": "sympy.lambdify, sympy.printing.pycode", "core_issue": "The Python code printer in SymPy 1.10 does not properly format single-element tuples, omitting the trailing comma and returning an integer instead of a tuple.", "technical_keywords": "lambdify, pycode, code generation, tuple formatting, inspect.getsource", "error_symptoms": "Generated function returns an integer instead of a single-element tuple due to missing comma in output code", "domain_area": "symbolic computation, code generation", "instance_id": "sympy__sympy-23413"}, {"problem_type": "bug", "affected_modules": "sympy.physics.units, sympy.physics.units.systems.si, sympy.physics.units.unitsystem", "core_issue": "The _collect_factor_and_dimension method fails to recognize that velocity and acceleration multiplied by time are equivalent dimensions, resulting in a ValueError during addition.", "technical_keywords": "_collect_factor_and_dimension, Quantity, set_quantity_dimension, set_quantity_scale_factor, Dimension, velocity, acceleration, time, SI", "error_symptoms": "ValueError: Dimension of \"v1\" is Dimension(velocity), but it should be Dimension(acceleration*time)", "domain_area": "scientific_computing", "instance_id": "sympy__sympy-23534"}, {"problem_type": "bug", "affected_modules": "sympy.combinatorics.homomorphisms, sympy.combinatorics.perm_groups", "core_issue": "The _image() function fails to handle inverted generators in PermutationGroup, causing _check_homomorphism to reject valid homomorphisms", "technical_keywords": "_check_homomorphism, _image, PermutationGroup, homomorphism, generators, inverted generator, ValueError", "error_symptoms": "ValueError: The given images do not define a homomorphism", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-23824"}, {"problem_type": "bug", "affected_modules": "sympy.core.numbers, sympy.Rational", "core_issue": "Rational constructor returns incorrect value when passing string arguments in sympy 1.11.1", "technical_keywords": "Rational, sympy, Python 3.11, sympy.core.numbers, constructor", "error_symptoms": "Rational('0.5', '100') returns 1/100100 instead of 1/200", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-23950"}, {"problem_type": "bug", "affected_modules": "hermite_normal_form, Matrix, numpy", "core_issue": "hermite_normal_form removes a row when computing the HNF in row orientation, falsely interpreting the matrix as rank-deficient after applying np.flip and transpose operations", "technical_keywords": "hermite_normal_form, Matrix, np.flip, np.array, np.transpose, rank-deficient, row-style HNF", "error_symptoms": "Output matrix missing expected row after HNF, only a single row returned", "domain_area": "linear_algebra", "instance_id": "sympy__sympy-24066"}, {"problem_type": "bug", "affected_modules": "sympy.polys.rings, PolyElement", "core_issue": "PolyElement.as_expr() ignores user-supplied symbols and always uses self.ring.symbols", "technical_keywords": "PolyElement.as_expr, ring, symbols, self.ring.symbols, sympy.polys.rings", "error_symptoms": "Output expression uses original symbols instead of provided ones", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-24213"}, {"problem_type": "bug", "affected_modules": "sympy.core, sympy.sets.contains, sympy.functions.elementary.piecewise", "core_issue": "The Contains.as_set method incorrectly returns a Contains object instead of a set, causing downstream failures where a set is expected", "technical_keywords": "Contains, as_set, as_relational, Piecewise, AttributeError", "error_symptoms": "AttributeError: 'Contains' object has no attribute 'as_relational'", "domain_area": "symbolic_math", "instance_id": "sympy__sympy-24443"}, {"problem_type": "bug", "affected_modules": "sympy.core.symbol, sympy.core.function", "core_issue": "The symbols function creates Symbol objects instead of Function objects when input includes an extra layer of parentheses for tuple unpacking", "technical_keywords": "symbols, Function, Symbol, cls parameter, sympy.core.function.UndefinedFunction, sympy.core.symbol.Symbol", "error_symptoms": "Returned objects are of type Symbol rather than UndefinedFunction when unpacking with tuple parentheses", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-24539"}, {"problem_type": "bug", "affected_modules": "parse_expr, sympy.parsing.sympy_parser", "core_issue": "The evaluate=False parameter is ignored when parsing relational expressions with parse_expr, causing inequalities to be evaluated immediately instead of returning unevaluated relational objects", "technical_keywords": "parse_expr, evaluate=False, Lt, sympy.parsing.sympy_parser, relational expressions", "error_symptoms": "parse_expr('1 < 2', evaluate=False) returns True instead of unevaluated relation 1 < 2", "domain_area": "symbolic_computation", "instance_id": "sympy__sympy-24562"}, {"problem_type": "bug", "affected_modules": "django.db.models, django.db.models.query, django.db.models.prefetch, django.db.models.only, django.db.models.Prefetch", "core_issue": "Deferred fields on related objects are not respected after prefetching, leading to unexpected database queries when accessing deferred fields on parent objects", "technical_keywords": "only, prefetch_related, Prefetch, get_deferred_fields, OneToOneField, ForeignKey, QuerySet", "error_symptoms": "AssertionError: 1 != 0 : 1 queries executed, 0 expected; unnecessary SELECT query for deferred field", "domain_area": "web_framework, ORM", "instance_id": "sympy__sympy-24661"}]